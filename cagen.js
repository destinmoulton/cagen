// Generated by CoffeeScript 1.9.3

/*
Board.coffee

@author Destin Moulton
@git https://github.com/destinmoulton/cagen
@license MIT

Component of Cellular Automata Generator (CAGEN)

Generate a cellular automata board based on a passed rule.
 */

(function() {
  var Board, Dashboard, RuleMatcher, TopRowEditor,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Board = (function() {
    function Board() {
      this._boardContainerID = '#cagen-board';
      this._generateMessageContainerID = '#cagen-generatemessage-container';
      this._jBoard = $(this._boardContainerID);
      this._jGenerateMessage = $(this._generateMessageContainerID);
      this._boardNoCellsWide = 0;
      this._boardNoCellsHigh = 0;
      this._boardCellWidthPx = 5;
      this._boardCellHeightPx = 5;
      this._cellBaseClass = 'cagen-board-cell';
      this._cellActiveClass = 'cagen-board-cell-active';
      this._cellIDPrefix = 'sb_';
      this._currentRow = 1;
      this._rootRowBinary = [];
      this._currentCells = [];
      this._RuleMatcher = new RuleMatcher();
    }

    Board.prototype.buildBoard = function(rootRowBinary, decimalRule, noCellsWide, noSectionsHigh) {
      this._rootRowBinary = rootRowBinary;
      this._RuleMatcher.setCurrentRule(decimalRule);
      this._boardNoCellsWide = noCellsWide;
      this._boardNoCellsHigh = noSectionsHigh;
      this._jBoard.width(noCellsWide * this._boardCellWidthPx);
      this._jBoard.height(noSectionsHigh * this._boardCellHeightPx);
      this._jBoard.html("");
      this._jBoard.hide();
      this._currentRow = 1;
      return this._jGenerateMessage.show((function(_this) {
        return function() {
          _this._generateRows();
          _this._jGenerateMessage.hide();
          return _this._jBoard.show();
        };
      })(this));
    };

    Board.prototype._generateRows = function() {
      var i, ref, results, row;
      this._buildTopRow();
      results = [];
      for (row = i = 2, ref = this._boardNoCellsHigh; 2 <= ref ? i <= ref : i >= ref; row = 2 <= ref ? ++i : --i) {
        this._currentRow = row;
        results.push(this._buildRow(row));
      }
      return results;
    };

    Board.prototype.getCurrentRule = function() {
      return this._RuleMatcher.getCurrentRule();
    };

    Board.prototype._buildRow = function(row) {
      var col, i, oneIndex, ref, twoIndex, zeroIndex;
      for (col = i = 1, ref = this._boardNoCellsWide; 1 <= ref ? i <= ref : i >= ref; col = 1 <= ref ? ++i : --i) {
        zeroIndex = this._currentCells[row - 1][col - 1];
        if (zeroIndex === void 0) {
          zeroIndex = this._currentCells[row - 1][this._boardNoCellsWide];
        }
        oneIndex = this._currentCells[row - 1][col];
        twoIndex = this._currentCells[row - 1][col + 1];
        if (twoIndex === void 0) {
          twoIndex = this._currentCells[row - 1][1];
        }
        if (this._RuleMatcher.match(zeroIndex, oneIndex, twoIndex) === 0) {
          this._addBlockToBoard(row, col, false);
        } else {
          this._addBlockToBoard(row, col, true);
        }
      }
      return this._currentRow++;
    };

    Board.prototype._buildTopRow = function() {
      var cell, col, i, ref;
      for (col = i = 1, ref = this._boardNoCellsWide; 1 <= ref ? i <= ref : i >= ref; col = 1 <= ref ? ++i : --i) {
        cell = this._rootRowBinary[col];
        if (cell === 1) {
          this._addBlockToBoard(this._currentRow, col, true);
        } else {
          this._addBlockToBoard(this._currentRow, col, false);
        }
      }
      return this._currentRow++;
    };

    Board.prototype._addBlockToBoard = function(row, col, active) {
      var tmpClass, tmpDiv, tmpID, tmpLeftPx, tmpStyle, tmpTopPx;
      if (!this._currentCells[row]) {
        this._currentCells[row] = [];
      }
      this._currentCells[row][col] = active ? 1 : 0;
      tmpID = this._cellIDPrefix + this._currentRow + "_" + col;
      tmpLeftPx = (col - 1) * this._boardCellWidthPx;
      tmpTopPx = (row - 1) * this._boardCellHeightPx;
      tmpStyle = " style='top:" + tmpTopPx + "px;left:" + tmpLeftPx + "px;' ";
      tmpClass = this._cellBaseClass;
      if (active) {
        tmpClass = " " + tmpClass + " " + this._cellActiveClass + " ";
      }
      tmpDiv = "<div id='" + tmpID + "' class='" + tmpClass + "' " + tmpStyle + "></div>";
      return this._jBoard.append(tmpDiv);
    };

    return Board;

  })();


  /*
  Dashboard.coffee
  
  @author Destin Moulton
  @git https://github.com/destinmoulton/cagen
  @license MIT
  
  Component of Cellular Automata Generator (CAGEN)
  
  Functionality for building the dashboard for
  controlling the cellular automata generation.
  
  Display a preview of the rules.
   */

  Dashboard = (function() {
    function Dashboard() {
      this._returnFromTopRowEditorCallback = bind(this._returnFromTopRowEditorCallback, this);
      this._jCagenContainer = $("#cagen-container");
      this._jCagenDashboardTemplate = $('#tmpl-cagen-dashboard');
      this._previewCellPrefixID = "#cagen-console-preview-";
      this._previewDigitPrefixID = "#cagen-console-preview-digit-";
      this._currentRule = 0;
      this._previewBoxWidth = 40;
      this._noBoardColumns = 151;
      this._noBoardRows = 75;
      this._TopRowEditor = new TopRowEditor();
    }

    Dashboard.prototype.run = function() {
      var dashboardHTML, i, rule, tmpOption;
      dashboardHTML = this._jCagenDashboardTemplate.html();
      Mustache.parse(dashboardHTML);
      this._jCagenContainer.html(Mustache.render(dashboardHTML, {}));
      this._jInputSelectRule = $("#cagen-console-select-input");
      this._jButtonGenerate = $("#cagen-console-generate-button");
      this._jButtonTopRow = $("#cagen-toprow-button");
      this._jRulesContainer = $('#cagen-rules-preview-container');
      this._Board = new Board();
      for (rule = i = 0; i <= 255; rule = ++i) {
        tmpOption = "<option value='" + rule + "'>" + rule + "</option>";
        this._jInputSelectRule.append(tmpOption);
      }
      this._jInputSelectRule.val(this._currentRule);
      this._jInputSelectRule.change((function(_this) {
        return function(event) {
          return _this._changeRuleEvent(event);
        };
      })(this));
      this._jButtonGenerate.click((function(_this) {
        return function(event) {
          return _this._generateButtonClicked(event);
        };
      })(this));
      return this._jButtonTopRow.click((function(_this) {
        return function(event) {
          return _this._topRowButtonClicked(event);
        };
      })(this));
    };

    Dashboard.prototype._generateButtonClicked = function(event) {
      var topRowBinary;
      this._jRulesContainer.fadeOut();
      topRowBinary = this._TopRowEditor.getRowBinary();
      this._Board.buildBoard(topRowBinary, this._jInputSelectRule.val(), this._noBoardColumns, this._noBoardRows);
      this._buildRulePreview();
      return false;
    };

    Dashboard.prototype._topRowButtonClicked = function(event) {
      return this._TopRowEditor.run(this._returnFromTopRowEditorCallback);
    };

    Dashboard.prototype._changeRuleEvent = function(event) {
      return this._currentRule = this._jInputSelectRule.val();
    };

    Dashboard.prototype._returnFromTopRowEditorCallback = function() {
      return this.run();
    };

    Dashboard.prototype._buildRulePreview = function() {
      var activeClass, binary, currentRule, i, index, jTmpCell, jTmpDigit, left, leftBit, middleBit, previewCellHtml, rendered, rightBit, tmplOptions;
      currentRule = this._Board.getCurrentRule();
      previewCellHtml = $('#tmpl-cagen-dash-preview-cell').html();
      Mustache.parse(previewCellHtml);
      activeClass = 'cagen-console-preview-cell-active';
      for (index = i = 7; i >= 0; index = --i) {
        binary = index.toString(2);
        if (binary.length === 2) {
          binary = "0" + binary;
        } else if (binary.length === 1) {
          binary = "00" + binary;
        }
        leftBit = false;
        middleBit = false;
        rightBit = false;
        if (binary.charAt(0) === "1") {
          leftBit = true;
        }
        if (binary.charAt(1) === "1") {
          middleBit = true;
        }
        if (binary.charAt(2) === "1") {
          rightBit = true;
        }
        left = (7 - index) * this._previewBoxWidth;
        tmplOptions = {
          left: left,
          previewIndex: index,
          leftBitActive: leftBit,
          middleBitActive: middleBit,
          rightBitActive: rightBit
        };
        rendered = Mustache.render(previewCellHtml, tmplOptions);
        this._jRulesContainer.append(rendered);
        jTmpCell = $(this._previewCellPrefixID + index);
        jTmpDigit = $(this._previewDigitPrefixID + index);
        jTmpCell.removeClass(activeClass);
        jTmpDigit.html(0);
        if (currentRule.substr(index, 1) === "1") {
          jTmpCell.addClass(activeClass);
          jTmpDigit.html(1);
        }
      }
      return this._jRulesContainer.fadeIn();
    };

    return Dashboard;

  })();


  /*
  Main.coffee
  
  @author Destin Moulton
  @git https://github.com/destinmoulton/cagen
  @license MIT
  
  Component of Cellular Automata Generator (CAGEN)
  
  The jQuery onload function that starts
  the cagen dashboard.
   */

  $(function() {
    var dashboard;
    dashboard = new Dashboard();
    return dashboard.run();
  });


  /*
  RuleMatcher.coffee
  
  @author Destin Moulton
  @git https://github.com/destinmoulton/cagen
  @license MIT
  
  Component of Cellular Automata Generator (CAGEN)
  
  The rule is a binary string. Each 1 in the binary string
  represents a rule to-be-followed in the next row of
  generated blocks.
  
  There are 255 rules of 8 block positions.
  
  Rule 0 Example:
  111 110 101 100 011 010 001 000
   0   0   0   0   0   0   0   0
  
  Rule 20 Example:
  111 110 101 100 011 010 001 000
   0   0   1   0   1   0   0   0
  
  Rule 255 Example:
  111 110 101 100 011 010 001 000
   1   1   1   1   1   1   1   1
  
  The position of filled cells on the top row determines
  the composition of the next row and so on.
   */

  RuleMatcher = (function() {
    function RuleMatcher() {
      this._binaryRule = "";
      this._patterns = ['111', '110', '101', '100', '011', '010', '001', '000'];
    }

    RuleMatcher.prototype.setCurrentRule = function(decimalRule) {
      return this._binaryRule = this._decToBinary(decimalRule);
    };

    RuleMatcher.prototype.getCurrentRule = function() {
      return this._binaryRule;
    };

    RuleMatcher.prototype.match = function(zeroIndex, oneIndex, twoIndex) {
      var foundPatternIndex, patternToFind;
      patternToFind = "" + zeroIndex + oneIndex + twoIndex;
      foundPatternIndex = this._patterns.indexOf(patternToFind);
      return parseInt(this._binaryRule.substr(foundPatternIndex, 1));
    };

    RuleMatcher.prototype._decToBinary = function(decValue) {
      var binary, i, length, num, ref;
      binary = (parseInt(decValue)).toString(2);
      length = binary.length;
      if (length < 8) {
        for (num = i = ref = length; ref <= 7 ? i <= 7 : i >= 7; num = ref <= 7 ? ++i : --i) {
          binary = "0" + binary;
        }
      }
      return binary;
    };

    return RuleMatcher;

  })();


  /*
  TopRowEditor.coffee
  
  @author Destin Moulton
  @git https://github.com/destinmoulton/cagen
  @license MIT
  
  Component of Cellular Automata Generator (CAGEN)
  
  Edit the top row of the cagen board.
   */

  TopRowEditor = (function() {
    function TopRowEditor() {
      this._toggleEditorCell = bind(this._toggleEditorCell, this);
      this._moveSlider = bind(this._moveSlider, this);
      var cagenContainerId, toproweditorTemplateId;
      this._rowContainerId = "#rowed-slider-row-container";
      this._sliderContainerId = "#rowed-slider-container";
      this._sliderId = "#rowed-slider";
      this._editorContainerId = "#rowed-editor-container";
      this._returnButtonId = "#rowed-button-returntodashboard";
      cagenContainerId = "#cagen-container";
      toproweditorTemplateId = "#tmpl-cagen-toproweditor";
      this._editorCellActiveClass = 'rowed-editor-cell-active';
      this._sliderCellActiveClass = 'cagen-board-cell-active';
      this._jCagenContainer = $(cagenContainerId);
      this._jTopRowEditorTemplate = $(toproweditorTemplateId);
      this._jEditorCells = [];
      this._aRowBinary = [];
      this._noColumns = 151;
      this._colWidth = 5;
      this._rowHeight = 5;
      this._sliderLeft = 0;
      this._sliderCols = 26;
      this._sliderPxToMid = (this._sliderCols / 2) * this._colWidth;
      this._editorCellWidth = 29;
      this._totalWidth = this._colWidth * this._noColumns;
      this._generateInitialBinary();
    }

    TopRowEditor.prototype.run = function(fDashboardCallback) {
      var dashboardHTML;
      dashboardHTML = this._jTopRowEditorTemplate.html();
      Mustache.parse(dashboardHTML);
      this._jCagenContainer.html(Mustache.render(dashboardHTML, {}));
      this._jSliderContainer = $(this._sliderContainerId);
      this._jSlider = $(this._sliderId);
      this._jRowContainer = $(this._rowContainerId);
      this._jEditorContainer = $(this._editorContainerId);
      this._jReturnButton = $(this._returnButtonId);
      this._jRowContainer.height(this._rowHeight);
      this._jRowContainer.width(this._totalWidth);
      this._jSliderContainer.width(this._totalWidth);
      this._jSlider.width(this._colWidth * this._sliderCols);
      this._jSliderContainer.mousemove(this._moveSlider);
      this._fDashboardCallback = fDashboardCallback;
      this._sliderInitialOffset = this._jSlider.offset();
      this._buildRow();
      this._buildEditorCells();
      this._updateEditorCells(1);
      return this._jReturnButton.click((function(_this) {
        return function(event) {
          return _this._returnToDashboardClicked(event);
        };
      })(this));
    };

    TopRowEditor.prototype.getRowBinary = function() {
      return this._aRowBinary;
    };

    TopRowEditor.prototype._returnToDashboardClicked = function(event) {
      return this._fDashboardCallback();
    };

    TopRowEditor.prototype._moveSlider = function(ev) {
      var closestEdgePx, fullWidth, leftCellNo, leftPos, rightPos, xMousePos;
      xMousePos = ev.clientX;
      closestEdgePx = xMousePos - (xMousePos % this._colWidth);
      leftPos = closestEdgePx - this._sliderPxToMid;
      rightPos = closestEdgePx + this._sliderPxToMid + this._colWidth;
      fullWidth = this._totalWidth + this._sliderInitialOffset.left + (2 * this._colWidth);
      if (leftPos >= this._sliderInitialOffset.left && rightPos <= fullWidth) {
        this._jSlider.offset({
          top: this._sliderInitialOffset.top,
          left: leftPos
        });
        leftCellNo = (leftPos / this._colWidth) - 1;
        return this._updateEditorCells(leftCellNo);
      }
    };

    TopRowEditor.prototype._updateEditorCells = function(beginCell) {
      var cell, cellPos, i, ref, results;
      results = [];
      for (cell = i = 1, ref = this._sliderCols; 1 <= ref ? i <= ref : i >= ref; cell = 1 <= ref ? ++i : --i) {
        cellPos = cell + beginCell - 1;
        this._jEditorCells[cell].text(cellPos);
        this._jEditorCells[cell].data('cellIndex', cellPos);
        if (this._aRowBinary[cellPos] === 1) {
          results.push(this._jEditorCells[cell].addClass(this._editorCellActiveClass));
        } else {
          results.push(this._jEditorCells[cell].removeClass(this._editorCellActiveClass));
        }
      }
      return results;
    };

    TopRowEditor.prototype._buildEditorCells = function() {
      var cell, cellTemplate, i, leftPos, ref, rendered, results, tmpId;
      cellTemplate = $('#tmpl-rowed-editor-cell').html();
      Mustache.parse(cellTemplate);
      this._jEditorContainer.width(this._sliderCols * this._editorCellWidth);
      results = [];
      for (cell = i = 1, ref = this._sliderCols; 1 <= ref ? i <= ref : i >= ref; cell = 1 <= ref ? ++i : --i) {
        tmpId = "editor-cell-" + cell;
        leftPos = (cell - 1) * this._editorCellWidth;
        rendered = Mustache.render(cellTemplate, {
          id: tmpId,
          left: leftPos
        });
        this._jEditorContainer.append(rendered);
        this._jEditorCells[cell] = $("#" + tmpId);
        results.push(this._jEditorCells[cell].click(this._toggleEditorCell));
      }
      return results;
    };

    TopRowEditor.prototype._toggleEditorCell = function(event) {
      var cellNo, jTmpCell;
      jTmpCell = $("#" + event.target.id);
      cellNo = jTmpCell.data('cellIndex');
      if (this._aRowBinary[cellNo] === 1) {
        this._aRowBinary[cellNo] = 0;
        jTmpCell.removeClass(this._editorCellActiveClass);
        return $('#rowed-slider-col-' + cellNo).removeClass(this._sliderCellActiveClass);
      } else {
        this._aRowBinary[cellNo] = 1;
        jTmpCell.addClass(this._editorCellActiveClass);
        return $('#rowed-slider-col-' + cellNo).addClass(this._sliderCellActiveClass);
      }
    };

    TopRowEditor.prototype._generateInitialBinary = function() {
      var col, i, ref, results, seed_col;
      seed_col = Math.ceil(this._noColumns / 2);
      results = [];
      for (col = i = 1, ref = this._noColumns; 1 <= ref ? i <= ref : i >= ref; col = 1 <= ref ? ++i : --i) {
        if (col === seed_col) {
          results.push(this._aRowBinary[col] = 1);
        } else {
          results.push(this._aRowBinary[col] = 0);
        }
      }
      return results;
    };

    TopRowEditor.prototype._buildRow = function() {
      var activeClass, col, i, leftPos, ref, rendered, results, smallCellTemplate, tmpId;
      smallCellTemplate = $('#tmpl-rowed-slider-cell').html();
      Mustache.parse(smallCellTemplate);
      results = [];
      for (col = i = 1, ref = this._noColumns; 1 <= ref ? i <= ref : i >= ref; col = 1 <= ref ? ++i : --i) {
        activeClass = "";
        if (this._aRowBinary[col] === 1) {
          activeClass = this._sliderCellActiveClass;
        }
        leftPos = (col - 1) * this._colWidth;
        tmpId = "rowed-slider-col-" + col;
        rendered = Mustache.render(smallCellTemplate, {
          id: tmpId,
          left: leftPos,
          activeClass: activeClass
        });
        results.push(this._jRowContainer.append(rendered));
      }
      return results;
    };

    return TopRowEditor;

  })();

}).call(this);
