
/*

A pub/sub system and shared variable exchange for WolfCage.

@author Destin Moulton
@git https://github.com/destinmoulton/wolfcage
@license MIT

Subscribe and publish to a channel.

Set and get shared variables.
 */
var Bus,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Bus = (function() {
  function Bus() {
    this.subscribe = bind(this.subscribe, this);
    this._channels = {};
    this._vault = {};
  }

  Bus.prototype.subscribe = function(channel, callback) {
    if (!this._channels.hasOwnProperty(channel)) {
      this._channels[channel] = [];
    }
    return this._channels[channel].push(callback);
  };

  Bus.prototype.broadcast = function(channel, payload) {
    var i, len, ref, results, subscriber;
    if (this._channels.hasOwnProperty(channel)) {
      ref = this._channels[channel];
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        subscriber = ref[i];
        results.push(subscriber(payload));
      }
      return results;
    } else {
      return console.log("Bus: Unable to find " + channel + " channel.");
    }
  };

  Bus.prototype.set = function(name, variable) {
    return this._vault[name] = variable;
  };

  Bus.prototype.get = function(name) {
    if (!this._vault.hasOwnProperty(name)) {
      return console.log("Bus: Unable to find " + name + " in variable vault.");
    } else {
      return this._vault[name];
    }
  };

  return Bus;

})();

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQnVzLmpzIiwic291cmNlcyI6WyJCdXMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQSxHQUFBO0VBQUE7O0FBY007RUFFVSxhQUFBOztJQUNSLElBQUMsQ0FBQSxTQUFELEdBQWE7SUFDYixJQUFDLENBQUEsTUFBRCxHQUFVO0VBRkY7O2dCQUlaLFNBQUEsR0FBVyxTQUFDLE9BQUQsRUFBVSxRQUFWO0lBQ1AsSUFBRyxDQUFJLElBQUMsQ0FBQSxTQUFTLENBQUMsY0FBWCxDQUEwQixPQUExQixDQUFQO01BQ0ksSUFBQyxDQUFBLFNBQVUsQ0FBQSxPQUFBLENBQVgsR0FBc0IsR0FEMUI7O1dBR0EsSUFBQyxDQUFBLFNBQVUsQ0FBQSxPQUFBLENBQVEsQ0FBQyxJQUFwQixDQUF5QixRQUF6QjtFQUpPOztnQkFNWCxTQUFBLEdBQVcsU0FBQyxPQUFELEVBQVUsT0FBVjtBQUNQLFFBQUE7SUFBQSxJQUFHLElBQUMsQ0FBQSxTQUFTLENBQUMsY0FBWCxDQUEwQixPQUExQixDQUFIO0FBQ0k7QUFBQTtXQUFBLHFDQUFBOztxQkFDSSxVQUFBLENBQVcsT0FBWDtBQURKO3FCQURKO0tBQUEsTUFBQTthQUdLLE9BQU8sQ0FBQyxHQUFSLENBQVksc0JBQUEsR0FBdUIsT0FBdkIsR0FBK0IsV0FBM0MsRUFITDs7RUFETzs7Z0JBTVgsR0FBQSxHQUFLLFNBQUMsSUFBRCxFQUFPLFFBQVA7V0FDRCxJQUFDLENBQUEsTUFBTyxDQUFBLElBQUEsQ0FBUixHQUFnQjtFQURmOztnQkFHTCxHQUFBLEdBQUssU0FBQyxJQUFEO0lBQ0QsSUFBRyxDQUFJLElBQUMsQ0FBQSxNQUFNLENBQUMsY0FBUixDQUF1QixJQUF2QixDQUFQO2FBQ0ksT0FBTyxDQUFDLEdBQVIsQ0FBWSxzQkFBQSxHQUF1QixJQUF2QixHQUE0QixxQkFBeEMsRUFESjtLQUFBLE1BQUE7QUFFSyxhQUFPLElBQUMsQ0FBQSxNQUFPLENBQUEsSUFBQSxFQUZwQjs7RUFEQyIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuXG5BIHB1Yi9zdWIgc3lzdGVtIGFuZCBzaGFyZWQgdmFyaWFibGUgZXhjaGFuZ2UgZm9yIFdvbGZDYWdlLlxuXG5AYXV0aG9yIERlc3RpbiBNb3VsdG9uXG5AZ2l0IGh0dHBzOi8vZ2l0aHViLmNvbS9kZXN0aW5tb3VsdG9uL3dvbGZjYWdlXG5AbGljZW5zZSBNSVRcblxuU3Vic2NyaWJlIGFuZCBwdWJsaXNoIHRvIGEgY2hhbm5lbC5cblxuU2V0IGFuZCBnZXQgc2hhcmVkIHZhcmlhYmxlcy5cblxuIyMjXG5cbmNsYXNzIEJ1c1xuXG4gICAgY29uc3RydWN0b3I6KCktPlxuICAgICAgICBAX2NoYW5uZWxzID0ge31cbiAgICAgICAgQF92YXVsdCA9IHt9XG5cbiAgICBzdWJzY3JpYmU6IChjaGFubmVsLCBjYWxsYmFjayk9PlxuICAgICAgICBpZiBub3QgQF9jaGFubmVscy5oYXNPd25Qcm9wZXJ0eShjaGFubmVsKVxuICAgICAgICAgICAgQF9jaGFubmVsc1tjaGFubmVsXSA9IFtdXG5cbiAgICAgICAgQF9jaGFubmVsc1tjaGFubmVsXS5wdXNoKGNhbGxiYWNrKVxuXG4gICAgYnJvYWRjYXN0OiAoY2hhbm5lbCwgcGF5bG9hZCktPlxuICAgICAgICBpZiBAX2NoYW5uZWxzLmhhc093blByb3BlcnR5KGNoYW5uZWwpXG4gICAgICAgICAgICBmb3Igc3Vic2NyaWJlciBpbiBAX2NoYW5uZWxzW2NoYW5uZWxdXG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlcihwYXlsb2FkKVxuICAgICAgICBlbHNlIGNvbnNvbGUubG9nKFwiQnVzOiBVbmFibGUgdG8gZmluZCAje2NoYW5uZWx9IGNoYW5uZWwuXCIpXG5cbiAgICBzZXQ6IChuYW1lLCB2YXJpYWJsZSktPlxuICAgICAgICBAX3ZhdWx0W25hbWVdID0gdmFyaWFibGVcblxuICAgIGdldDogKG5hbWUpLT5cbiAgICAgICAgaWYgbm90IEBfdmF1bHQuaGFzT3duUHJvcGVydHkobmFtZSlcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQnVzOiBVbmFibGUgdG8gZmluZCAje25hbWV9IGluIHZhcmlhYmxlIHZhdWx0LlwiKVxuICAgICAgICBlbHNlIHJldHVybiBAX3ZhdWx0W25hbWVdIl19


/*

The DOM configuration for WolfCage.

@author Destin Moulton
@git https://github.com/destinmoulton/wolfcage
@license MIT

Component of the Wolfram Cellular Automata Generator (WolfCage)

Contains the settings for the DOM objects.

Holds ids and classes of relevant DOM objects.
 */
var DOM;

DOM = (function() {
  function DOM() {}

  DOM.ids = {
    'BOARD': {
      'CONTAINER': 'wolfcage-board',
      'MESSAGE_CONTAINER': 'wolfcage-generatemessage-container'
    },
    'WOLFCAGE': {
      'MAIN_CONTAINER': 'wolfcage-container'
    },
    'GENERATOR': {
      'CONTENT_CONTAINER': 'wolfcage-generator-board',
      'RULE_PREVIEW_CONTAINER': 'wolfcage-rules-preview-container',
      'RULE_DROPDOWN': 'wolfcage-generator-select-input',
      'RULE_GENERATE_BUTTON': 'wolfcage-generator-generate-button',
      'COLORPICKER_BUTTON': 'wolfcage-generator-colorpicker-button',
      'COLORPICKER_CONTAINER': 'wolfcage-colorpicker',
      'COLORPICKER_ACTIVE': 'wolfcage-colorpicker-active',
      'COLORPICKER_BORDER': 'wolfcage-colorpicker-border',
      'COLORPICKER_INACTIVE': 'wolfcage-colorpicker-inactive',
      'TEMPLATE_BOARD': 'tmpl-wolfcage-generator-board',
      'TEMPLATE_COLORPICKER': 'tmpl-wolfcage-generator-colorpicker',
      'TEMPLATE_MAIN_CONTAINER': 'tmpl-wolfcage-generator',
      'TEMPLATE_RULE_PREVIEW_CELL': 'tmpl-wolfcage-generator-preview-cell'
    },
    'TABS': {
      'CONTAINER': 'wolfcage-tab-container',
      'TEMPLATE': 'tmpl-wolfcage-tabs'
    },
    'THUMBNAILS': {
      'TEMPLATE_THUMBNAILS': 'tmpl-wolfcage-thumbnails'
    },
    'TOPROWEDITOR': {
      'BUTTON_GENERATE': 'rowed-button-generate',
      'BUTTON_RESET': 'rowed-button-resetrow',
      'EDITOR_CONTAINER': 'rowed-editor-container',
      'ROW_CONTAINER': 'rowed-slider-row-container',
      'SLIDER_CONTAINER': 'rowed-slider-container',
      'SLIDER': 'rowed-slider',
      'SLIDER_ARROW_LEFT': 'rowed-slider-arrow-left',
      'SLIDER_ARROW_RIGHT': 'rowed-slider-arrow-right',
      'TEMPLATE_TOPROWEDITOR': 'tmpl-wolfcage-toproweditor',
      'TEMPLATE_SLIDER_CELL': 'tmpl-rowed-slider-cell',
      'TEMPLATE_EDITOR_CELL': 'tmpl-rowed-editor-cell'
    }
  };

  DOM.classes = {
    'BOARD': {
      'CELL_ACTIVE_CLASS': 'wolfcage-board-cell-active',
      'CELL_BASE_CLASS': 'wolfcage-board-cell'
    },
    'GENERATOR': {
      'RULE_PREVIEW_CELL_ACTIVE': 'wolfcage-generator-preview-cell-active'
    },
    'TABS': {
      'ACTIVE': 'active'
    },
    'THUMBNAILS': {
      'THUMB_BOX': 'wolfcage-rulethumb-box'
    },
    'TOPROWEDITOR': {
      'EDITOR_CELL': 'rowed-editor-cell',
      'EDITOR_CELL_ACTIVE': 'rowed-editor-cell-active',
      'SLIDER_CELL_ACTIVE': 'wolfcage-board-cell-active'
    }
  };

  DOM.prefixes = {
    'BOARD': {
      'CELL': 'sb_'
    },
    'GENERATOR': {
      'RULE_PREVIEW_CELL': 'wolfcage-generator-preview-',
      'RULE_PREVIEW_DIGIT': 'wolfcage-generator-preview-digit-'
    },
    'TABS': {
      'TAB_PREFIX': 'wolfcage-tab-'
    },
    'TOPROWEDITOR': {
      'SLIDER_COL': 'rowed-slider-col-'
    }
  };

  DOM.elemById = function(section, element) {
    return document.getElementById(this.getID(section, element));
  };

  DOM.elemByPrefix = function(section, prefix, suffix) {
    return document.getElementById(this.getPrefix(section, prefix) + suffix);
  };

  DOM.getClass = function(section, element) {
    return this.classes[section][element];
  };

  DOM.getID = function(section, element) {
    if (!this.ids.hasOwnProperty(section)) {
      console.log("DOM::getID() - Unable to find `" + section + "`");
      return void 0;
    }
    if (!this.ids[section].hasOwnProperty(element)) {
      console.log("DOM::getID() - Unable to find `" + element + "`");
      return void 0;
    }
    return this.ids[section][element];
  };

  DOM.getPrefix = function(section, prefix) {
    return this.prefixes[section][prefix];
  };

  return DOM;

})();

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/*

The Cellular Board for WolfCage.

@author Destin Moulton
@git https://github.com/destinmoulton/wolfcage
@license MIT

Generate a cellular automata board based on a passed rule.
 */
var Board;

Board = (function() {
  function Board(BUS) {
    this.BUS = BUS;
    this._boardNoCellsWide = 0;
    this._boardNoCellsHigh = 0;
    this._boardCellWidthPx = 5;
    this._boardCellHeightPx = 5;
    this._currentRow = 1;
    this._rootRowBinary = [];
    this._currentCells = [];
    this._RuleMatcher = new RuleMatcher(BUS);
    this._setupColorChangeEvents();
  }

  Board.prototype.buildBoard = function(rootRowBinary, noCellsWide, noSectionsHigh) {
    this._boardElem = document.getElementById(DOM.getID('BOARD', 'CONTAINER'));
    this._messageElem = document.getElementById(DOM.getID('BOARD', 'MESSAGE_CONTAINER'));
    this._rootRowBinary = rootRowBinary;
    this._RuleMatcher.setCurrentRule(this.BUS.get('currentruledecimal'));
    this._boardNoCellsWide = noCellsWide;
    this._boardNoCellsHigh = noSectionsHigh;
    this._boardElem.innerWidth = noCellsWide * this._boardCellWidthPx;
    this._boardElem.innerHeight = noSectionsHigh * this._boardCellHeightPx;
    this._boardElem.innerHtml = "";
    this._boardElem.style.display = "none";
    this._currentRow = 1;
    this._messageElem.style.display = "block";
    return setTimeout((function(_this) {
      return function() {
        _this._generateRows();
        _this._messageElem.style.display = "none";
        return _this._boardElem.style.display = "block";
      };
    })(this), 500);
  };

  Board.prototype._setupColorChangeEvents = function() {
    this.BUS.subscribe('change.cell.style.activebackground', (function(_this) {
      return function(hexColor) {
        _this._changeCellActiveBackroundColor(hexColor);
      };
    })(this));
    this.BUS.subscribe('change.cell.style.bordercolor', (function(_this) {
      return function(hexColor) {
        return _this._changeCellBorderColor(hexColor);
      };
    })(this));
    return this.BUS.subscribe('change.cell.style.inactivebackground', (function(_this) {
      return function(hexColor) {
        return _this._changeCellInactiveBackgroundColor(hexColor);
      };
    })(this));
  };

  Board.prototype._generateRows = function() {
    var i, ref, results, row;
    this._buildTopRow();
    results = [];
    for (row = i = 2, ref = this._boardNoCellsHigh; 2 <= ref ? i <= ref : i >= ref; row = 2 <= ref ? ++i : --i) {
      this._currentRow = row;
      results.push(this._buildRow(row));
    }
    return results;
  };

  Board.prototype._buildRow = function(row) {
    var col, i, oneIndex, ref, twoIndex, zeroIndex;
    for (col = i = 1, ref = this._boardNoCellsWide; 1 <= ref ? i <= ref : i >= ref; col = 1 <= ref ? ++i : --i) {
      zeroIndex = this._currentCells[row - 1][col - 1];
      if (zeroIndex === void 0) {
        zeroIndex = this._currentCells[row - 1][this._boardNoCellsWide];
      }
      oneIndex = this._currentCells[row - 1][col];
      twoIndex = this._currentCells[row - 1][col + 1];
      if (twoIndex === void 0) {
        twoIndex = this._currentCells[row - 1][1];
      }
      if (this._RuleMatcher.match(zeroIndex, oneIndex, twoIndex) === 0) {
        this._getCellHtml(row, col, false);
      } else {
        this._getCellHtml(row, col, true);
      }
    }
    return this._currentRow++;
  };

  Board.prototype._buildTopRow = function() {
    var cell, col, i, ref;
    for (col = i = 1, ref = this._boardNoCellsWide; 1 <= ref ? i <= ref : i >= ref; col = 1 <= ref ? ++i : --i) {
      cell = this._rootRowBinary[col];
      if (cell === 1) {
        this._getCellHtml(this._currentRow, col, true);
      } else {
        this._getCellHtml(this._currentRow, col, false);
      }
    }
    return this._currentRow++;
  };

  Board.prototype._getCellHtml = function(row, col, active) {
    var tmpCell, tmpClass, tmpID, tmpLeftPx, tmpTopPx;
    if (!this._currentCells[row]) {
      this._currentCells[row] = [];
    }
    this._currentCells[row][col] = active ? 1 : 0;
    tmpID = DOM.getPrefix('BOARD', 'CELL') + this._currentRow + "_" + col;
    tmpLeftPx = (col - 1) * this._boardCellWidthPx;
    tmpTopPx = (row - 1) * this._boardCellHeightPx;
    tmpCell = document.createElement('div');
    tmpCell.setAttribute('id', tmpID);
    tmpCell.style.top = tmpTopPx + "px";
    tmpCell.style.left = tmpLeftPx + "px";
    tmpClass = DOM.getClass('BOARD', 'CELL_BASE_CLASS');
    if (active) {
      tmpCell.style.backgroundColor = this.BUS.get('board.cell.style.activeBackgroundColor');
      tmpClass += " " + (DOM.getClass('BOARD', 'CELL_ACTIVE_CLASS'));
    } else {
      tmpCell.style.backgroundColor = this.BUS.get('board.cell.style.inactiveBackgroundColor');
    }
    tmpCell.setAttribute('class', "" + tmpClass);
    tmpCell.style.borderColor = this.BUS.get('board.cell.style.borderColor');
    return this._boardElem.appendChild(tmpCell);
  };

  Board.prototype._changeCellActiveBackroundColor = function(hexColor) {
    var cell, cellsElems, i, len, results;
    this.BUS.set('board.cell.style.activeBackgroundColor', hexColor);
    cellsElems = document.querySelectorAll('.' + DOM.getClass('BOARD', 'CELL_ACTIVE_CLASS'));
    results = [];
    for (i = 0, len = cellsElems.length; i < len; i++) {
      cell = cellsElems[i];
      results.push(cell.style.backgroundColor = hexColor);
    }
    return results;
  };

  Board.prototype._changeCellBorderColor = function(hexColor) {
    var cell, cellsElems, i, len, results;
    this.BUS.set('board.cell.style.borderColor', hexColor);
    cellsElems = document.querySelectorAll('.' + DOM.getClass('BOARD', 'CELL_BASE_CLASS'));
    results = [];
    for (i = 0, len = cellsElems.length; i < len; i++) {
      cell = cellsElems[i];
      results.push(cell.style.borderColor = hexColor);
    }
    return results;
  };

  Board.prototype._changeCellInactiveBackgroundColor = function(hexColor) {
    var cell, cellsElems, i, len, results;
    this.BUS.set('board.cell.style.inactiveBackgroundColor', hexColor);
    cellsElems = document.querySelectorAll('.' + DOM.getClass('BOARD', 'CELL_BASE_CLASS'));
    results = [];
    for (i = 0, len = cellsElems.length; i < len; i++) {
      cell = cellsElems[i];
      if (!cell.classList.contains(DOM.getClass('BOARD', 'CELL_ACTIVE_CLASS'))) {
        results.push(cell.style.backgroundColor = hexColor);
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  return Board;

})();

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/*

The Cellular Automata Generator for WolfCage.

@author Destin Moulton
@git https://github.com/destinmoulton/wolfcage
@license MIT

Component of the Wolfram Cellular Automata Generator (WolfCage)

Functionality for building the generator for
controlling the cellular automata generation.

- Display a preview of the rules.
- Display the generated board.
 */
var Generator;

Generator = (function() {
  function Generator(BUS) {
    this.BUS = BUS;
    this._currentRule = 0;
    this._previewBoxWidth = 40;
    this._noBoardColumns = 151;
    this._noBoardRows = 75;
    this._ruleList = [];
    this.BUS.set('currentruledecimal', this._currentRule);
    this.BUS.subscribe('generator.run', (function(_this) {
      return function() {
        _this.run();
      };
    })(this));
  }

  Generator.prototype.run = function() {
    var generatorTemplateHTML, wolfcageMainElem;
    generatorTemplateHTML = DOM.elemById('GENERATOR', 'TEMPLATE_MAIN_CONTAINER').innerHTML;
    wolfcageMainElem = DOM.elemById('WOLFCAGE', 'MAIN_CONTAINER');
    wolfcageMainElem.innerHTML = Mustache.render(generatorTemplateHTML, {});
    this._Board = new Board(this.BUS);
    this._setupRuleDropdown();
    this._isColorPickerEnabled = false;
    DOM.elemById('GENERATOR', 'COLORPICKER_BUTTON').addEventListener('click', (function(_this) {
      return function() {
        if (_this._isColorPickerEnabled) {
          return _this._disableColorPicker();
        } else {
          return _this._enableColorPicker();
        }
      };
    })(this));
    this._buildBoard();
    return true;
  };

  Generator.prototype._enableColorPicker = function() {
    var colorPickerElem, colorpickerTemplateHTML, cpActive, cpBorder, cpInActive;
    colorpickerTemplateHTML = DOM.elemById('GENERATOR', 'TEMPLATE_COLORPICKER').innerHTML;
    colorPickerElem = DOM.elemById('GENERATOR', 'COLORPICKER_CONTAINER');
    colorPickerElem.innerHTML = Mustache.render(colorpickerTemplateHTML, {});
    colorPickerElem.style.display = "block";
    this._isColorPickerEnabled = true;
    cpActive = ColorPicker(DOM.elemById('GENERATOR', 'COLORPICKER_ACTIVE'), (function(_this) {
      return function(hex) {
        return _this.BUS.broadcast('change.cell.style.activebackground', hex);
      };
    })(this));
    cpActive.setHex(this.BUS.get('board.cell.style.activeBackgroundColor'));
    cpBorder = ColorPicker(DOM.elemById('GENERATOR', 'COLORPICKER_BORDER'), (function(_this) {
      return function(hex) {
        return _this.BUS.broadcast('change.cell.style.bordercolor', hex);
      };
    })(this));
    cpBorder.setHex(this.BUS.get('board.cell.style.borderColor'));
    cpInActive = ColorPicker(DOM.elemById('GENERATOR', 'COLORPICKER_INACTIVE'), (function(_this) {
      return function(hex) {
        return _this.BUS.broadcast('change.cell.style.inactivebackground', hex);
      };
    })(this));
    return cpInActive.setHex(this.BUS.get('board.cell.style.inactiveBackgroundColor'));
  };

  Generator.prototype._disableColorPicker = function() {
    var containerElem;
    this._isColorPickerEnabled = false;
    containerElem = DOM.elemById('GENERATOR', 'COLORPICKER_CONTAINER');
    containerElem.innerHTML = "";
    return containerElem.style.display = "none";
  };

  Generator.prototype._setupRuleDropdown = function() {
    var dropdownElem, i, optionsHTML, rule;
    dropdownElem = DOM.elemById('GENERATOR', 'RULE_DROPDOWN');
    optionsHTML = "";
    for (rule = i = 0; i <= 255; rule = ++i) {
      optionsHTML += "<option value='" + rule + "'>" + rule + "</option>";
    }
    dropdownElem.innerHTML = optionsHTML;
    dropdownElem.value = this.BUS.get('currentruledecimal');
    dropdownElem.addEventListener('change', (function(_this) {
      return function(event) {
        return _this.BUS.set('currentruledecimal', event.target.value);
      };
    })(this));
    return DOM.elemById('GENERATOR', 'RULE_GENERATE_BUTTON').addEventListener('click', (function(_this) {
      return function() {
        return _this._buildBoard();
      };
    })(this));
  };

  Generator.prototype._buildBoard = function() {
    var binary, cellBoardHtml;
    cellBoardHtml = DOM.elemById('GENERATOR', 'TEMPLATE_BOARD').innerHTML;
    DOM.elemById('GENERATOR', 'CONTENT_CONTAINER').innerHTML = Mustache.render(cellBoardHtml, {});
    this._rulesContainerElem = DOM.elemById('GENERATOR', 'RULE_PREVIEW_CONTAINER');
    binary = this.BUS.get('toprowbinary');
    this._Board.buildBoard(binary, this._noBoardColumns, this._noBoardRows);
    this._buildRulePreview();
    return true;
  };

  Generator.prototype._buildRulePreview = function() {
    var activeClass, binary, currentRule, i, index, jTmpCell, jTmpDigit, left, leftBit, middleBit, previewCellHtml, rendered, results, rightBit, tmplOptions;
    currentRule = this.BUS.get('rulebinarysting');
    previewCellHtml = DOM.elemById('GENERATOR', 'TEMPLATE_RULE_PREVIEW_CELL').innerHTML;
    activeClass = this._rulesContainerElem.innerHTML = "";
    results = [];
    for (index = i = 7; i >= 0; index = --i) {
      binary = index.toString(2);
      if (binary.length === 2) {
        binary = "0" + binary;
      } else if (binary.length === 1) {
        binary = "00" + binary;
      }
      leftBit = false;
      middleBit = false;
      rightBit = false;
      if (binary.charAt(0) === "1") {
        leftBit = true;
      }
      if (binary.charAt(1) === "1") {
        middleBit = true;
      }
      if (binary.charAt(2) === "1") {
        rightBit = true;
      }
      left = (7 - index) * this._previewBoxWidth;
      tmplOptions = {
        left: left,
        previewIndex: index,
        leftBitActive: leftBit,
        middleBitActive: middleBit,
        rightBitActive: rightBit
      };
      rendered = Mustache.render(previewCellHtml, tmplOptions);
      this._rulesContainerElem.innerHTML += rendered;
      jTmpCell = DOM.elemByPrefix('GENERATOR', 'RULE_PREVIEW_CELL', index);
      jTmpDigit = DOM.elemByPrefix('GENERATOR', 'RULE_PREVIEW_DIGIT', index);
      jTmpCell.classList.remove(DOM.getClass('GENERATOR', 'RULE_PREVIEW_CELL_ACTIVE'));
      jTmpDigit.innerHTML = "0";
      if (currentRule.substr(7 - index, 1) === "1") {
        jTmpCell.classList.add(DOM.getClass('GENERATOR', 'RULE_PREVIEW_CELL_ACTIVE'));
        results.push(jTmpDigit.innerHTML = "1");
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  return Generator;

})();

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2VuZXJhdG9yLmpzIiwic291cmNlcyI6WyJHZW5lcmF0b3IuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUE7O0FBaUJNO0VBT1UsbUJBQUMsR0FBRDtJQUNSLElBQUMsQ0FBQSxHQUFELEdBQU87SUFFUCxJQUFDLENBQUEsWUFBRCxHQUFnQjtJQUNoQixJQUFDLENBQUEsZ0JBQUQsR0FBb0I7SUFDcEIsSUFBQyxDQUFBLGVBQUQsR0FBbUI7SUFDbkIsSUFBQyxDQUFBLFlBQUQsR0FBZ0I7SUFFaEIsSUFBQyxDQUFBLFNBQUQsR0FBYTtJQUViLElBQUMsQ0FBQSxHQUFHLENBQUMsR0FBTCxDQUFTLG9CQUFULEVBQStCLElBQUMsQ0FBQSxZQUFoQztJQUVBLElBQUMsQ0FBQSxHQUFHLENBQUMsU0FBTCxDQUFlLGVBQWYsRUFDSSxDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUE7UUFDSSxLQUFDLENBQUEsR0FBRCxDQUFBO01BREo7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBREo7RUFaUTs7c0JBcUJaLEdBQUEsR0FBSSxTQUFBO0FBQ0EsUUFBQTtJQUFBLHFCQUFBLEdBQXdCLEdBQUcsQ0FBQyxRQUFKLENBQWEsV0FBYixFQUEwQix5QkFBMUIsQ0FBb0QsQ0FBQztJQUM3RSxnQkFBQSxHQUFtQixHQUFHLENBQUMsUUFBSixDQUFhLFVBQWIsRUFBeUIsZ0JBQXpCO0lBQ25CLGdCQUFnQixDQUFDLFNBQWpCLEdBQTZCLFFBQVEsQ0FBQyxNQUFULENBQWdCLHFCQUFoQixFQUFzQyxFQUF0QztJQUc3QixJQUFDLENBQUEsTUFBRCxHQUFjLElBQUEsS0FBQSxDQUFNLElBQUMsQ0FBQSxHQUFQO0lBRWQsSUFBQyxDQUFBLGtCQUFELENBQUE7SUFFQSxJQUFDLENBQUEscUJBQUQsR0FBeUI7SUFDekIsR0FBRyxDQUFDLFFBQUosQ0FBYSxXQUFiLEVBQXlCLG9CQUF6QixDQUE4QyxDQUFDLGdCQUEvQyxDQUFn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QixFQUFtRCxLQUFuRDtNQUVaLFFBQVEsQ0FBQyxTQUFTLENBQUMsTUFBbkIsQ0FBMEIsR0FBRyxDQUFDLFFBQUosQ0FBYSxXQUFiLEVBQTBCLDBCQUExQixDQUExQjtNQUNBLFNBQVMsQ0FBQyxTQUFWLEdBQXNCO01BQ3RCLElBQUcsV0FBVyxDQUFDLE1BQVosQ0FBbUIsQ0FBQSxHQUFFLEtBQXJCLEVBQTJCLENBQTNCLENBQUEsS0FBaUMsR0FBcEM7UUFDSSxRQUFRLENBQUMsU0FBUyxDQUFDLEdBQW5CLENBQXVCLEdBQUcsQ0FBQyxRQUFKLENBQWEsV0FBYixFQUEwQiwwQkFBMUIsQ0FBdkI7cUJBQ0EsU0FBUyxDQUFDLFNBQVYsR0FBc0IsS0FGMUI7T0FBQSxNQUFBOzZCQUFBOztBQTNDSjs7RUFSZSIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuXG5UaGUgQ2VsbHVsYXIgQXV0b21hdGEgR2VuZXJhdG9yIGZvciBXb2xmQ2FnZS5cblxuQGF1dGhvciBEZXN0aW4gTW91bHRvblxuQGdpdCBodHRwczovL2dpdGh1Yi5jb20vZGVzdGlubW91bHRvbi93b2xmY2FnZVxuQGxpY2Vuc2UgTUlUXG5cbkNvbXBvbmVudCBvZiB0aGUgV29sZnJhbSBDZWxsdWxhciBBdXRvbWF0YSBHZW5lcmF0b3IgKFdvbGZDYWdlKVxuXG5GdW5jdGlvbmFsaXR5IGZvciBidWlsZGluZyB0aGUgZ2VuZXJhdG9yIGZvclxuY29udHJvbGxpbmcgdGhlIGNlbGx1bGFyIGF1dG9tYXRhIGdlbmVyYXRpb24uXG5cbi0gRGlzcGxheSBhIHByZXZpZXcgb2YgdGhlIHJ1bGVzLlxuLSBEaXNwbGF5IHRoZSBnZW5lcmF0ZWQgYm9hcmQuXG5cbiMjI1xuY2xhc3MgR2VuZXJhdG9yXG5cbiAgICAjXG4gICAgIyBHZW5lcmF0b3IgQ29uc3RydWN0b3JcbiAgICAjIEluaXRpYWxpemUgdGhlIElEcywgbG9jYWwgalF1ZXJ5IG9iamVjdHMsIGFuZCBzaXplc1xuICAgICMgZm9yIHRoZSBHZW5lcmF0b3IuXG4gICAgIyBcbiAgICBjb25zdHJ1Y3RvcjooQlVTKSAtPlxuICAgICAgICBAQlVTID0gQlVTXG5cbiAgICAgICAgQF9jdXJyZW50UnVsZSA9IDBcbiAgICAgICAgQF9wcmV2aWV3Qm94V2lkdGggPSA0MFxuICAgICAgICBAX25vQm9hcmRDb2x1bW5zID0gMTUxXG4gICAgICAgIEBfbm9Cb2FyZFJvd3MgPSA3NVxuXG4gICAgICAgIEBfcnVsZUxpc3QgPSBbXVxuXG4gICAgICAgIEBCVVMuc2V0KCdjdXJyZW50cnVsZWRlY2ltYWwnLCBAX2N1cnJlbnRSdWxlKVxuXG4gICAgICAgIEBCVVMuc3Vic2NyaWJlKCdnZW5lcmF0b3IucnVuJyxcbiAgICAgICAgICAgICgpPT5cbiAgICAgICAgICAgICAgICBAcnVuKClcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgKVxuXG4gICAgI1xuICAgICMgU2hvdyB0aGUgR2VuZXJhdG9yXG4gICAgIyBcbiAgICBydW46KCkgLT5cbiAgICAgICAgZ2VuZXJhdG9yVGVtcGxhdGVIVE1MID0gRE9NLmVsZW1CeUlkKCdHRU5FUkFUT1InLCAnVEVNUExBVEVfTUFJTl9DT05UQUlORVInKS5pbm5lckhUTUxcbiAgICAgICAgd29sZmNhZ2VNYWluRWxlbSA9IERPTS5lbGVtQnlJZCgnV09MRkNBR0UnLCAnTUFJTl9DT05UQUlORVInKVxuICAgICAgICB3b2xmY2FnZU1haW5FbGVtLmlubmVySFRNTCA9IE11c3RhY2hlLnJlbmRlcihnZW5lcmF0b3JUZW1wbGF0ZUhUTUwse30pXG5cbiAgICAgICAgIyBCdWlsZCBhIG5ldyBCb2FyZFxuICAgICAgICBAX0JvYXJkID0gbmV3IEJvYXJkKEBCVVMpXG4gICAgICAgIFxuICAgICAgICBAX3NldHVwUnVsZURyb3Bkb3duKClcblxuICAgICAgICBAX2lzQ29sb3JQaWNrZXJFbmFibGVkID0gZmFsc2VcbiAgICAgICAgRE9NLmVsZW1CeUlkKCdHRU5FUkFUT1InLCdDT0xPUlBJQ0tFUl9CVVRUT04nKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsXG4gICAgICAgICAgICAoKT0+XG4gICAgICAgICAgICAgICAgaWYgQF9pc0NvbG9yUGlja2VyRW5hYmxlZFxuICAgICAgICAgICAgICAgICAgICBAX2Rpc2FibGVDb2xvclBpY2tlcigpXG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBAX2VuYWJsZUNvbG9yUGlja2VyKClcbiAgICAgICAgKVxuXG4gICAgICAgICMgRmluYWwgc3RlcCBpcyB0byBidWlsZCB0aGUgYm9hcmRcbiAgICAgICAgQF9idWlsZEJvYXJkKClcblxuICAgICAgICByZXR1cm4gdHJ1ZVxuXG5cbiAgICAjXG4gICAgIyBFbmFibGUgdGhlIGNvbG9yIHBpY2tlclxuICAgICMgXG4gICAgX2VuYWJsZUNvbG9yUGlja2VyOigpIC0+XG4gICAgICAgIGNvbG9ycGlja2VyVGVtcGxhdGVIVE1MID0gRE9NLmVsZW1CeUlkKCdHRU5FUkFUT1InLCAnVEVNUExBVEVfQ09MT1JQSUNLRVInKS5pbm5lckhUTUxcbiAgICAgICAgY29sb3JQaWNrZXJFbGVtID0gRE9NLmVsZW1CeUlkKCdHRU5FUkFUT1InLCAnQ09MT1JQSUNLRVJfQ09OVEFJTkVSJylcbiAgICAgICAgY29sb3JQaWNrZXJFbGVtLmlubmVySFRNTCA9IE11c3RhY2hlLnJlbmRlcihjb2xvcnBpY2tlclRlbXBsYXRlSFRNTCx7fSlcbiAgICAgICAgY29sb3JQaWNrZXJFbGVtLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCJcblxuICAgICAgICBAX2lzQ29sb3JQaWNrZXJFbmFibGVkID0gdHJ1ZVxuICAgICAgICBjcEFjdGl2ZSA9IENvbG9yUGlja2VyKERPTS5lbGVtQnlJZCgnR0VORVJBVE9SJywnQ09MT1JQSUNLRVJfQUNUSVZFJyksIFxuICAgICAgICAgICAgKGhleCk9PlxuICAgICAgICAgICAgICAgIEBCVVMuYnJvYWRjYXN0KCdjaGFuZ2UuY2VsbC5zdHlsZS5hY3RpdmViYWNrZ3JvdW5kJywgaGV4KVxuICAgICAgICApXG4gICAgICAgIGNwQWN0aXZlLnNldEhleChAQlVTLmdldCgnYm9hcmQuY2VsbC5zdHlsZS5hY3RpdmVCYWNrZ3JvdW5kQ29sb3InKSlcblxuICAgICAgICBjcEJvcmRlciA9IENvbG9yUGlja2VyKERPTS5lbGVtQnlJZCgnR0VORVJBVE9SJywnQ09MT1JQSUNLRVJfQk9SREVSJyksIFxuICAgICAgICAgICAgKGhleCk9PlxuICAgICAgICAgICAgICAgIEBCVVMuYnJvYWRjYXN0KCdjaGFuZ2UuY2VsbC5zdHlsZS5ib3JkZXJjb2xvcicsIGhleClcbiAgICAgICAgKVxuICAgICAgICBjcEJvcmRlci5zZXRIZXgoQEJVUy5nZXQoJ2JvYXJkLmNlbGwuc3R5bGUuYm9yZGVyQ29sb3InKSlcblxuICAgICAgICBjcEluQWN0aXZlID0gQ29sb3JQaWNrZXIoRE9NLmVsZW1CeUlkKCdHRU5FUkFUT1InLCdDT0xPUlBJQ0tFUl9JTkFDVElWRScpLCBcbiAgICAgICAgICAgIChoZXgpPT5cbiAgICAgICAgICAgICAgICBAQlVTLmJyb2FkY2FzdCgnY2hhbmdlLmNlbGwuc3R5bGUuaW5hY3RpdmViYWNrZ3JvdW5kJywgaGV4KVxuICAgICAgICApXG4gICAgICAgIGNwSW5BY3RpdmUuc2V0SGV4KEBCVVMuZ2V0KCdib2FyZC5jZWxsLnN0eWxlLmluYWN0aXZlQmFja2dyb3VuZENvbG9yJykpXG5cblxuICAgICNcbiAgICAjIERpc2FibGUgdGhlIGNvbG9yIHBpY2tlclxuICAgICNcbiAgICBfZGlzYWJsZUNvbG9yUGlja2VyOigpIC0+XG4gICAgICAgIEBfaXNDb2xvclBpY2tlckVuYWJsZWQgPSBmYWxzZVxuICAgICAgICBjb250YWluZXJFbGVtID0gRE9NLmVsZW1CeUlkKCdHRU5FUkFUT1InLCdDT0xPUlBJQ0tFUl9DT05UQUlORVInKVxuICAgICAgICBjb250YWluZXJFbGVtLmlubmVySFRNTCA9IFwiXCJcbiAgICAgICAgY29udGFpbmVyRWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCJcblxuICAgICNcbiAgICAjIFNldHVwIHRoZSBydWxlIHNlbGVjdG9yIGRyb3Bkb3duXG4gICAgI1xuICAgIF9zZXR1cFJ1bGVEcm9wZG93bjooKSAtPlxuICAgICAgICBkcm9wZG93bkVsZW0gPSBET00uZWxlbUJ5SWQoJ0dFTkVSQVRPUicsJ1JVTEVfRFJPUERPV04nKVxuICAgICAgICBcbiAgICAgICAgIyBHZW5lcmF0ZSB0aGUgcnVsZSBkcm9wZG93biBvcHRpb25zXG4gICAgICAgIG9wdGlvbnNIVE1MID0gXCJcIlxuICAgICAgICBmb3IgcnVsZSBpbiBbMC4uMjU1XVxuICAgICAgICAgICAgb3B0aW9uc0hUTUwgKz0gXCI8b3B0aW9uIHZhbHVlPScje3J1bGV9Jz4je3J1bGV9PC9vcHRpb24+XCJcbiAgICAgICAgICAgIFxuICAgICAgICBkcm9wZG93bkVsZW0uaW5uZXJIVE1MID0gb3B0aW9uc0hUTUxcblxuICAgICAgICAjIENoYW5nZSB0aGUgY3VycmVudCBydWxlIGZyb20gdGhlIGRyb3Bkb3duXG4gICAgICAgIGRyb3Bkb3duRWxlbS52YWx1ZSA9IEBCVVMuZ2V0KCdjdXJyZW50cnVsZWRlY2ltYWwnKVxuXG4gICAgICAgICMgU2V0dXAgdGhlIGNoYW5nZSBydWxlIGV2ZW50XG4gICAgICAgIGRyb3Bkb3duRWxlbS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBcbiAgICAgICAgICAgIChldmVudCk9PlxuICAgICAgICAgICAgICAgIEBCVVMuc2V0KCdjdXJyZW50cnVsZWRlY2ltYWwnLCBldmVudC50YXJnZXQudmFsdWUpXG4gICAgICAgIClcblxuICAgICAgICAjIFNldHVwIHRoZSBHZW5lcmF0ZSBidXR0b24gY2xpY2sgZXZlbnRcbiAgICAgICAgRE9NLmVsZW1CeUlkKCdHRU5FUkFUT1InLCAnUlVMRV9HRU5FUkFURV9CVVRUT04nKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsXG4gICAgICAgICAgICAoKT0+QF9idWlsZEJvYXJkKClcbiAgICAgICAgKVxuXG4gICAgI1xuICAgICMgQnVpbGQgdGhlIHByZXZpZXcgYm9hcmQgZnJvbSB0aGUgdGVtcGxhdGVcbiAgICAjIFxuICAgIF9idWlsZEJvYXJkOigpIC0+XG4gICAgICAgIGNlbGxCb2FyZEh0bWwgPSBET00uZWxlbUJ5SWQoJ0dFTkVSQVRPUicsJ1RFTVBMQVRFX0JPQVJEJykuaW5uZXJIVE1MXG4gICAgICAgIFxuICAgICAgICBET00uZWxlbUJ5SWQoJ0dFTkVSQVRPUicsJ0NPTlRFTlRfQ09OVEFJTkVSJykuaW5uZXJIVE1MID0gTXVzdGFjaGUucmVuZGVyKGNlbGxCb2FyZEh0bWwse30pXG5cbiAgICAgICAgQF9ydWxlc0NvbnRhaW5lckVsZW0gPSBET00uZWxlbUJ5SWQoJ0dFTkVSQVRPUicsJ1JVTEVfUFJFVklFV19DT05UQUlORVInKVxuICAgICAgICBcbiAgICAgICAgYmluYXJ5ID0gQEJVUy5nZXQoJ3RvcHJvd2JpbmFyeScpXG5cbiAgICAgICAgQF9Cb2FyZC5idWlsZEJvYXJkKGJpbmFyeSwgQF9ub0JvYXJkQ29sdW1ucywgQF9ub0JvYXJkUm93cylcbiAgICAgICAgQF9idWlsZFJ1bGVQcmV2aWV3KClcbiAgICAgICAgcmV0dXJuIHRydWVcblxuICAgICNcbiAgICAjIEJ1aWxkIHRoZSBSdWxlIFByZXZpZXdcbiAgICAjIFxuICAgIF9idWlsZFJ1bGVQcmV2aWV3OiAtPlxuICAgICAgICBjdXJyZW50UnVsZSA9IEBCVVMuZ2V0KCdydWxlYmluYXJ5c3RpbmcnKVxuXG4gICAgICAgICMgVXNlIHRoZSB0ZW1wbGF0ZSB0byBnZW5lcmF0ZSB0aGUgcHJldmlld1xuICAgICAgICBwcmV2aWV3Q2VsbEh0bWwgPSBET00uZWxlbUJ5SWQoJ0dFTkVSQVRPUicsJ1RFTVBMQVRFX1JVTEVfUFJFVklFV19DRUxMJykuaW5uZXJIVE1MXG5cbiAgICAgICAgYWN0aXZlQ2xhc3MgPSBcbiAgICAgICAgQF9ydWxlc0NvbnRhaW5lckVsZW0uaW5uZXJIVE1MID0gXCJcIlxuICAgICAgICBmb3IgaW5kZXggaW4gWzcuLjBdXG4gICAgICAgICAgICAjIEdldCB0aGUgYmluYXJ5IHJlcHJlc2VudGF0aW9uIG9mIHRoZSBpbmRleFxuICAgICAgICAgICAgYmluYXJ5ID0gaW5kZXgudG9TdHJpbmcoMilcblxuICAgICAgICAgICAgIyBQYWQgdGhlIGJpbmFyeSB0byAzIGJpdHNcbiAgICAgICAgICAgIGlmIGJpbmFyeS5sZW5ndGggaXMgMlxuICAgICAgICAgICAgICAgIGJpbmFyeSA9IFwiMCN7YmluYXJ5fVwiXG4gICAgICAgICAgICBlbHNlIGlmIGJpbmFyeS5sZW5ndGggaXMgMVxuICAgICAgICAgICAgICAgIGJpbmFyeSA9IFwiMDAje2JpbmFyeX1cIlxuXG4gICAgICAgICAgICAjIENvbnZlcnQgdGhlIGJpbmFyeSB0byB1c2FibGUgYm9vbGVhbiB2YWx1ZXMgZm9yIHRlbXBsYXRlXG4gICAgICAgICAgICBsZWZ0Qml0ID0gZmFsc2VcbiAgICAgICAgICAgIG1pZGRsZUJpdCA9IGZhbHNlXG4gICAgICAgICAgICByaWdodEJpdCA9IGZhbHNlXG5cbiAgICAgICAgICAgIGlmIGJpbmFyeS5jaGFyQXQoMCkgaXMgXCIxXCJcbiAgICAgICAgICAgICAgICBsZWZ0Qml0ID0gdHJ1ZVxuXG4gICAgICAgICAgICBpZiBiaW5hcnkuY2hhckF0KDEpIGlzIFwiMVwiXG4gICAgICAgICAgICAgICAgbWlkZGxlQml0ID0gdHJ1ZVxuXG4gICAgICAgICAgICBpZiBiaW5hcnkuY2hhckF0KDIpIGlzIFwiMVwiXG4gICAgICAgICAgICAgICAgcmlnaHRCaXQgPSB0cnVlXG5cbiAgICAgICAgICAgIGxlZnQgPSAoNy1pbmRleCkqQF9wcmV2aWV3Qm94V2lkdGhcblxuICAgICAgICAgICAgIyBUaGUgdGVtcGxhdGUgb3B0aW9ucyBmb3IgTXVzdGFjaGUgdG8gcmVuZGVyXG4gICAgICAgICAgICB0bXBsT3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICBsZWZ0OmxlZnQsXG4gICAgICAgICAgICAgICAgcHJldmlld0luZGV4OmluZGV4LFxuICAgICAgICAgICAgICAgIGxlZnRCaXRBY3RpdmU6bGVmdEJpdCxcbiAgICAgICAgICAgICAgICBtaWRkbGVCaXRBY3RpdmU6bWlkZGxlQml0LFxuICAgICAgICAgICAgICAgIHJpZ2h0Qml0QWN0aXZlOnJpZ2h0Qml0XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJlbmRlcmVkID0gTXVzdGFjaGUucmVuZGVyKHByZXZpZXdDZWxsSHRtbCwgdG1wbE9wdGlvbnMpXG4gICAgICAgICAgICBAX3J1bGVzQ29udGFpbmVyRWxlbS5pbm5lckhUTUwgKz0gcmVuZGVyZWRcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgalRtcENlbGwgPSBET00uZWxlbUJ5UHJlZml4KCdHRU5FUkFUT1InLCAnUlVMRV9QUkVWSUVXX0NFTEwnLGluZGV4KVxuICAgICAgICAgICAgalRtcERpZ2l0ID0gRE9NLmVsZW1CeVByZWZpeCgnR0VORVJBVE9SJywgJ1JVTEVfUFJFVklFV19ESUdJVCcsaW5kZXgpXG5cbiAgICAgICAgICAgIGpUbXBDZWxsLmNsYXNzTGlzdC5yZW1vdmUoRE9NLmdldENsYXNzKCdHRU5FUkFUT1InLCAnUlVMRV9QUkVWSUVXX0NFTExfQUNUSVZFJykpXG4gICAgICAgICAgICBqVG1wRGlnaXQuaW5uZXJIVE1MID0gXCIwXCJcbiAgICAgICAgICAgIGlmIGN1cnJlbnRSdWxlLnN1YnN0cig3LWluZGV4LDEpIGlzIFwiMVwiXG4gICAgICAgICAgICAgICAgalRtcENlbGwuY2xhc3NMaXN0LmFkZChET00uZ2V0Q2xhc3MoJ0dFTkVSQVRPUicsICdSVUxFX1BSRVZJRVdfQ0VMTF9BQ1RJVkUnKSlcbiAgICAgICAgICAgICAgICBqVG1wRGlnaXQuaW5uZXJIVE1MID0gXCIxXCJcbiJdfQ==


/*

Rule Matcher for WolfCage.

@author Destin Moulton
@git https://github.com/destinmoulton/wolfcage
@license MIT

Component of the Wolfram Cellular Automata Generator (WolfCage).

The rule is a binary string. Each 1 in the binary string
represents a rule to-be-followed in the next row of
generated blocks.

There are 255 rules of 8 block positions.

Rule 0 Example:
111 110 101 100 011 010 001 000
 0   0   0   0   0   0   0   0

Rule 20 Example:
111 110 101 100 011 010 001 000
 0   0   1   0   1   0   0   0

Rule 255 Example:
111 110 101 100 011 010 001 000
 1   1   1   1   1   1   1   1

The position of filled cells on the top row determines
the composition of the next row and so on.
 */
var RuleMatcher;

RuleMatcher = (function() {
  function RuleMatcher(BUS) {
    this.BUS = BUS;
    this._binaryRule = "";
    this._patterns = ['111', '110', '101', '100', '011', '010', '001', '000'];
    this.BUS.set('rulebinarysting', this._binaryRule);
  }

  RuleMatcher.prototype.setCurrentRule = function(decimalRule) {
    return this._binaryRule = this._decToBinary(decimalRule);
  };

  RuleMatcher.prototype.match = function(zeroIndex, oneIndex, twoIndex) {
    var foundPatternIndex, patternToFind;
    patternToFind = "" + zeroIndex + oneIndex + twoIndex;
    foundPatternIndex = this._patterns.indexOf(patternToFind);
    return parseInt(this._binaryRule.substr(foundPatternIndex, 1));
  };

  RuleMatcher.prototype._decToBinary = function(decValue) {
    var binary, i, length, num, ref;
    binary = (parseInt(decValue)).toString(2);
    length = binary.length;
    if (length < 8) {
      for (num = i = ref = length; ref <= 7 ? i <= 7 : i >= 7; num = ref <= 7 ? ++i : --i) {
        binary = "0" + binary;
      }
    }
    return binary;
  };

  return RuleMatcher;

})();

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUnVsZU1hdGNoZXIuanMiLCJzb3VyY2VzIjpbIlJ1bGVNYXRjaGVyLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFBOztBQWlDTTtFQU1XLHFCQUFDLEdBQUQ7SUFDVCxJQUFDLENBQUEsR0FBRCxHQUFPO0lBQ1AsSUFBQyxDQUFBLFdBQUQsR0FBZTtJQUNmLElBQUMsQ0FBQSxTQUFELEdBQWEsQ0FDVCxLQURTLEVBRVQsS0FGUyxFQUdULEtBSFMsRUFJVCxLQUpTLEVBS1QsS0FMUyxFQU1ULEtBTlMsRUFPVCxLQVBTLEVBUVQsS0FSUztJQVdiLElBQUMsQ0FBQSxHQUFHLENBQUMsR0FBTCxDQUFTLGlCQUFULEVBQTRCLElBQUMsQ0FBQSxXQUE3QjtFQWRTOzt3QkFtQmIsY0FBQSxHQUFnQixTQUFDLFdBQUQ7V0FJWixJQUFDLENBQUEsV0FBRCxHQUFlLElBQUMsQ0FBQSxZQUFELENBQWMsV0FBZDtFQUpIOzt3QkFTaEIsS0FBQSxHQUFPLFNBQUMsU0FBRCxFQUFZLFFBQVosRUFBc0IsUUFBdEI7QUFFSCxRQUFBO0lBQUEsYUFBQSxHQUFnQixFQUFBLEdBQUcsU0FBSCxHQUFlLFFBQWYsR0FBMEI7SUFFMUMsaUJBQUEsR0FBb0IsSUFBQyxDQUFBLFNBQVMsQ0FBQyxPQUFYLENBQW1CLGFBQW5CO0FBR3BCLFdBQU8sUUFBQSxDQUFTLElBQUMsQ0FBQSxXQUFXLENBQUMsTUFBYixDQUFvQixpQkFBcEIsRUFBc0MsQ0FBdEMsQ0FBVDtFQVBKOzt3QkFjUCxZQUFBLEdBQWMsU0FBQyxRQUFEO0FBRVYsUUFBQTtJQUFBLE1BQUEsR0FBUyxDQUFDLFFBQUEsQ0FBUyxRQUFULENBQUQsQ0FBb0IsQ0FBQyxRQUFyQixDQUE4QixDQUE5QjtJQUNULE1BQUEsR0FBUyxNQUFNLENBQUM7SUFFaEIsSUFBRyxNQUFBLEdBQVMsQ0FBWjtBQUVJLFdBQVcsOEVBQVg7UUFDSSxNQUFBLEdBQVMsR0FBQSxHQUFJO0FBRGpCLE9BRko7O0FBS0EsV0FBTztFQVZHIiwic291cmNlc0NvbnRlbnQiOlsiIyMjXG5cblJ1bGUgTWF0Y2hlciBmb3IgV29sZkNhZ2UuXG5cbkBhdXRob3IgRGVzdGluIE1vdWx0b25cbkBnaXQgaHR0cHM6Ly9naXRodWIuY29tL2Rlc3Rpbm1vdWx0b24vd29sZmNhZ2VcbkBsaWNlbnNlIE1JVFxuXG5Db21wb25lbnQgb2YgdGhlIFdvbGZyYW0gQ2VsbHVsYXIgQXV0b21hdGEgR2VuZXJhdG9yIChXb2xmQ2FnZSkuXG5cblRoZSBydWxlIGlzIGEgYmluYXJ5IHN0cmluZy4gRWFjaCAxIGluIHRoZSBiaW5hcnkgc3RyaW5nXG5yZXByZXNlbnRzIGEgcnVsZSB0by1iZS1mb2xsb3dlZCBpbiB0aGUgbmV4dCByb3cgb2ZcbmdlbmVyYXRlZCBibG9ja3MuXG5cblRoZXJlIGFyZSAyNTUgcnVsZXMgb2YgOCBibG9jayBwb3NpdGlvbnMuXG5cblJ1bGUgMCBFeGFtcGxlOlxuMTExIDExMCAxMDEgMTAwIDAxMSAwMTAgMDAxIDAwMFxuIDAgICAwICAgMCAgIDAgICAwICAgMCAgIDAgICAwXG5cblJ1bGUgMjAgRXhhbXBsZTpcbjExMSAxMTAgMTAxIDEwMCAwMTEgMDEwIDAwMSAwMDBcbiAwICAgMCAgIDEgICAwICAgMSAgIDAgICAwICAgMFxuXG5SdWxlIDI1NSBFeGFtcGxlOlxuMTExIDExMCAxMDEgMTAwIDAxMSAwMTAgMDAxIDAwMFxuIDEgICAxICAgMSAgIDEgICAxICAgMSAgIDEgICAxXG5cblRoZSBwb3NpdGlvbiBvZiBmaWxsZWQgY2VsbHMgb24gdGhlIHRvcCByb3cgZGV0ZXJtaW5lc1xudGhlIGNvbXBvc2l0aW9uIG9mIHRoZSBuZXh0IHJvdyBhbmQgc28gb24uXG5cbiMjI1xuXG5jbGFzcyBSdWxlTWF0Y2hlclxuICAgIFxuICAgICNcbiAgICAjIFNldHVwIHRoZSBsb2NhbCB2YXJpYWJsZXNcbiAgICAjIEBjb25zdHJ1Y3RvclxuICAgICMgXG4gICAgY29uc3RydWN0b3I6IChCVVMpLT5cbiAgICAgICAgQEJVUyA9IEJVU1xuICAgICAgICBAX2JpbmFyeVJ1bGUgPSBcIlwiXG4gICAgICAgIEBfcGF0dGVybnMgPSBbXG4gICAgICAgICAgICAnMTExJyxcbiAgICAgICAgICAgICcxMTAnLFxuICAgICAgICAgICAgJzEwMScsXG4gICAgICAgICAgICAnMTAwJyxcbiAgICAgICAgICAgICcwMTEnLFxuICAgICAgICAgICAgJzAxMCcsXG4gICAgICAgICAgICAnMDAxJyxcbiAgICAgICAgICAgICcwMDAnXG4gICAgICAgIF1cblxuICAgICAgICBAQlVTLnNldCgncnVsZWJpbmFyeXN0aW5nJywgQF9iaW5hcnlSdWxlKVxuXG4gICAgI1xuICAgICMgU2V0IHRoZSBjdXJyZW50IHJ1bGUgZnJvbSBhIGRlY2ltYWwgdmFsdWVcbiAgICAjIFxuICAgIHNldEN1cnJlbnRSdWxlOiAoZGVjaW1hbFJ1bGUpLT5cbiAgICAgICAgIyBUaGUgYmluYXJ5IHJ1bGUgY29udGFpbnMgdGhlIHNlcXVlbmNlIG9mXG4gICAgICAgICMgMCdzIChubyBibG9jaykgYW5kIDEncyAoYmxvY2spIGZvciB0aGVcbiAgICAgICAgIyBuZXh0IHJvdy5cbiAgICAgICAgQF9iaW5hcnlSdWxlID0gQF9kZWNUb0JpbmFyeShkZWNpbWFsUnVsZSlcblxuICAgICNcbiAgICAjIE1hdGNoIGEgcGF0dGVybiBmb3IgdGhlIHRocmVlIGJpdCBwb3NpdGlvbnNcbiAgICAjIFxuICAgIG1hdGNoOiAoemVyb0luZGV4LCBvbmVJbmRleCwgdHdvSW5kZXgpLT5cbiAgICAgICAgIyBNYXRjaCB0aHJlZSBjZWxscyB3aXRoaW5cbiAgICAgICAgcGF0dGVyblRvRmluZCA9IFwiI3t6ZXJvSW5kZXh9I3tvbmVJbmRleH0je3R3b0luZGV4fVwiXG5cbiAgICAgICAgZm91bmRQYXR0ZXJuSW5kZXggPSBAX3BhdHRlcm5zLmluZGV4T2YocGF0dGVyblRvRmluZClcblxuICAgICAgICAjIFJldHVybiB0aGUgYmluYXJ5IHJ1bGUncyAwIG9yIDEgbWFwcGluZ1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQoQF9iaW5hcnlSdWxlLnN1YnN0cihmb3VuZFBhdHRlcm5JbmRleCwxKSlcblxuICAgICNcbiAgICAjIENvbnZlcnQgYSBkZWNpbWFsIHZhbHVlIHRvIGl0cyBiaW5hcnkgcmVwcmVzZW50YXRpb25cbiAgICAjXG4gICAgIyBAcmV0dXJuIHN0cmluZyBCaW5hcnkgcnVsZVxuICAgICMgXG4gICAgX2RlY1RvQmluYXJ5OiAoZGVjVmFsdWUpLT5cbiAgICAgICAgIyBHZW5lcmF0ZSB0aGUgYmluYXJ5IHN0cmluZyBmcm9tIHRoZSBkZWNpbWFsXG4gICAgICAgIGJpbmFyeSA9IChwYXJzZUludChkZWNWYWx1ZSkpLnRvU3RyaW5nKDIpXG4gICAgICAgIGxlbmd0aCA9IGJpbmFyeS5sZW5ndGhcblxuICAgICAgICBpZiBsZW5ndGggPCA4XG4gICAgICAgICAgICAjIFBhZCB0aGUgYmluYXJ5IHJlcHJlc2VuYXRpb24gd2l0aCBsZWFkaW5nIDAnc1xuICAgICAgICAgICAgZm9yIG51bSBpbiBbbGVuZ3RoLi43XVxuICAgICAgICAgICAgICAgIGJpbmFyeSA9IFwiMCN7YmluYXJ5fVwiXG4gICAgICAgICAgICAgICAgXG4gICAgICAgIHJldHVybiBiaW5hcnlcbiJdfQ==


/*

Generate the Rule Thumbnail List for WolfCage.

@author Destin Moulton
@git https://github.com/destinmoulton/wolfcage
@license MIT

Component of the Wolfram Cellular Automata Generator (WolfCage)

The thumbnail for each rule is presented. 
Event handlers are added to each thumbnail for generating
the automata cells for that rule.
 */
var Thumbnails;

Thumbnails = (function() {
  function Thumbnails(BUS) {
    this.BUS = BUS;
    this.BUS.subscribe('thumbnails.run', (function(_this) {
      return function() {
        _this.run();
      };
    })(this));
  }

  Thumbnails.prototype.run = function() {
    var i, j, k, ref, rendered, results, results1, ruleList, template_options, thumbnailHTML, thumbsElems;
    ruleList = (function() {
      results = [];
      for (j = 0; j <= 255; j++){ results.push(j); }
      return results;
    }).apply(this);
    template_options = {
      ruleList: ruleList,
      path: this.BUS.get('thumbnails.path')
    };
    thumbnailHTML = DOM.elemById('THUMBNAILS', 'TEMPLATE_THUMBNAILS').innerHTML;
    rendered = Mustache.render(thumbnailHTML, template_options);
    DOM.elemById('WOLFCAGE', 'MAIN_CONTAINER').innerHTML = rendered;
    thumbsElems = document.querySelectorAll('.' + DOM.getClass('THUMBNAILS', 'THUMB_BOX'));
    results1 = [];
    for (i = k = 0, ref = thumbsElems.length - 1; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
      results1.push(thumbsElems[i].addEventListener('click', (function(_this) {
        return function(event) {
          return _this._ruleThumbClicked(event);
        };
      })(this)));
    }
    return results1;
  };

  Thumbnails.prototype._ruleThumbClicked = function(event) {
    var rule;
    rule = event.target.getAttribute('data-rule');
    this.BUS.set('currentruledecimal', rule);
    return this.BUS.broadcast('tabs.show.generator');
  };

  return Thumbnails;

})();

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGh1bWJuYWlscy5qcyIsInNvdXJjZXMiOlsiVGh1bWJuYWlscy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7OztBQUFBLElBQUE7O0FBZ0JNO0VBS1csb0JBQUMsR0FBRDtJQUNULElBQUMsQ0FBQSxHQUFELEdBQU87SUFDUCxJQUFDLENBQUEsR0FBRyxDQUFDLFNBQUwsQ0FBZSxnQkFBZixFQUNJLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQTtRQUNJLEtBQUMsQ0FBQSxHQUFELENBQUE7TUFESjtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FESjtFQUZTOzt1QkFXYixHQUFBLEdBQUssU0FBQTtBQUVELFFBQUE7SUFBQSxRQUFBLEdBQVc7Ozs7O0lBRVgsZ0JBQUEsR0FBbUI7TUFDZixRQUFBLEVBQVMsUUFETTtNQUVmLElBQUEsRUFBSyxJQUFDLENBQUEsR0FBRyxDQUFDLEdBQUwsQ0FBUyxpQkFBVCxDQUZVOztJQU1uQixhQUFBLEdBQWdCLEdBQUcsQ0FBQyxRQUFKLENBQWEsWUFBYixFQUEyQixxQkFBM0IsQ0FBaUQsQ0FBQztJQUNsRSxRQUFBLEdBQVcsUUFBUSxDQUFDLE1BQVQsQ0FBZ0IsYUFBaEIsRUFBK0IsZ0JBQS9CO0lBRVgsR0FBRyxDQUFDLFFBQUosQ0FBYSxVQUFiLEVBQXlCLGdCQUF6QixDQUEwQyxDQUFDLFNBQTNDLEdBQXVEO0lBRXZELFdBQUEsR0FBYyxRQUFRLENBQUMsZ0JBQVQsQ0FBMEIsR0FBQSxHQUFNLEdBQUcsQ0FBQyxRQUFKLENBQWEsWUFBYixFQUEyQixXQUEzQixDQUFoQztBQUVkO1NBQVMsaUdBQVQ7b0JBQ0ksV0FBWSxDQUFBLENBQUEsQ0FBRSxDQUFDLGdCQUFmLENBQWdDLE9BQWhDLEVBQXlDLENBQUEsU0FBQSxLQUFBO2VBQUEsU0FBQyxLQUFEO2lCQUFTLEtBQUMsQ0FBQSxpQkFBRCxDQUFtQixLQUFuQjtRQUFUO01BQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUF6QztBQURKOztFQWpCQzs7dUJBd0JMLGlCQUFBLEdBQWtCLFNBQUMsS0FBRDtBQUNkLFFBQUE7SUFBQSxJQUFBLEdBQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxZQUFiLENBQTBCLFdBQTFCO0lBR1AsSUFBQyxDQUFBLEdBQUcsQ0FBQyxHQUFMLENBQVMsb0JBQVQsRUFBK0IsSUFBL0I7V0FHQSxJQUFDLENBQUEsR0FBRyxDQUFDLFNBQUwsQ0FBZSxxQkFBZjtFQVBjIiwic291cmNlc0NvbnRlbnQiOlsiIyMjXG5cbkdlbmVyYXRlIHRoZSBSdWxlIFRodW1ibmFpbCBMaXN0IGZvciBXb2xmQ2FnZS5cblxuQGF1dGhvciBEZXN0aW4gTW91bHRvblxuQGdpdCBodHRwczovL2dpdGh1Yi5jb20vZGVzdGlubW91bHRvbi93b2xmY2FnZVxuQGxpY2Vuc2UgTUlUXG5cbkNvbXBvbmVudCBvZiB0aGUgV29sZnJhbSBDZWxsdWxhciBBdXRvbWF0YSBHZW5lcmF0b3IgKFdvbGZDYWdlKVxuXG5UaGUgdGh1bWJuYWlsIGZvciBlYWNoIHJ1bGUgaXMgcHJlc2VudGVkLiBcbkV2ZW50IGhhbmRsZXJzIGFyZSBhZGRlZCB0byBlYWNoIHRodW1ibmFpbCBmb3IgZ2VuZXJhdGluZ1xudGhlIGF1dG9tYXRhIGNlbGxzIGZvciB0aGF0IHJ1bGUuXG5cbiMjI1xuXG5jbGFzcyBUaHVtYm5haWxzXG5cbiAgICAjXG4gICAgIyBTZXR1cCB0aGUgbG9jYWwgdmFyaWFibGVzXG4gICAgIyBcbiAgICBjb25zdHJ1Y3RvcjogKEJVUyktPlxuICAgICAgICBAQlVTID0gQlVTXG4gICAgICAgIEBCVVMuc3Vic2NyaWJlKCd0aHVtYm5haWxzLnJ1bicsXG4gICAgICAgICAgICAoKT0+XG4gICAgICAgICAgICAgICAgQHJ1bigpXG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIClcblxuICAgICNcbiAgICAjIFNob3cgdGhlIHJ1bGUgdGh1bWJuYWlsc1xuICAgICMgXG4gICAgcnVuOiAoKS0+XG4gICAgICAgICMgU2V0dXAgdGhlIGxpc3Qgb2YgcnVsZXNcbiAgICAgICAgcnVsZUxpc3QgPSBbMC4uMjU1XVxuXG4gICAgICAgIHRlbXBsYXRlX29wdGlvbnMgPSB7XG4gICAgICAgICAgICBydWxlTGlzdDpydWxlTGlzdCxcbiAgICAgICAgICAgIHBhdGg6QEJVUy5nZXQoJ3RodW1ibmFpbHMucGF0aCcpXG4gICAgICAgIH1cblxuICAgICAgICAjIENsZWFyIHRoZSBjdXJyZW50IHRodW1ibmFpbHMgYW5kIHBvcHVsYXRlIGl0IHZpYSBNdXN0YWNoZSB0ZW1wbGF0ZVxuICAgICAgICB0aHVtYm5haWxIVE1MID0gRE9NLmVsZW1CeUlkKCdUSFVNQk5BSUxTJywgJ1RFTVBMQVRFX1RIVU1CTkFJTFMnKS5pbm5lckhUTUxcbiAgICAgICAgcmVuZGVyZWQgPSBNdXN0YWNoZS5yZW5kZXIodGh1bWJuYWlsSFRNTCwgdGVtcGxhdGVfb3B0aW9ucylcblxuICAgICAgICBET00uZWxlbUJ5SWQoJ1dPTEZDQUdFJywgJ01BSU5fQ09OVEFJTkVSJykuaW5uZXJIVE1MID0gcmVuZGVyZWRcblxuICAgICAgICB0aHVtYnNFbGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy4nICsgRE9NLmdldENsYXNzKCdUSFVNQk5BSUxTJywgJ1RIVU1CX0JPWCcpKVxuICAgICAgICBcbiAgICAgICAgZm9yIGkgaW4gWzAuLnRodW1ic0VsZW1zLmxlbmd0aCAtIDFdXG4gICAgICAgICAgICB0aHVtYnNFbGVtc1tpXS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCk9PkBfcnVsZVRodW1iQ2xpY2tlZChldmVudCkpXG5cbiAgICAjXG4gICAgIyBFdmVudCBoYW5kbGVyIGZvciB3aGVuIGEgcnVsZSB0aHVtYm5haWwgaXMgY2xpY2tlZFxuICAgICMgU2V0cyB0aGUgcnVsZSBhbmQgc3dpdGNoZXMgdG8gdGhlIGdlbmVyYXRvclxuICAgICMgXG4gICAgX3J1bGVUaHVtYkNsaWNrZWQ6KGV2ZW50KSAtPlxuICAgICAgICBydWxlID0gZXZlbnQudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1ydWxlJylcblxuICAgICAgICAjIENoYW5nZSB0aGUgY3VycmVudCBydWxlXG4gICAgICAgIEBCVVMuc2V0KCdjdXJyZW50cnVsZWRlY2ltYWwnLCBydWxlKVxuXG4gICAgICAgICMgTG9hZCB0aGUgZ2VuZXJhdG9yXG4gICAgICAgIEBCVVMuYnJvYWRjYXN0KCd0YWJzLnNob3cuZ2VuZXJhdG9yJylcblxuIl19


/*

The tabbed interface handler.

@author Destin Moulton
@git https://github.com/destinmoulton/wolfcage
@license MIT

Component of the Wolfram Cellular Automata Generator (WolfCage)

Manage the tabs for the various WolfCage feature panels.
 */
var Tabs,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Tabs = (function() {
  function Tabs(BUS) {
    this._runTabModule = bind(this._runTabModule, this);
    this.BUS = BUS;
    this._tabsElems = [];
  }

  Tabs.prototype.start = function() {
    var i, len, ref, results, tab, tabContainerElem, tabsTemplateHTML;
    tabsTemplateHTML = DOM.elemById('TABS', 'TEMPLATE').innerHTML;
    tabContainerElem = DOM.elemById('TABS', 'CONTAINER');
    tabContainerElem.innerHTML = Mustache.render(tabsTemplateHTML, {});
    this._tabsElems = tabContainerElem.querySelectorAll('li');
    ref = this._tabsElems;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      tab = ref[i];
      results.push((function(_this) {
        return function(tab) {
          var moduleName;
          moduleName = tab.getAttribute("data-tab-module");
          if (tab.className === DOM.getClass('TABS', 'ACTIVE')) {
            _this._runTabModule(moduleName);
          }
          _this.BUS.subscribe('tabs.show.' + moduleName, function() {
            return _this._runTabModule(moduleName);
          });
          return tab.addEventListener('click', function(event) {
            _this.BUS.broadcast('tabs.show.' + moduleName);
          });
        };
      })(this)(tab));
    }
    return results;
  };

  Tabs.prototype._activateTab = function(tabName) {
    var activeClass, i, len, ref, tab;
    activeClass = DOM.getClass('TABS', 'ACTIVE');
    ref = this._tabsElems;
    for (i = 0, len = ref.length; i < len; i++) {
      tab = ref[i];
      tab.classList.remove(activeClass);
    }
    return DOM.elemByPrefix('TABS', 'TAB_PREFIX', tabName).classList.add(activeClass);
  };

  Tabs.prototype._runTabModule = function(tabName) {
    this._activateTab(tabName);
    return this.BUS.broadcast(tabName + '.run');
  };

  return Tabs;

})();

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFicy5qcyIsInNvdXJjZXMiOlsiVGFicy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7QUFBQSxJQUFBLElBQUE7RUFBQTs7QUFjTTtFQU1XLGNBQUMsR0FBRDs7SUFDVCxJQUFDLENBQUEsR0FBRCxHQUFPO0lBQ1AsSUFBQyxDQUFBLFVBQUQsR0FBYztFQUZMOztpQkFPYixLQUFBLEdBQU0sU0FBQTtBQUNGLFFBQUE7SUFBQSxnQkFBQSxHQUFtQixHQUFHLENBQUMsUUFBSixDQUFhLE1BQWIsRUFBcUIsVUFBckIsQ0FBZ0MsQ0FBQztJQUVwRCxnQkFBQSxHQUFtQixHQUFHLENBQUMsUUFBSixDQUFhLE1BQWIsRUFBb0IsV0FBcEI7SUFDbkIsZ0JBQWdCLENBQUMsU0FBakIsR0FBNkIsUUFBUSxDQUFDLE1BQVQsQ0FBZ0IsZ0JBQWhCLEVBQWtDLEVBQWxDO0lBQzdCLElBQUMsQ0FBQSxVQUFELEdBQWMsZ0JBQWdCLENBQUMsZ0JBQWpCLENBQWtDLElBQWxDO0FBRWQ7QUFBQTtTQUFBLHFDQUFBOzttQkFDTSxDQUFBLFNBQUEsS0FBQTtlQUFBLFNBQUMsR0FBRDtBQUNFLGNBQUE7VUFBQSxVQUFBLEdBQWEsR0FBRyxDQUFDLFlBQUosQ0FBaUIsaUJBQWpCO1VBRWIsSUFBRyxHQUFHLENBQUMsU0FBSixLQUFpQixHQUFHLENBQUMsUUFBSixDQUFhLE1BQWIsRUFBcUIsUUFBckIsQ0FBcEI7WUFDSSxLQUFDLENBQUEsYUFBRCxDQUFlLFVBQWYsRUFESjs7VUFHQSxLQUFDLENBQUEsR0FBRyxDQUFDLFNBQUwsQ0FBZSxZQUFBLEdBQWUsVUFBOUIsRUFDSSxTQUFBO21CQUFJLEtBQUMsQ0FBQSxhQUFELENBQWUsVUFBZjtVQUFKLENBREo7aUJBSUEsR0FBRyxDQUFDLGdCQUFKLENBQXFCLE9BQXJCLEVBQ0ksU0FBQyxLQUFEO1lBQ0ksS0FBQyxDQUFBLEdBQUcsQ0FBQyxTQUFMLENBQWUsWUFBQSxHQUFlLFVBQTlCO1VBREosQ0FESjtRQVZGO01BQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFGLENBQUcsR0FBSDtBQURKOztFQVBFOztpQkEwQk4sWUFBQSxHQUFjLFNBQUMsT0FBRDtBQUNWLFFBQUE7SUFBQSxXQUFBLEdBQWMsR0FBRyxDQUFDLFFBQUosQ0FBYSxNQUFiLEVBQXFCLFFBQXJCO0FBQ2Q7QUFBQSxTQUFBLHFDQUFBOztNQUNJLEdBQUcsQ0FBQyxTQUFTLENBQUMsTUFBZCxDQUFxQixXQUFyQjtBQURKO1dBR0EsR0FBRyxDQUFDLFlBQUosQ0FBaUIsTUFBakIsRUFBeUIsWUFBekIsRUFBdUMsT0FBdkMsQ0FBK0MsQ0FBQyxTQUFTLENBQUMsR0FBMUQsQ0FBOEQsV0FBOUQ7RUFMVTs7aUJBV2QsYUFBQSxHQUFjLFNBQUMsT0FBRDtJQUVWLElBQUMsQ0FBQSxZQUFELENBQWMsT0FBZDtXQUdBLElBQUMsQ0FBQSxHQUFHLENBQUMsU0FBTCxDQUFlLE9BQUEsR0FBVSxNQUF6QjtFQUxVIiwic291cmNlc0NvbnRlbnQiOlsiIyMjXG5cblRoZSB0YWJiZWQgaW50ZXJmYWNlIGhhbmRsZXIuXG5cbkBhdXRob3IgRGVzdGluIE1vdWx0b25cbkBnaXQgaHR0cHM6Ly9naXRodWIuY29tL2Rlc3Rpbm1vdWx0b24vd29sZmNhZ2VcbkBsaWNlbnNlIE1JVFxuXG5Db21wb25lbnQgb2YgdGhlIFdvbGZyYW0gQ2VsbHVsYXIgQXV0b21hdGEgR2VuZXJhdG9yIChXb2xmQ2FnZSlcblxuTWFuYWdlIHRoZSB0YWJzIGZvciB0aGUgdmFyaW91cyBXb2xmQ2FnZSBmZWF0dXJlIHBhbmVscy5cblxuIyMjXG5cbmNsYXNzIFRhYnNcbiAgICBcbiAgICAjXG4gICAgIyBTZXR1cCB0aGUgbG9jYWwgc2hhcmVkIHZhcmlhYmxlc1xuICAgICMgQGNvbnN0cnVjdG9yXG4gICAgIyBcbiAgICBjb25zdHJ1Y3RvcjogKEJVUyktPlxuICAgICAgICBAQlVTID0gQlVTXG4gICAgICAgIEBfdGFic0VsZW1zID0gW11cblxuICAgICNcbiAgICAjIFN0YXJ0IHRoZSB0YWJiZWQgaW50ZXJmYWNlXG4gICAgIyBcbiAgICBzdGFydDooKS0+XG4gICAgICAgIHRhYnNUZW1wbGF0ZUhUTUwgPSBET00uZWxlbUJ5SWQoJ1RBQlMnLCAnVEVNUExBVEUnKS5pbm5lckhUTUxcblxuICAgICAgICB0YWJDb250YWluZXJFbGVtID0gRE9NLmVsZW1CeUlkKCdUQUJTJywnQ09OVEFJTkVSJylcbiAgICAgICAgdGFiQ29udGFpbmVyRWxlbS5pbm5lckhUTUwgPSBNdXN0YWNoZS5yZW5kZXIodGFic1RlbXBsYXRlSFRNTCwge30pXG4gICAgICAgIEBfdGFic0VsZW1zID0gdGFiQ29udGFpbmVyRWxlbS5xdWVyeVNlbGVjdG9yQWxsKCdsaScpXG5cbiAgICAgICAgZm9yIHRhYiBpbiBAX3RhYnNFbGVtc1xuICAgICAgICAgICAgZG8odGFiKSA9PlxuICAgICAgICAgICAgICAgIG1vZHVsZU5hbWUgPSB0YWIuZ2V0QXR0cmlidXRlKFwiZGF0YS10YWItbW9kdWxlXCIpXG5cbiAgICAgICAgICAgICAgICBpZiB0YWIuY2xhc3NOYW1lIGlzIERPTS5nZXRDbGFzcygnVEFCUycsICdBQ1RJVkUnKVxuICAgICAgICAgICAgICAgICAgICBAX3J1blRhYk1vZHVsZShtb2R1bGVOYW1lKVxuXG4gICAgICAgICAgICAgICAgQEJVUy5zdWJzY3JpYmUoJ3RhYnMuc2hvdy4nICsgbW9kdWxlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgKCk9PkBfcnVuVGFiTW9kdWxlKG1vZHVsZU5hbWUpXG4gICAgICAgICAgICAgICAgKVxuXG4gICAgICAgICAgICAgICAgdGFiLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxcbiAgICAgICAgICAgICAgICAgICAgKGV2ZW50KT0+XG4gICAgICAgICAgICAgICAgICAgICAgICBAQlVTLmJyb2FkY2FzdCgndGFicy5zaG93LicgKyBtb2R1bGVOYW1lKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgKVxuICAgICNcbiAgICAjIEFjdGl2YXRlIGEgdGFiIHZpYSBzdHJpbmcgbmFtZVxuICAgICMgXG4gICAgX2FjdGl2YXRlVGFiOiAodGFiTmFtZSktPlxuICAgICAgICBhY3RpdmVDbGFzcyA9IERPTS5nZXRDbGFzcygnVEFCUycsICdBQ1RJVkUnKVxuICAgICAgICBmb3IgdGFiIGluIEBfdGFic0VsZW1zXG4gICAgICAgICAgICB0YWIuY2xhc3NMaXN0LnJlbW92ZShhY3RpdmVDbGFzcylcblxuICAgICAgICBET00uZWxlbUJ5UHJlZml4KCdUQUJTJywgJ1RBQl9QUkVGSVgnLCB0YWJOYW1lKS5jbGFzc0xpc3QuYWRkKGFjdGl2ZUNsYXNzKVxuXG4gICAgI1xuICAgICMgUnVuIHRoZSBUYWJcbiAgICAjICAtIGllIGlmIEdlbmVyYXRvciBpcyBjbGlja2VkLCBydW4gdGhlIEdlbmVyYXRvclxuICAgICNcbiAgICBfcnVuVGFiTW9kdWxlOih0YWJOYW1lKT0+XG4gICAgICAgICMgQWN0aXZhdGUgdGhlIHRhYlxuICAgICAgICBAX2FjdGl2YXRlVGFiKHRhYk5hbWUpXG5cbiAgICAgICAgIyBSdW4gdGhlIHRhYlxuICAgICAgICBAQlVTLmJyb2FkY2FzdCh0YWJOYW1lICsgJy5ydW4nKVxuICAgICJdfQ==


/*

The top row editor for WolfCage.

@author Destin Moulton
@git https://github.com/destinmoulton/wolfcage
@license MIT

Component of the Wolfram Cellular Automata Generator (WolfCage)

The user can edit the top/root row, allowing them to "seed"
the generator to test configurations and create new variations
on the standard rules presented in A New Kind of Science.
 */
var TopRowEditor,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

TopRowEditor = (function() {
  function TopRowEditor(BUS) {
    this._toggleEditorCell = bind(this._toggleEditorCell, this);
    this._moveSlider = bind(this._moveSlider, this);
    this.BUS = BUS;
    this._editorCellsElems = [];
    this._aRowBinary = [];
    this._noColumns = 151;
    this._colWidth = 5;
    this._rowHeight = 5;
    this._sliderLeft = 0;
    this._sliderCols = 26;
    this._sliderPxToMid = (this._sliderCols / 2) * this._colWidth;
    this._editorCellWidth = 29;
    this._totalWidth = this._colWidth * this._noColumns;
    this._generateInitialBinary();
    this.BUS.subscribe('toproweditor.run', (function(_this) {
      return function() {
        _this.run();
      };
    })(this));
  }

  TopRowEditor.prototype.run = function() {
    this._setupContainerTemplate();
    this._sliderElem = DOM.elemById('TOPROWEDITOR', 'SLIDER');
    this._rowContainerElem = DOM.elemById('TOPROWEDITOR', 'ROW_CONTAINER');
    this._jEditorContainer = DOM.elemById('TOPROWEDITOR', 'EDITOR_CONTAINER');
    this._rowContainerElem.style.height = this._rowHeight + "px";
    this._rowContainerElem.style.width = this._totalWidth + "px";
    this._setupSlider();
    this._buildRow();
    this._buildEditorCells();
    this._updateEditorCells(1);
    return this._setupButtonEvents();
  };

  TopRowEditor.prototype._setupContainerTemplate = function() {
    var toproweditorHTML, wolfcageMainElem;
    toproweditorHTML = DOM.elemById('TOPROWEDITOR', 'TEMPLATE_TOPROWEDITOR').innerHTML;
    wolfcageMainElem = DOM.elemById('WOLFCAGE', 'MAIN_CONTAINER');
    return wolfcageMainElem.innerHTML = Mustache.render(toproweditorHTML, {});
  };

  TopRowEditor.prototype._setupSlider = function() {
    var isSliderInDragMode, sliderArrowLeftElem, sliderArrowRightElem, sliderContainerElem;
    sliderContainerElem = DOM.elemById('TOPROWEDITOR', 'SLIDER_CONTAINER');
    sliderContainerElem.style.width = this._totalWidth + "px";
    this._sliderElem.style.width = (this._colWidth * this._sliderCols) + "px";
    sliderArrowLeftElem = DOM.elemById('TOPROWEDITOR', 'SLIDER_ARROW_LEFT');
    sliderArrowRightElem = DOM.elemById('TOPROWEDITOR', 'SLIDER_ARROW_RIGHT');
    isSliderInDragMode = false;
    this._sliderElem.addEventListener('click', (function(_this) {
      return function() {
        if (isSliderInDragMode) {
          isSliderInDragMode = false;
          sliderArrowLeftElem.style.display = "none";
          return sliderArrowRightElem.style.display = "none";
        } else {
          isSliderInDragMode = true;
          sliderArrowLeftElem.style.display = "block";
          return sliderArrowRightElem.style.display = "block";
        }
      };
    })(this));
    this._sliderElem.addEventListener('mousemove', (function(_this) {
      return function(event) {
        if (isSliderInDragMode) {
          return _this._moveSlider(event);
        }
      };
    })(this));
    return this._sliderInitialOffset = this._getOffsetPosition(this._sliderElem);
  };

  TopRowEditor.prototype._setupButtonEvents = function() {
    DOM.elemById('TOPROWEDITOR', 'BUTTON_GENERATE').addEventListener('click', (function(_this) {
      return function() {
        _this.BUS.broadcast('tabs.show.generator');
      };
    })(this));
    return DOM.elemById('TOPROWEDITOR', 'BUTTON_RESET').addEventListener('click', (function(_this) {
      return function(event) {
        return _this._resetRow(event);
      };
    })(this));
  };

  TopRowEditor.prototype._getOffsetPosition = function(elem) {
    var left, top;
    top = elem.getBoundingClientRect().top + window.pageYOffset;
    left = elem.getBoundingClientRect().left + window.pageXOffset;
    return {
      top: top,
      left: left
    };
  };

  TopRowEditor.prototype._resetRow = function(event) {
    this._generateInitialBinary();
    return this.run();
  };

  TopRowEditor.prototype._moveSlider = function(ev) {
    var closestEdgePx, leftCellNo, leftEdgeSlider, rightEdgeSlider, widthOfContainer, xMousePos;
    xMousePos = ev.pageX - this._sliderInitialOffset.left;
    closestEdgePx = xMousePos - (xMousePos % this._colWidth);
    leftEdgeSlider = closestEdgePx - this._sliderPxToMid;
    if (leftEdgeSlider < 0) {
      leftEdgeSlider = 0;
    }
    rightEdgeSlider = closestEdgePx + this._sliderPxToMid + this._colWidth;
    widthOfContainer = this._totalWidth + this._colWidth;
    if (leftEdgeSlider >= 0 && rightEdgeSlider <= widthOfContainer) {
      this._sliderElem.style.left = leftEdgeSlider + "px";
      leftCellNo = (leftEdgeSlider / this._colWidth) + 1;
      return this._updateEditorCells(leftCellNo);
    }
  };

  TopRowEditor.prototype._updateEditorCells = function(beginCell) {
    var cell, cellPos, j, ref, results;
    results = [];
    for (cell = j = 1, ref = this._sliderCols; 1 <= ref ? j <= ref : j >= ref; cell = 1 <= ref ? ++j : --j) {
      cellPos = cell + beginCell - 1;
      this._editorCellsElems[cell].innerHTML = cellPos;
      this._editorCellsElems[cell].setAttribute('data-cellIndex', cellPos);
      if (this._aRowBinary[cellPos] === 1) {
        results.push(this._editorCellsElems[cell].classList.add(DOM.getClass('TOPROWEDITOR', 'EDITOR_CELL_ACTIVE')));
      } else {
        results.push(this._editorCellsElems[cell].classList.remove(DOM.getClass('TOPROWEDITOR', 'EDITOR_CELL_ACTIVE')));
      }
    }
    return results;
  };

  TopRowEditor.prototype._buildEditorCells = function() {
    var cell, cellHtml, cellTemplateHTML, cells, i, j, k, leftEdgeSlider, ref, ref1, results, tmpId;
    cellTemplateHTML = DOM.elemById('TOPROWEDITOR', 'TEMPLATE_EDITOR_CELL').innerHTML;
    this._jEditorContainer.style.width = (this._sliderCols * this._editorCellWidth) + "px";
    cellHtml = "";
    for (cell = j = 1, ref = this._sliderCols; 1 <= ref ? j <= ref : j >= ref; cell = 1 <= ref ? ++j : --j) {
      tmpId = "editor-cell-" + cell;
      leftEdgeSlider = (cell - 1) * this._editorCellWidth;
      cellHtml += Mustache.render(cellTemplateHTML, {
        id: tmpId,
        left: leftEdgeSlider
      });
    }
    this._jEditorContainer.innerHTML = cellHtml;
    cells = document.getElementsByClassName(DOM.getClass('TOPROWEDITOR', 'EDITOR_CELL'));
    results = [];
    for (i = k = 0, ref1 = cells.length - 1; 0 <= ref1 ? k <= ref1 : k >= ref1; i = 0 <= ref1 ? ++k : --k) {
      this._editorCellsElems[i + 1] = cells[i];
      results.push(cells[i].addEventListener('click', this._toggleEditorCell));
    }
    return results;
  };

  TopRowEditor.prototype._toggleEditorCell = function(event) {
    var cellNo, editorCellElem, sliderCellElem, sliderColPrefix;
    editorCellElem = event.target;
    cellNo = editorCellElem.getAttribute('data-cellIndex');
    sliderColPrefix = DOM.getPrefix('TOPROWEDITOR', 'SLIDER_COL');
    sliderCellElem = document.getElementById(sliderColPrefix + cellNo);
    if (this._aRowBinary[cellNo] === 1) {
      this._aRowBinary[cellNo] = 0;
      editorCellElem.classList.remove(DOM.getClass('TOPROWEDITOR', 'EDITOR_CELL_ACTIVE'));
      sliderCellElem.classList.remove(DOM.getClass('TOPROWEDITOR', 'SLIDER_CELL_ACTIVE'));
    } else {
      this._aRowBinary[cellNo] = 1;
      editorCellElem.classList.add(DOM.getClass('TOPROWEDITOR', 'EDITOR_CELL_ACTIVE'));
      sliderCellElem.classList.add(DOM.getClass('TOPROWEDITOR', 'SLIDER_CELL_ACTIVE'));
    }
    return this.BUS.set('toprowbinary', this._aRowBinary);
  };

  TopRowEditor.prototype._generateInitialBinary = function() {
    var col, j, ref, seed_col;
    seed_col = Math.ceil(this._noColumns / 2);
    for (col = j = 1, ref = this._noColumns; 1 <= ref ? j <= ref : j >= ref; col = 1 <= ref ? ++j : --j) {
      if (col === seed_col) {
        this._aRowBinary[col] = 1;
      } else {
        this._aRowBinary[col] = 0;
      }
    }
    return this.BUS.set('toprowbinary', this._aRowBinary);
  };

  TopRowEditor.prototype._buildRow = function() {
    var activeClass, col, j, leftEdgeSlider, ref, rowHtml, sliderColPrefix, smallcellTemplateHTML, tmpId;
    smallcellTemplateHTML = DOM.elemById('TOPROWEDITOR', 'TEMPLATE_SLIDER_CELL').innerHTML;
    sliderColPrefix = DOM.getPrefix('TOPROWEDITOR', 'SLIDER_COL');
    rowHtml = "";
    for (col = j = 1, ref = this._noColumns; 1 <= ref ? j <= ref : j >= ref; col = 1 <= ref ? ++j : --j) {
      activeClass = "";
      if (this._aRowBinary[col] === 1) {
        activeClass = DOM.getClass('TOPROWEDITOR', 'SLIDER_CELL_ACTIVE');
      }
      leftEdgeSlider = (col - 1) * this._colWidth;
      tmpId = sliderColPrefix + col;
      rowHtml += Mustache.render(smallcellTemplateHTML, {
        id: tmpId,
        left: leftEdgeSlider,
        activeClass: activeClass
      });
    }
    return this._rowContainerElem.innerHTML = rowHtml;
  };

  return TopRowEditor;

})();

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/*

Initialize the various WolfCage classes.

@author Destin Moulton
@git https://github.com/destinmoulton/wolfcage
@license MIT

Component of the Wolfram Cellular Automata Generator (WolfCage)
 */
var WolfCage;

WolfCage = (function() {
  function WolfCage(options) {
    var tabs;
    this.BUS = new Bus();
    this.BUS.set('thumbnails.path', options.thumbnails_path);
    this.BUS.set('board.cell.style.activeBackgroundColor', '#000000');
    this.BUS.set('board.cell.style.borderColor', '#000000');
    this.BUS.set('board.cell.style.inactiveBackgroundColor', '#ffffff');
    tabs = new Tabs(this.BUS);
    new Thumbnails(this.BUS);
    new TopRowEditor(this.BUS);
    new Generator(this.BUS);
    tabs.start();
  }

  return WolfCage;

})();

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV29sZkNhZ2UuanMiLCJzb3VyY2VzIjpbIldvbGZDYWdlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7QUFBQSxJQUFBOztBQVlNO0VBRVUsa0JBQUMsT0FBRDtBQUdSLFFBQUE7SUFBQSxJQUFDLENBQUEsR0FBRCxHQUFXLElBQUEsR0FBQSxDQUFBO0lBRVgsSUFBQyxDQUFBLEdBQUcsQ0FBQyxHQUFMLENBQVMsaUJBQVQsRUFBNEIsT0FBTyxDQUFDLGVBQXBDO0lBR0EsSUFBQyxDQUFBLEdBQUcsQ0FBQyxHQUFMLENBQVMsd0NBQVQsRUFBbUQsU0FBbkQ7SUFDQSxJQUFDLENBQUEsR0FBRyxDQUFDLEdBQUwsQ0FBUyw4QkFBVCxFQUF5QyxTQUF6QztJQUNBLElBQUMsQ0FBQSxHQUFHLENBQUMsR0FBTCxDQUFTLDBDQUFULEVBQXFELFNBQXJEO0lBR0EsSUFBQSxHQUFXLElBQUEsSUFBQSxDQUFLLElBQUMsQ0FBQSxHQUFOO0lBR1AsSUFBQSxVQUFBLENBQVcsSUFBQyxDQUFBLEdBQVo7SUFHQSxJQUFBLFlBQUEsQ0FBYSxJQUFDLENBQUEsR0FBZDtJQUdBLElBQUEsU0FBQSxDQUFVLElBQUMsQ0FBQSxHQUFYO0lBR0osSUFBSSxDQUFDLEtBQUwsQ0FBQTtFQXpCUSIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuXG5Jbml0aWFsaXplIHRoZSB2YXJpb3VzIFdvbGZDYWdlIGNsYXNzZXMuXG5cbkBhdXRob3IgRGVzdGluIE1vdWx0b25cbkBnaXQgaHR0cHM6Ly9naXRodWIuY29tL2Rlc3Rpbm1vdWx0b24vd29sZmNhZ2VcbkBsaWNlbnNlIE1JVFxuXG5Db21wb25lbnQgb2YgdGhlIFdvbGZyYW0gQ2VsbHVsYXIgQXV0b21hdGEgR2VuZXJhdG9yIChXb2xmQ2FnZSlcblxuIyMjXG5cbmNsYXNzIFdvbGZDYWdlXG5cbiAgICBjb25zdHJ1Y3Rvcjoob3B0aW9ucykgLT5cblxuICAgICAgICAjIFBVQi9TVUIgYW5kIHZhcmlhYmxlIHN0b3JlIGZvciBpbnRlci1jbGFzcyBjb21tdW5pY2F0aW9uXG4gICAgICAgIEBCVVMgPSBuZXcgQnVzKClcblxuICAgICAgICBAQlVTLnNldCgndGh1bWJuYWlscy5wYXRoJywgb3B0aW9ucy50aHVtYm5haWxzX3BhdGgpO1xuXG4gICAgICAgICMgU2V0IHRoZSBpbml0aWFsIGNvbG9yc1xuICAgICAgICBAQlVTLnNldCgnYm9hcmQuY2VsbC5zdHlsZS5hY3RpdmVCYWNrZ3JvdW5kQ29sb3InLCAnIzAwMDAwMCcpXG4gICAgICAgIEBCVVMuc2V0KCdib2FyZC5jZWxsLnN0eWxlLmJvcmRlckNvbG9yJywgJyMwMDAwMDAnKVxuICAgICAgICBAQlVTLnNldCgnYm9hcmQuY2VsbC5zdHlsZS5pbmFjdGl2ZUJhY2tncm91bmRDb2xvcicsICcjZmZmZmZmJylcbiAgICAgICAgICAgIFxuICAgICAgICAjIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiB0aGUgVGFicyAodmlzdWFsIHNlY3Rpb25hbCBtYW5hZ2VtZW50KVxuICAgICAgICB0YWJzID0gbmV3IFRhYnMoQEJVUylcblxuICAgICAgICAjIENyZWF0ZSBpbnN0YW5jZSBvZiB0aGUgUnVsZSBUaHVtYm5haWxzIHByZXZpZXcvc2VsZWN0b3JcbiAgICAgICAgbmV3IFRodW1ibmFpbHMoQEJVUylcblxuICAgICAgICAjIENyZWF0ZSBpbnN0YW5jZSBvZiB0aGUgVG9wIFJvdyBFZGl0b3JcbiAgICAgICAgbmV3IFRvcFJvd0VkaXRvcihAQlVTKVxuXG4gICAgICAgICMgQ3JlYXRlIGluc3RhbmNlIG9mIHRoZSBEYXNoYm9hcmRcbiAgICAgICAgbmV3IEdlbmVyYXRvcihAQlVTKVxuXG4gICAgICAgICMgU3RhcnQgdGhlIHRhYiBpbnRlcmZhY2VcbiAgICAgICAgdGFicy5zdGFydCgpXG5cbiAgICBcblxuICAgICJdfQ==
