
/*
Variables.coffee

@author Destin Moulton
@git https://github.com/destinmoulton/cagen
@license MIT

Component of Cellular Automata Generator (CAGEN)

Manage variables for the cagen components.
 */
var Variables;

Variables = (function() {
  function Variables() {
    this.jMainContainer = $("#cagen-container");
    this.currentRule = 0;
    this.topRowBinaryArray = [];
    radio('rules.set.currentrule').subscribe((function(_this) {
      return function(data) {
        _this.setCurrentRule(data);
      };
    })(this));
  }

  Variables.prototype.setCurrentRule = function(newRule) {
    return this.currentRule = newRule;
  };

  Variables.prototype.setTopRowBinary = function(newBinary) {
    return this.topRowBinaryArray = newBinary;
  };

  Variables.prototype.getTopRowBinary = function() {
    return this.topRowBinaryArray;
  };

  return Variables;

})();

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmFyaWFibGVzLmpzIiwic291cmNlcyI6WyJWYXJpYWJsZXMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7QUFBQSxJQUFBOztBQWFNO0VBRVcsbUJBQUE7SUFDVCxJQUFDLENBQUEsY0FBRCxHQUFrQixDQUFBLENBQUUsa0JBQUY7SUFDbEIsSUFBQyxDQUFBLFdBQUQsR0FBZTtJQUNmLElBQUMsQ0FBQSxpQkFBRCxHQUFxQjtJQUVyQixLQUFBLENBQU0sdUJBQU4sQ0FBOEIsQ0FBQyxTQUEvQixDQUNJLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxJQUFEO1FBQ0ksS0FBQyxDQUFBLGNBQUQsQ0FBZ0IsSUFBaEI7TUFESjtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FESjtFQUxTOztzQkFXYixjQUFBLEdBQWdCLFNBQUMsT0FBRDtXQUNaLElBQUMsQ0FBQSxXQUFELEdBQWU7RUFESDs7c0JBR2hCLGVBQUEsR0FBaUIsU0FBQyxTQUFEO1dBQ2IsSUFBQyxDQUFBLGlCQUFELEdBQXFCO0VBRFI7O3NCQUdqQixlQUFBLEdBQWlCLFNBQUE7QUFDYixXQUFPLElBQUMsQ0FBQTtFQURLIiwic291cmNlc0NvbnRlbnQiOlsiIyMjXG5WYXJpYWJsZXMuY29mZmVlXG5cbkBhdXRob3IgRGVzdGluIE1vdWx0b25cbkBnaXQgaHR0cHM6Ly9naXRodWIuY29tL2Rlc3Rpbm1vdWx0b24vY2FnZW5cbkBsaWNlbnNlIE1JVFxuXG5Db21wb25lbnQgb2YgQ2VsbHVsYXIgQXV0b21hdGEgR2VuZXJhdG9yIChDQUdFTilcblxuTWFuYWdlIHZhcmlhYmxlcyBmb3IgdGhlIGNhZ2VuIGNvbXBvbmVudHMuXG5cbiMjI1xuXG5jbGFzcyBWYXJpYWJsZXNcblxuICAgIGNvbnN0cnVjdG9yOiAoKS0+XG4gICAgICAgIEBqTWFpbkNvbnRhaW5lciA9ICQoXCIjY2FnZW4tY29udGFpbmVyXCIpXG4gICAgICAgIEBjdXJyZW50UnVsZSA9IDBcbiAgICAgICAgQHRvcFJvd0JpbmFyeUFycmF5ID0gW11cblxuICAgICAgICByYWRpbygncnVsZXMuc2V0LmN1cnJlbnRydWxlJykuc3Vic2NyaWJlKFxuICAgICAgICAgICAgKGRhdGEpPT5cbiAgICAgICAgICAgICAgICBAc2V0Q3VycmVudFJ1bGUoZGF0YSlcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgKVxuXG4gICAgc2V0Q3VycmVudFJ1bGU6IChuZXdSdWxlKS0+XG4gICAgICAgIEBjdXJyZW50UnVsZSA9IG5ld1J1bGVcblxuICAgIHNldFRvcFJvd0JpbmFyeTogKG5ld0JpbmFyeSktPlxuICAgICAgICBAdG9wUm93QmluYXJ5QXJyYXkgPSBuZXdCaW5hcnlcblxuICAgIGdldFRvcFJvd0JpbmFyeTogKCktPlxuICAgICAgICByZXR1cm4gQHRvcFJvd0JpbmFyeUFycmF5XG4iXX0=


/*

The DOM configuration for the Cellular Automata GENerator (CAGEN).

@author Destin Moulton
@git https://github.com/destinmoulton/cagen
@license MIT

Component of Cellular Automata Generator (CAGEN)

Contains the settings for the DOM objects.

Holds ids and classes of relevant DOM objects.
 */
var DOM;

DOM = (function() {
  function DOM() {}

  DOM.ids = {
    'CAGEN': {
      'MAIN_CONTAINER': 'cagen-container'
    },
    'BOARD': {
      'CONTAINER': 'cagen-board',
      'MESSAGE_CONTAINER': 'cagen-generatemessage-container'
    },
    'TOPROWEDITOR': {
      'BUTTON_GENERATE': 'rowed-button-generate',
      'BUTTON_RESET': 'rowed-button-resetrow',
      'EDITOR_CONTAINER': 'rowed-editor-container',
      'ROW_CONTAINER': 'rowed-slider-row-container',
      'SLIDER_CONTAINER': 'rowed-slider-container',
      'SLIDER': 'rowed-slider',
      'SLIDER_ARROW_LEFT': 'rowed-slider-arrow-left',
      'SLIDER_ARROW_RIGHT': 'rowed-slider-arrow-right',
      'TEMPLATE_TOPROWEDITOR': 'tmpl-cagen-toproweditor',
      'TEMPLATE_SLIDER_CELL': 'tmpl-rowed-slider-cell',
      'TEMPLATE_EDITOR_CELL': 'tmpl-rowed-editor-cell'
    },
    'dashboard': {
      'content': "#cagen-dashboard-content",
      'rule_bitset_container': "#cagen-rules-preview-container",
      'rule_dropdown': "#cagen-dash-select-input",
      'rule_generate_button': "#cagen-dash-generate-button"
    },
    'template': {
      'dashboard_rule_preview_cell': '#tmpl-cagen-dash-preview-cell',
      'dashboard_main': '#tmpl-cagen-dashboard',
      'dashboard_board': '#tmpl-cagen-dash-board'
    }
  };

  DOM.classes = {
    'TOPROWEDITOR': {
      'EDITOR_CELL': 'rowed-editor-cell',
      'EDITOR_CELL_ACTIVE': 'rowed-editor-cell-active',
      'SLIDER_CELL_ACTIVE': 'cagen-board-cell-active'
    },
    'dashboard': {
      'rule_preview_cell_active': 'cagen-dash-preview-cell-active'
    }
  };

  DOM.prefixes = {
    'TOPROWEDITOR': {
      'SLIDER_COL': 'rowed-slider-col-'
    }
  };

  DOM.elemById = function(section, element) {
    return document.getElementById(this.getID(section, element));
  };

  DOM.getClass = function(section, element) {
    return this.classes[section][element];
  };

  DOM.getID = function(section, element) {
    if (!this.ids.hasOwnProperty(section)) {
      console.log("DOM::getID() - Unable to find `" + section + "`");
      return void 0;
    }
    if (!this.ids[section].hasOwnProperty(element)) {
      console.log("DOM::getID() - Unable to find `" + element + "`");
      return void 0;
    }
    return this.ids[section][element];
  };

  DOM.getPrefix = function(section, prefix) {
    return this.prefixes[section][prefix];
  };

  return DOM;

})();

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRE9NLmpzIiwic291cmNlcyI6WyJET00uY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFBOztBQWNNOzs7RUFDRixHQUFDLENBQUEsR0FBRCxHQUFPO0lBQ0gsT0FBQSxFQUFRO01BQ0osZ0JBQUEsRUFBaUIsaUJBRGI7S0FETDtJQUlILE9BQUEsRUFBUTtNQUNKLFdBQUEsRUFBWSxhQURSO01BRUosbUJBQUEsRUFBb0IsaUNBRmhCO0tBSkw7SUFRSCxjQUFBLEVBQWU7TUFDWCxpQkFBQSxFQUFtQix1QkFEUjtNQUVYLGNBQUEsRUFBZ0IsdUJBRkw7TUFHWCxrQkFBQSxFQUFvQix3QkFIVDtNQUlYLGVBQUEsRUFBaUIsNEJBSk47TUFLWCxrQkFBQSxFQUFvQix3QkFMVDtNQU1YLFFBQUEsRUFBUyxjQU5FO01BT1gsbUJBQUEsRUFBb0IseUJBUFQ7TUFRWCxvQkFBQSxFQUFxQiwwQkFSVjtNQVNYLHVCQUFBLEVBQXlCLHlCQVRkO01BVVgsc0JBQUEsRUFBdUIsd0JBVlo7TUFXWCxzQkFBQSxFQUF1Qix3QkFYWjtLQVJaO0lBcUJILFdBQUEsRUFBWTtNQUNSLFNBQUEsRUFBVSwwQkFERjtNQUVSLHVCQUFBLEVBQXdCLGdDQUZoQjtNQUdSLGVBQUEsRUFBZ0IsMEJBSFI7TUFJUixzQkFBQSxFQUF1Qiw2QkFKZjtLQXJCVDtJQTJCSCxVQUFBLEVBQVc7TUFDUCw2QkFBQSxFQUE4QiwrQkFEdkI7TUFFUCxnQkFBQSxFQUFpQix1QkFGVjtNQUdQLGlCQUFBLEVBQWtCLHdCQUhYO0tBM0JSOzs7RUFrQ1AsR0FBQyxDQUFBLE9BQUQsR0FBVztJQUNQLGNBQUEsRUFBZTtNQUNYLGFBQUEsRUFBYyxtQkFESDtNQUVYLG9CQUFBLEVBQXFCLDBCQUZWO01BR1gsb0JBQUEsRUFBcUIseUJBSFY7S0FEUjtJQU1QLFdBQUEsRUFBWTtNQUNSLDBCQUFBLEVBQTJCLGdDQURuQjtLQU5MOzs7RUFZWCxHQUFDLENBQUEsUUFBRCxHQUFZO0lBQ1IsY0FBQSxFQUFlO01BQ1gsWUFBQSxFQUFhLG1CQURGO0tBRFA7OztFQVNaLEdBQUMsQ0FBQSxRQUFELEdBQVUsU0FBQyxPQUFELEVBQVUsT0FBVjtBQUNOLFdBQU8sUUFBUSxDQUFDLGNBQVQsQ0FBd0IsSUFBQyxDQUFBLEtBQUQsQ0FBTyxPQUFQLEVBQWdCLE9BQWhCLENBQXhCO0VBREQ7O0VBR1YsR0FBQyxDQUFBLFFBQUQsR0FBVSxTQUFDLE9BQUQsRUFBVSxPQUFWO0FBQ04sV0FBTyxJQUFDLENBQUEsT0FBUSxDQUFBLE9BQUEsQ0FBUyxDQUFBLE9BQUE7RUFEbkI7O0VBR1YsR0FBQyxDQUFBLEtBQUQsR0FBTyxTQUFDLE9BQUQsRUFBVSxPQUFWO0lBRUgsSUFBRyxDQUFJLElBQUMsQ0FBQSxHQUFHLENBQUMsY0FBTCxDQUFvQixPQUFwQixDQUFQO01BQ0ksT0FBTyxDQUFDLEdBQVIsQ0FBWSxpQ0FBQSxHQUFrQyxPQUFsQyxHQUEwQyxHQUF0RDtBQUNBLGFBQU8sT0FGWDs7SUFJQSxJQUFHLENBQUksSUFBQyxDQUFBLEdBQUksQ0FBQSxPQUFBLENBQVEsQ0FBQyxjQUFkLENBQTZCLE9BQTdCLENBQVA7TUFDSSxPQUFPLENBQUMsR0FBUixDQUFZLGlDQUFBLEdBQWtDLE9BQWxDLEdBQTBDLEdBQXREO0FBQ0EsYUFBTyxPQUZYOztBQUlBLFdBQU8sSUFBQyxDQUFBLEdBQUksQ0FBQSxPQUFBLENBQVMsQ0FBQSxPQUFBO0VBVmxCOztFQVlQLEdBQUMsQ0FBQSxTQUFELEdBQVcsU0FBQyxPQUFELEVBQVUsTUFBVjtBQUNQLFdBQU8sSUFBQyxDQUFBLFFBQVMsQ0FBQSxPQUFBLENBQVMsQ0FBQSxNQUFBO0VBRG5CIiwic291cmNlc0NvbnRlbnQiOlsiIyMjXG5cblRoZSBET00gY29uZmlndXJhdGlvbiBmb3IgdGhlIENlbGx1bGFyIEF1dG9tYXRhIEdFTmVyYXRvciAoQ0FHRU4pLlxuXG5AYXV0aG9yIERlc3RpbiBNb3VsdG9uXG5AZ2l0IGh0dHBzOi8vZ2l0aHViLmNvbS9kZXN0aW5tb3VsdG9uL2NhZ2VuXG5AbGljZW5zZSBNSVRcblxuQ29tcG9uZW50IG9mIENlbGx1bGFyIEF1dG9tYXRhIEdlbmVyYXRvciAoQ0FHRU4pXG5cbkNvbnRhaW5zIHRoZSBzZXR0aW5ncyBmb3IgdGhlIERPTSBvYmplY3RzLlxuXG5Ib2xkcyBpZHMgYW5kIGNsYXNzZXMgb2YgcmVsZXZhbnQgRE9NIG9iamVjdHMuXG4jIyNcbmNsYXNzIERPTVxuICAgIEBpZHMgPSB7XG4gICAgICAgICdDQUdFTic6e1xuICAgICAgICAgICAgJ01BSU5fQ09OVEFJTkVSJzonY2FnZW4tY29udGFpbmVyJ1xuICAgICAgICB9LFxuICAgICAgICAnQk9BUkQnOntcbiAgICAgICAgICAgICdDT05UQUlORVInOidjYWdlbi1ib2FyZCcsXG4gICAgICAgICAgICAnTUVTU0FHRV9DT05UQUlORVInOidjYWdlbi1nZW5lcmF0ZW1lc3NhZ2UtY29udGFpbmVyJ1xuICAgICAgICB9LFxuICAgICAgICAnVE9QUk9XRURJVE9SJzp7XG4gICAgICAgICAgICAnQlVUVE9OX0dFTkVSQVRFJzogJ3Jvd2VkLWJ1dHRvbi1nZW5lcmF0ZScsXG4gICAgICAgICAgICAnQlVUVE9OX1JFU0VUJzogJ3Jvd2VkLWJ1dHRvbi1yZXNldHJvdycsXG4gICAgICAgICAgICAnRURJVE9SX0NPTlRBSU5FUic6ICdyb3dlZC1lZGl0b3ItY29udGFpbmVyJyxcbiAgICAgICAgICAgICdST1dfQ09OVEFJTkVSJzogJ3Jvd2VkLXNsaWRlci1yb3ctY29udGFpbmVyJyxcbiAgICAgICAgICAgICdTTElERVJfQ09OVEFJTkVSJzogJ3Jvd2VkLXNsaWRlci1jb250YWluZXInLFxuICAgICAgICAgICAgJ1NMSURFUic6J3Jvd2VkLXNsaWRlcicsXG4gICAgICAgICAgICAnU0xJREVSX0FSUk9XX0xFRlQnOidyb3dlZC1zbGlkZXItYXJyb3ctbGVmdCcsXG4gICAgICAgICAgICAnU0xJREVSX0FSUk9XX1JJR0hUJzoncm93ZWQtc2xpZGVyLWFycm93LXJpZ2h0JyxcbiAgICAgICAgICAgICdURU1QTEFURV9UT1BST1dFRElUT1InOiAndG1wbC1jYWdlbi10b3Byb3dlZGl0b3InLFxuICAgICAgICAgICAgJ1RFTVBMQVRFX1NMSURFUl9DRUxMJzondG1wbC1yb3dlZC1zbGlkZXItY2VsbCcsXG4gICAgICAgICAgICAnVEVNUExBVEVfRURJVE9SX0NFTEwnOid0bXBsLXJvd2VkLWVkaXRvci1jZWxsJ1xuICAgICAgICB9LFxuICAgICAgICAnZGFzaGJvYXJkJzp7XG4gICAgICAgICAgICAnY29udGVudCc6XCIjY2FnZW4tZGFzaGJvYXJkLWNvbnRlbnRcIixcbiAgICAgICAgICAgICdydWxlX2JpdHNldF9jb250YWluZXInOlwiI2NhZ2VuLXJ1bGVzLXByZXZpZXctY29udGFpbmVyXCIsXG4gICAgICAgICAgICAncnVsZV9kcm9wZG93bic6XCIjY2FnZW4tZGFzaC1zZWxlY3QtaW5wdXRcIixcbiAgICAgICAgICAgICdydWxlX2dlbmVyYXRlX2J1dHRvbic6XCIjY2FnZW4tZGFzaC1nZW5lcmF0ZS1idXR0b25cIlxuICAgICAgICB9LFxuICAgICAgICAndGVtcGxhdGUnOntcbiAgICAgICAgICAgICdkYXNoYm9hcmRfcnVsZV9wcmV2aWV3X2NlbGwnOicjdG1wbC1jYWdlbi1kYXNoLXByZXZpZXctY2VsbCdcbiAgICAgICAgICAgICdkYXNoYm9hcmRfbWFpbic6JyN0bXBsLWNhZ2VuLWRhc2hib2FyZCcsXG4gICAgICAgICAgICAnZGFzaGJvYXJkX2JvYXJkJzonI3RtcGwtY2FnZW4tZGFzaC1ib2FyZCdcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBjbGFzc2VzID0ge1xuICAgICAgICAnVE9QUk9XRURJVE9SJzp7XG4gICAgICAgICAgICAnRURJVE9SX0NFTEwnOidyb3dlZC1lZGl0b3ItY2VsbCcsXG4gICAgICAgICAgICAnRURJVE9SX0NFTExfQUNUSVZFJzoncm93ZWQtZWRpdG9yLWNlbGwtYWN0aXZlJyxcbiAgICAgICAgICAgICdTTElERVJfQ0VMTF9BQ1RJVkUnOidjYWdlbi1ib2FyZC1jZWxsLWFjdGl2ZSdcbiAgICAgICAgfSxcbiAgICAgICAgJ2Rhc2hib2FyZCc6e1xuICAgICAgICAgICAgJ3J1bGVfcHJldmlld19jZWxsX2FjdGl2ZSc6J2NhZ2VuLWRhc2gtcHJldmlldy1jZWxsLWFjdGl2ZScsXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBwcmVmaXhlcyA9IHtcbiAgICAgICAgJ1RPUFJPV0VESVRPUic6e1xuICAgICAgICAgICAgJ1NMSURFUl9DT0wnOidyb3dlZC1zbGlkZXItY29sLSdcbiAgICAgICAgfVxuICAgIH1cblxuICAgICNcbiAgICAjIEdldCBhbiBlbGVtZW50IGJ5IGlkXG4gICAgI1xuICAgIEBlbGVtQnlJZDooc2VjdGlvbiwgZWxlbWVudCkgLT5cbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKEBnZXRJRChzZWN0aW9uLCBlbGVtZW50KSlcblxuICAgIEBnZXRDbGFzczooc2VjdGlvbiwgZWxlbWVudCkgLT5cbiAgICAgICAgcmV0dXJuIEBjbGFzc2VzW3NlY3Rpb25dW2VsZW1lbnRdXG5cbiAgICBAZ2V0SUQ6KHNlY3Rpb24sIGVsZW1lbnQpIC0+XG5cbiAgICAgICAgaWYgbm90IEBpZHMuaGFzT3duUHJvcGVydHkoc2VjdGlvbilcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRE9NOjpnZXRJRCgpIC0gVW5hYmxlIHRvIGZpbmQgYFwiK3NlY3Rpb24rXCJgXCIpXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG5cbiAgICAgICAgaWYgbm90IEBpZHNbc2VjdGlvbl0uaGFzT3duUHJvcGVydHkoZWxlbWVudClcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRE9NOjpnZXRJRCgpIC0gVW5hYmxlIHRvIGZpbmQgYFwiK2VsZW1lbnQrXCJgXCIpXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgICAgICAgICBcbiAgICAgICAgcmV0dXJuIEBpZHNbc2VjdGlvbl1bZWxlbWVudF1cbiAgICBcbiAgICBAZ2V0UHJlZml4OihzZWN0aW9uLCBwcmVmaXgpLT5cbiAgICAgICAgcmV0dXJuIEBwcmVmaXhlc1tzZWN0aW9uXVtwcmVmaXhdIl19


/*
CAGEN: Cellular Automata GENerator

@author Destin Moulton
@git https://github.com/destinmoulton/cagen
@license MIT

Generate a cellular automata board based on a passed rule.
 */
var Board;

Board = (function() {
  function Board(VariablesInstance) {
    this._Vars = VariablesInstance;
    this._generateMessageContainerID = '#';
    this._boardNoCellsWide = 0;
    this._boardNoCellsHigh = 0;
    this._boardCellWidthPx = 5;
    this._boardCellHeightPx = 5;
    this._cellBaseClass = 'cagen-board-cell';
    this._cellActiveClass = 'cagen-board-cell-active';
    this._cellIDPrefix = 'sb_';
    this._currentRow = 1;
    this._rootRowBinary = [];
    this._currentCells = [];
    this._RuleMatcher = new RuleMatcher();
  }

  Board.prototype.buildBoard = function(rootRowBinary, noCellsWide, noSectionsHigh) {
    this._boardElem = document.getElementById(DOM.getID('BOARD', 'CONTAINER'));
    this._messageElem = document.getElementById(DOM.getID('BOARD', 'MESSAGE_CONTAINER'));
    this._rootRowBinary = rootRowBinary;
    this._RuleMatcher.setCurrentRule(this._Vars.currentRule);
    this._boardNoCellsWide = noCellsWide;
    this._boardNoCellsHigh = noSectionsHigh;
    this._boardElem.innerWidth = noCellsWide * this._boardCellWidthPx;
    this._boardElem.innerHeight = noSectionsHigh * this._boardCellHeightPx;
    this._boardElem.innerHtml = "";
    this._boardElem.style.display = "none";
    this._currentRow = 1;
    this._messageElem.style.display = "block";
    return setTimeout((function(_this) {
      return function() {
        _this._generateRows();
        _this._messageElem.style.display = "none";
        return _this._boardElem.style.display = "block";
      };
    })(this), 500);
  };

  Board.prototype.getCurrentRule = function() {
    return this._RuleMatcher.getCurrentRule();
  };

  Board.prototype._generateRows = function() {
    var i, ref, results, row;
    this._buildTopRow();
    results = [];
    for (row = i = 2, ref = this._boardNoCellsHigh; 2 <= ref ? i <= ref : i >= ref; row = 2 <= ref ? ++i : --i) {
      this._currentRow = row;
      results.push(this._buildRow(row));
    }
    return results;
  };

  Board.prototype._buildRow = function(row) {
    var col, i, oneIndex, ref, twoIndex, zeroIndex;
    for (col = i = 1, ref = this._boardNoCellsWide; 1 <= ref ? i <= ref : i >= ref; col = 1 <= ref ? ++i : --i) {
      zeroIndex = this._currentCells[row - 1][col - 1];
      if (zeroIndex === void 0) {
        zeroIndex = this._currentCells[row - 1][this._boardNoCellsWide];
      }
      oneIndex = this._currentCells[row - 1][col];
      twoIndex = this._currentCells[row - 1][col + 1];
      if (twoIndex === void 0) {
        twoIndex = this._currentCells[row - 1][1];
      }
      if (this._RuleMatcher.match(zeroIndex, oneIndex, twoIndex) === 0) {
        this._getCellHtml(row, col, false);
      } else {
        this._getCellHtml(row, col, true);
      }
    }
    return this._currentRow++;
  };

  Board.prototype._buildTopRow = function() {
    var cell, col, i, ref;
    for (col = i = 1, ref = this._boardNoCellsWide; 1 <= ref ? i <= ref : i >= ref; col = 1 <= ref ? ++i : --i) {
      cell = this._rootRowBinary[col];
      if (cell === 1) {
        this._getCellHtml(this._currentRow, col, true);
      } else {
        this._getCellHtml(this._currentRow, col, false);
      }
    }
    return this._currentRow++;
  };

  Board.prototype._getCellHtml = function(row, col, active) {
    var tmpCell, tmpClass, tmpID, tmpLeftPx, tmpTopPx;
    if (!this._currentCells[row]) {
      this._currentCells[row] = [];
    }
    this._currentCells[row][col] = active ? 1 : 0;
    tmpID = this._cellIDPrefix + this._currentRow + "_" + col;
    tmpLeftPx = (col - 1) * this._boardCellWidthPx;
    tmpTopPx = (row - 1) * this._boardCellHeightPx;
    tmpCell = document.createElement('div');
    tmpCell.setAttribute('id', tmpID);
    tmpCell.style.top = tmpTopPx + "px";
    tmpCell.style.left = tmpLeftPx + "px";
    tmpClass = this._cellBaseClass;
    if (active) {
      tmpClass += " " + this._cellActiveClass;
    }
    tmpCell.setAttribute('class', "" + tmpClass);
    return this._boardElem.appendChild(tmpCell);
  };

  return Board;

})();

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/*

The Generator for the Cellular Automata GENerator (CAGEN).

@author Destin Moulton
@git https://github.com/destinmoulton/cagen
@license MIT

Component of Cellular Automata Generator (CAGEN)

Functionality for building the generator for
controlling the cellular automata generation.

- Display a preview of the rules.
- Display the generated board.
 */
var Generator;

Generator = (function() {
  function Generator(VariablesInstance) {
    this._Vars = VariablesInstance;
    this._$cagenContainer = this._Vars.jMainContainer;
    this.dashboardTemplateHtml = $(DOM.getID('template', 'dashboard_main')).html();
    this.cellBoardHtml = $(DOM.getID('template', 'dashboard_board')).html();
    this._idPreviewCellPrefix = "#cagen-dash-preview-";
    this._idPreviewDigitPrefix = "#cagen-dash-preview-digit-";
    this._currentRule = 0;
    this._previewBoxWidth = 40;
    this._noBoardColumns = 151;
    this._noBoardRows = 75;
    this._ruleList = [];
    radio('dashboard.run').subscribe((function(_this) {
      return function() {
        _this.run();
      };
    })(this));
  }

  Generator.prototype.run = function() {
    var i, rule, tmpOption;
    this._$cagenContainer.html(Mustache.render(this.dashboardTemplateHtml, {}));
    this._jInputSelectRule = $(DOM.getID('dashboard', 'rule_dropdown'));
    this._Board = new Board(this._Vars);
    for (rule = i = 0; i <= 255; rule = ++i) {
      tmpOption = "<option value='" + rule + "'>" + rule + "</option>";
      this._jInputSelectRule.append(tmpOption);
    }
    this._jInputSelectRule.val(this._Vars.currentRule);
    this._jInputSelectRule.change((function(_this) {
      return function(event) {
        return _this._changeRuleEvent(event);
      };
    })(this));
    $(DOM.getID('dashboard', 'rule_generate_button')).click((function(_this) {
      return function(event) {
        return _this._generateButtonClicked(event);
      };
    })(this));
    this._buildBoard();
    return true;
  };

  Generator.prototype._generateButtonClicked = function(event) {
    return this._buildBoard();
  };

  Generator.prototype._changeRuleEvent = function(event) {
    return radio('rules.set.currentrule').broadcast(this._jInputSelectRule.val());
  };

  Generator.prototype._buildBoard = function() {
    $(DOM.getID('dashboard', 'content')).html(Mustache.render(this.cellBoardHtml, {}));
    this._$rulesContainer = $(DOM.getID('dashboard', 'rule_bitset_container'));
    this._Board.buildBoard(this._Vars.getTopRowBinary(), this._noBoardColumns, this._noBoardRows);
    this._buildRulePreview();
    return true;
  };

  Generator.prototype._buildRulePreview = function() {
    var activeClass, binary, currentRule, i, index, jTmpCell, jTmpDigit, left, leftBit, middleBit, previewCellHtml, rendered, results, rightBit, tmplOptions;
    currentRule = this._Board.getCurrentRule();
    previewCellHtml = $(DOM.getID('template', 'dashboard_rule_preview_cell')).html();
    activeClass = this._$rulesContainer.html("");
    results = [];
    for (index = i = 7; i >= 0; index = --i) {
      binary = index.toString(2);
      if (binary.length === 2) {
        binary = "0" + binary;
      } else if (binary.length === 1) {
        binary = "00" + binary;
      }
      leftBit = false;
      middleBit = false;
      rightBit = false;
      if (binary.charAt(0) === "1") {
        leftBit = true;
      }
      if (binary.charAt(1) === "1") {
        middleBit = true;
      }
      if (binary.charAt(2) === "1") {
        rightBit = true;
      }
      left = (7 - index) * this._previewBoxWidth;
      tmplOptions = {
        left: left,
        previewIndex: index,
        leftBitActive: leftBit,
        middleBitActive: middleBit,
        rightBitActive: rightBit
      };
      rendered = Mustache.render(previewCellHtml, tmplOptions);
      this._$rulesContainer.append(rendered);
      jTmpCell = $(this._idPreviewCellPrefix + index);
      jTmpDigit = $(this._idPreviewDigitPrefix + index);
      jTmpCell.removeClass(DOM.getClass('dashboard', 'rule_preview_cell_active'));
      jTmpDigit.html(0);
      if (currentRule.substr(7 - index, 1) === "1") {
        jTmpCell.addClass(DOM.getClass('dashboard', 'rule_preview_cell_active'));
        results.push(jTmpDigit.html(1));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  return Generator;

})();

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/*
RuleMatcher.coffee

@author Destin Moulton
@git https://github.com/destinmoulton/cagen
@license MIT

Component of Cellular Automata Generator (CAGEN)

The rule is a binary string. Each 1 in the binary string
represents a rule to-be-followed in the next row of
generated blocks.

There are 255 rules of 8 block positions.

Rule 0 Example:
111 110 101 100 011 010 001 000
 0   0   0   0   0   0   0   0

Rule 20 Example:
111 110 101 100 011 010 001 000
 0   0   1   0   1   0   0   0

Rule 255 Example:
111 110 101 100 011 010 001 000
 1   1   1   1   1   1   1   1

The position of filled cells on the top row determines
the composition of the next row and so on.
 */
var RuleMatcher;

RuleMatcher = (function() {
  function RuleMatcher() {
    this._binaryRule = "";
    this._patterns = ['111', '110', '101', '100', '011', '010', '001', '000'];
  }

  RuleMatcher.prototype.setCurrentRule = function(decimalRule) {
    return this._binaryRule = this._decToBinary(decimalRule);
  };

  RuleMatcher.prototype.getCurrentRule = function() {
    return this._binaryRule;
  };

  RuleMatcher.prototype.match = function(zeroIndex, oneIndex, twoIndex) {
    var foundPatternIndex, patternToFind;
    patternToFind = "" + zeroIndex + oneIndex + twoIndex;
    foundPatternIndex = this._patterns.indexOf(patternToFind);
    return parseInt(this._binaryRule.substr(foundPatternIndex, 1));
  };

  RuleMatcher.prototype._decToBinary = function(decValue) {
    var binary, i, length, num, ref;
    binary = (parseInt(decValue)).toString(2);
    length = binary.length;
    if (length < 8) {
      for (num = i = ref = length; ref <= 7 ? i <= 7 : i >= 7; num = ref <= 7 ? ++i : --i) {
        binary = "0" + binary;
      }
    }
    return binary;
  };

  return RuleMatcher;

})();

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUnVsZU1hdGNoZXIuanMiLCJzb3VyY2VzIjpbIlJ1bGVNYXRjaGVyLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUE7O0FBZ0NNO0VBTVcscUJBQUE7SUFDVCxJQUFDLENBQUEsV0FBRCxHQUFlO0lBQ2YsSUFBQyxDQUFBLFNBQUQsR0FBYSxDQUNULEtBRFMsRUFFVCxLQUZTLEVBR1QsS0FIUyxFQUlULEtBSlMsRUFLVCxLQUxTLEVBTVQsS0FOUyxFQU9ULEtBUFMsRUFRVCxLQVJTO0VBRko7O3dCQWdCYixjQUFBLEdBQWdCLFNBQUMsV0FBRDtXQUlaLElBQUMsQ0FBQSxXQUFELEdBQWUsSUFBQyxDQUFBLFlBQUQsQ0FBYyxXQUFkO0VBSkg7O3dCQVdoQixjQUFBLEdBQWdCLFNBQUE7QUFDWixXQUFPLElBQUMsQ0FBQTtFQURJOzt3QkFPaEIsS0FBQSxHQUFPLFNBQUMsU0FBRCxFQUFZLFFBQVosRUFBc0IsUUFBdEI7QUFFSCxRQUFBO0lBQUEsYUFBQSxHQUFnQixFQUFBLEdBQUcsU0FBSCxHQUFlLFFBQWYsR0FBMEI7SUFFMUMsaUJBQUEsR0FBb0IsSUFBQyxDQUFBLFNBQVMsQ0FBQyxPQUFYLENBQW1CLGFBQW5CO0FBR3BCLFdBQU8sUUFBQSxDQUFTLElBQUMsQ0FBQSxXQUFXLENBQUMsTUFBYixDQUFvQixpQkFBcEIsRUFBc0MsQ0FBdEMsQ0FBVDtFQVBKOzt3QkFjUCxZQUFBLEdBQWMsU0FBQyxRQUFEO0FBRVYsUUFBQTtJQUFBLE1BQUEsR0FBUyxDQUFDLFFBQUEsQ0FBUyxRQUFULENBQUQsQ0FBb0IsQ0FBQyxRQUFyQixDQUE4QixDQUE5QjtJQUNULE1BQUEsR0FBUyxNQUFNLENBQUM7SUFFaEIsSUFBRyxNQUFBLEdBQVMsQ0FBWjtBQUVJLFdBQVcsOEVBQVg7UUFDSSxNQUFBLEdBQVMsR0FBQSxHQUFJO0FBRGpCLE9BRko7O0FBS0EsV0FBTztFQVZHIiwic291cmNlc0NvbnRlbnQiOlsiIyMjXG5SdWxlTWF0Y2hlci5jb2ZmZWVcblxuQGF1dGhvciBEZXN0aW4gTW91bHRvblxuQGdpdCBodHRwczovL2dpdGh1Yi5jb20vZGVzdGlubW91bHRvbi9jYWdlblxuQGxpY2Vuc2UgTUlUXG5cbkNvbXBvbmVudCBvZiBDZWxsdWxhciBBdXRvbWF0YSBHZW5lcmF0b3IgKENBR0VOKVxuXG5UaGUgcnVsZSBpcyBhIGJpbmFyeSBzdHJpbmcuIEVhY2ggMSBpbiB0aGUgYmluYXJ5IHN0cmluZ1xucmVwcmVzZW50cyBhIHJ1bGUgdG8tYmUtZm9sbG93ZWQgaW4gdGhlIG5leHQgcm93IG9mXG5nZW5lcmF0ZWQgYmxvY2tzLlxuXG5UaGVyZSBhcmUgMjU1IHJ1bGVzIG9mIDggYmxvY2sgcG9zaXRpb25zLlxuXG5SdWxlIDAgRXhhbXBsZTpcbjExMSAxMTAgMTAxIDEwMCAwMTEgMDEwIDAwMSAwMDBcbiAwICAgMCAgIDAgICAwICAgMCAgIDAgICAwICAgMFxuXG5SdWxlIDIwIEV4YW1wbGU6XG4xMTEgMTEwIDEwMSAxMDAgMDExIDAxMCAwMDEgMDAwXG4gMCAgIDAgICAxICAgMCAgIDEgICAwICAgMCAgIDBcblxuUnVsZSAyNTUgRXhhbXBsZTpcbjExMSAxMTAgMTAxIDEwMCAwMTEgMDEwIDAwMSAwMDBcbiAxICAgMSAgIDEgICAxICAgMSAgIDEgICAxICAgMVxuXG5UaGUgcG9zaXRpb24gb2YgZmlsbGVkIGNlbGxzIG9uIHRoZSB0b3Agcm93IGRldGVybWluZXNcbnRoZSBjb21wb3NpdGlvbiBvZiB0aGUgbmV4dCByb3cgYW5kIHNvIG9uLlxuXG4jIyNcblxuY2xhc3MgUnVsZU1hdGNoZXJcbiAgICBcbiAgICAjXG4gICAgIyBTZXR1cCB0aGUgbG9jYWwgdmFyaWFibGVzXG4gICAgIyBAY29uc3RydWN0b3JcbiAgICAjIFxuICAgIGNvbnN0cnVjdG9yOiAoKS0+XG4gICAgICAgIEBfYmluYXJ5UnVsZSA9IFwiXCJcbiAgICAgICAgQF9wYXR0ZXJucyA9IFtcbiAgICAgICAgICAgICcxMTEnLFxuICAgICAgICAgICAgJzExMCcsXG4gICAgICAgICAgICAnMTAxJyxcbiAgICAgICAgICAgICcxMDAnLFxuICAgICAgICAgICAgJzAxMScsXG4gICAgICAgICAgICAnMDEwJyxcbiAgICAgICAgICAgICcwMDEnLFxuICAgICAgICAgICAgJzAwMCdcbiAgICAgICAgXVxuXG4gICAgI1xuICAgICMgU2V0IHRoZSBjdXJyZW50IHJ1bGUgZnJvbSBhIGRlY2ltYWwgdmFsdWVcbiAgICAjIFxuICAgIHNldEN1cnJlbnRSdWxlOiAoZGVjaW1hbFJ1bGUpLT5cbiAgICAgICAgIyBUaGUgYmluYXJ5IHJ1bGUgY29udGFpbnMgdGhlIHNlcXVlbmNlIG9mXG4gICAgICAgICMgMCdzIChubyBibG9jaykgYW5kIDEncyAoYmxvY2spIGZvciB0aGVcbiAgICAgICAgIyBuZXh0IHJvdy5cbiAgICAgICAgQF9iaW5hcnlSdWxlID0gQF9kZWNUb0JpbmFyeShkZWNpbWFsUnVsZSlcblxuICAgICNcbiAgICAjIEdldCB0aGUgY3VycmVudGx5IGFjdGl2ZSBydWxlXG4gICAgI1xuICAgICMgQHJldHVybiBzdHJpbmcgQmluYXJ5IHJ1bGVcbiAgICAjIFxuICAgIGdldEN1cnJlbnRSdWxlOiAoKS0+XG4gICAgICAgIHJldHVybiBAX2JpbmFyeVJ1bGVcblxuXG4gICAgI1xuICAgICMgTWF0Y2ggYSBwYXR0ZXJuIGZvciB0aGUgdGhyZWUgYml0IHBvc2l0aW9uc1xuICAgICMgXG4gICAgbWF0Y2g6ICh6ZXJvSW5kZXgsIG9uZUluZGV4LCB0d29JbmRleCktPlxuICAgICAgICAjIE1hdGNoIHRocmVlIGNlbGxzIHdpdGhpblxuICAgICAgICBwYXR0ZXJuVG9GaW5kID0gXCIje3plcm9JbmRleH0je29uZUluZGV4fSN7dHdvSW5kZXh9XCJcblxuICAgICAgICBmb3VuZFBhdHRlcm5JbmRleCA9IEBfcGF0dGVybnMuaW5kZXhPZihwYXR0ZXJuVG9GaW5kKVxuXG4gICAgICAgICMgUmV0dXJuIHRoZSBiaW5hcnkgcnVsZSdzIDAgb3IgMSBtYXBwaW5nXG4gICAgICAgIHJldHVybiBwYXJzZUludChAX2JpbmFyeVJ1bGUuc3Vic3RyKGZvdW5kUGF0dGVybkluZGV4LDEpKVxuXG4gICAgI1xuICAgICMgQ29udmVydCBhIGRlY2ltYWwgdmFsdWUgdG8gaXRzIGJpbmFyeSByZXByZXNlbnRhdGlvblxuICAgICNcbiAgICAjIEByZXR1cm4gc3RyaW5nIEJpbmFyeSBydWxlXG4gICAgIyBcbiAgICBfZGVjVG9CaW5hcnk6IChkZWNWYWx1ZSktPlxuICAgICAgICAjIEdlbmVyYXRlIHRoZSBiaW5hcnkgc3RyaW5nIGZyb20gdGhlIGRlY2ltYWxcbiAgICAgICAgYmluYXJ5ID0gKHBhcnNlSW50KGRlY1ZhbHVlKSkudG9TdHJpbmcoMilcbiAgICAgICAgbGVuZ3RoID0gYmluYXJ5Lmxlbmd0aFxuXG4gICAgICAgIGlmIGxlbmd0aCA8IDhcbiAgICAgICAgICAgICMgUGFkIHRoZSBiaW5hcnkgcmVwcmVzZW5hdGlvbiB3aXRoIGxlYWRpbmcgMCdzXG4gICAgICAgICAgICBmb3IgbnVtIGluIFtsZW5ndGguLjddXG4gICAgICAgICAgICAgICAgYmluYXJ5ID0gXCIwI3tiaW5hcnl9XCJcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgcmV0dXJuIGJpbmFyeVxuIl19


/*

Generate the Rule Thumbnails for CAGEN and the event
handler for when a rule thumbnail is clicked.

@author Destin Moulton
@git https://github.com/destinmoulton/cagen
@license MIT

Component of Cellular Automata GENerator (CAGEN)


Each rule has a thumbnail. The user can click the thumbnail
to generate the Automata for that rule.
 */
var RuleThumbnails;

RuleThumbnails = (function() {
  function RuleThumbnails(VariablesInstance) {
    this._Vars = VariablesInstance;
    this._idTmplRuleThumbnails = "#tmpl-cagen-rulethumbnails";
    this._classRuleThumbBox = ".cagen-rulethumb-box";
    radio('rulethumbnails.show').subscribe((function(_this) {
      return function() {
        _this.show();
      };
    })(this));
  }

  RuleThumbnails.prototype.show = function() {
    var i, rendered, results, thumbnailHTML;
    this._ruleList = (function() {
      results = [];
      for (i = 0; i <= 255; i++){ results.push(i); }
      return results;
    }).apply(this);
    thumbnailHTML = $(this._idTmplRuleThumbnails).html();
    rendered = Mustache.render(thumbnailHTML, {
      ruleList: this._ruleList
    });
    this._Vars.jMainContainer.html(rendered);
    return $(this._classRuleThumbBox).click((function(_this) {
      return function(event) {
        return _this._ruleThumbBoxClicked(event);
      };
    })(this));
  };

  RuleThumbnails.prototype._ruleThumbBoxClicked = function(event) {
    var jBox, rule;
    jBox = $(event.currentTarget);
    rule = jBox.data('rule');
    radio('rules.set.currentrule').broadcast(rule);
    return radio('tabs.show.dashboard').broadcast();
  };

  return RuleThumbnails;

})();

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUnVsZVRodW1ibmFpbHMuanMiLCJzb3VyY2VzIjpbIlJ1bGVUaHVtYm5haWxzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUE7O0FBaUJNO0VBS1csd0JBQUMsaUJBQUQ7SUFDVCxJQUFDLENBQUEsS0FBRCxHQUFTO0lBRVQsSUFBQyxDQUFBLHFCQUFELEdBQXlCO0lBQ3pCLElBQUMsQ0FBQSxrQkFBRCxHQUFzQjtJQUV0QixLQUFBLENBQU0scUJBQU4sQ0FBNEIsQ0FBQyxTQUE3QixDQUNJLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQTtRQUNJLEtBQUMsQ0FBQSxJQUFELENBQUE7TUFESjtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FESjtFQU5TOzsyQkFlYixJQUFBLEdBQU0sU0FBQTtBQUVGLFFBQUE7SUFBQSxJQUFDLENBQUEsU0FBRCxHQUFhOzs7OztJQUdiLGFBQUEsR0FBZ0IsQ0FBQSxDQUFFLElBQUMsQ0FBQSxxQkFBSCxDQUF5QixDQUFDLElBQTFCLENBQUE7SUFDaEIsUUFBQSxHQUFXLFFBQVEsQ0FBQyxNQUFULENBQWdCLGFBQWhCLEVBQStCO01BQUMsUUFBQSxFQUFTLElBQUMsQ0FBQSxTQUFYO0tBQS9CO0lBQ1gsSUFBQyxDQUFBLEtBQUssQ0FBQyxjQUFjLENBQUMsSUFBdEIsQ0FBMkIsUUFBM0I7V0FHQSxDQUFBLENBQUUsSUFBQyxDQUFBLGtCQUFILENBQXNCLENBQUMsS0FBdkIsQ0FBNkIsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLEtBQUQ7ZUFBUyxLQUFDLENBQUEsb0JBQUQsQ0FBc0IsS0FBdEI7TUFBVDtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBN0I7RUFWRTs7MkJBZ0JOLG9CQUFBLEdBQXFCLFNBQUMsS0FBRDtBQUVqQixRQUFBO0lBQUEsSUFBQSxHQUFPLENBQUEsQ0FBRSxLQUFLLENBQUMsYUFBUjtJQUVQLElBQUEsR0FBTyxJQUFJLENBQUMsSUFBTCxDQUFVLE1BQVY7SUFHUCxLQUFBLENBQU0sdUJBQU4sQ0FBOEIsQ0FBQyxTQUEvQixDQUF5QyxJQUF6QztXQUdBLEtBQUEsQ0FBTSxxQkFBTixDQUE0QixDQUFDLFNBQTdCLENBQUE7RUFWaUIiLCJzb3VyY2VzQ29udGVudCI6WyIjIyNcblxuR2VuZXJhdGUgdGhlIFJ1bGUgVGh1bWJuYWlscyBmb3IgQ0FHRU4gYW5kIHRoZSBldmVudFxuaGFuZGxlciBmb3Igd2hlbiBhIHJ1bGUgdGh1bWJuYWlsIGlzIGNsaWNrZWQuXG5cbkBhdXRob3IgRGVzdGluIE1vdWx0b25cbkBnaXQgaHR0cHM6Ly9naXRodWIuY29tL2Rlc3Rpbm1vdWx0b24vY2FnZW5cbkBsaWNlbnNlIE1JVFxuXG5Db21wb25lbnQgb2YgQ2VsbHVsYXIgQXV0b21hdGEgR0VOZXJhdG9yIChDQUdFTilcblxuXG5FYWNoIHJ1bGUgaGFzIGEgdGh1bWJuYWlsLiBUaGUgdXNlciBjYW4gY2xpY2sgdGhlIHRodW1ibmFpbFxudG8gZ2VuZXJhdGUgdGhlIEF1dG9tYXRhIGZvciB0aGF0IHJ1bGUuXG5cbiMjI1xuXG5jbGFzcyBSdWxlVGh1bWJuYWlsc1xuXG4gICAgI1xuICAgICMgU2V0dXAgdGhlIGxvY2FsIHZhcmlhYmxlc1xuICAgICMgXG4gICAgY29uc3RydWN0b3I6IChWYXJpYWJsZXNJbnN0YW5jZSktPlxuICAgICAgICBAX1ZhcnMgPSBWYXJpYWJsZXNJbnN0YW5jZVxuXG4gICAgICAgIEBfaWRUbXBsUnVsZVRodW1ibmFpbHMgPSBcIiN0bXBsLWNhZ2VuLXJ1bGV0aHVtYm5haWxzXCJcbiAgICAgICAgQF9jbGFzc1J1bGVUaHVtYkJveCA9IFwiLmNhZ2VuLXJ1bGV0aHVtYi1ib3hcIlxuXG4gICAgICAgIHJhZGlvKCdydWxldGh1bWJuYWlscy5zaG93Jykuc3Vic2NyaWJlKFxuICAgICAgICAgICAgKCk9PlxuICAgICAgICAgICAgICAgIEBzaG93KClcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgKVxuXG4gICAgI1xuICAgICMgU2hvdyB0aGUgcnVsZSB0aHVtYm5haWxzXG4gICAgIyBcbiAgICBzaG93OiAoKS0+XG4gICAgICAgICMgU2V0dXAgdGhlIGxpc3Qgb2YgcnVsZXNcbiAgICAgICAgQF9ydWxlTGlzdCA9IFswLi4yNTVdXG5cbiAgICAgICAgIyBDbGVhciB0aGUgY3VycmVudCB0aHVtYm5haWxzIGFuZCBwb3B1bGF0ZSBpdCB2aWEgTXVzdGFjaGUgdGVtcGxhdGVcbiAgICAgICAgdGh1bWJuYWlsSFRNTCA9ICQoQF9pZFRtcGxSdWxlVGh1bWJuYWlscykuaHRtbCgpXG4gICAgICAgIHJlbmRlcmVkID0gTXVzdGFjaGUucmVuZGVyKHRodW1ibmFpbEhUTUwsIHtydWxlTGlzdDpAX3J1bGVMaXN0fSlcbiAgICAgICAgQF9WYXJzLmpNYWluQ29udGFpbmVyLmh0bWwocmVuZGVyZWQpXG5cbiAgICAgICAgIyBTZXR1cCBldmVudHMgZm9yIHdoZW4gdGhlIHJ1bGUgdGh1bWJuYWlscyBhcmUgY2xpY2tlZFxuICAgICAgICAkKEBfY2xhc3NSdWxlVGh1bWJCb3gpLmNsaWNrKChldmVudCk9PkBfcnVsZVRodW1iQm94Q2xpY2tlZChldmVudCkpICAgIFxuXG4gICAgI1xuICAgICMgRXZlbnQgaGFuZGxlciBmb3Igd2hlbiBhIHJ1bGUgdGh1bWJuYWlsIGlzIGNsaWNrZWRcbiAgICAjIFNldHMgdGhlIHJ1bGUgYW5kIHN3aXRjaGVzIHRvIHRoZSBnZW5lcmF0b3JcbiAgICAjIFxuICAgIF9ydWxlVGh1bWJCb3hDbGlja2VkOihldmVudCkgLT5cblxuICAgICAgICBqQm94ID0gJChldmVudC5jdXJyZW50VGFyZ2V0KVxuXG4gICAgICAgIHJ1bGUgPSBqQm94LmRhdGEoJ3J1bGUnKVxuXG4gICAgICAgICMgQ2hhbmdlIHRoZSBjdXJyZW50IHJ1bGVcbiAgICAgICAgcmFkaW8oJ3J1bGVzLnNldC5jdXJyZW50cnVsZScpLmJyb2FkY2FzdChydWxlKVxuXG4gICAgICAgICMgU2hvdyB0aGUgZGFzaGJvYXJkIHZpYSByYWRpbyBwdWIvc3ViIGJyb2FkY2FzdFxuICAgICAgICByYWRpbygndGFicy5zaG93LmRhc2hib2FyZCcpLmJyb2FkY2FzdCgpO1xuXG4iXX0=


/*

The tabbed interface handler.

@author Destin Moulton
@git https://github.com/destinmoulton/cagen
@license MIT

Component of Cellular Automata GENerator (CAGEN)


Manage the tabs for the various CAGEN features.
 */
var Tabs;

Tabs = (function() {
  function Tabs(VariablesInstance) {
    this._Vars = VariablesInstance;
    this._classActive = "active";
    this._idRuleThumbnailsTab = "#tab-rulethumbnails";
    this._idTopRowEditorTab = "#tab-toproweditor";
    this._idDashboardTab = "#tab-dashboard";
    this._tabIdPrefix = "#tab-";
    this._tabs = ["rulethumbnails", "toproweditor", "dashboard"];
  }

  Tabs.prototype.start = function() {
    this.showRuleThumbnailsTab();
    radio('tabs.show.rulethumbnails').subscribe((function(_this) {
      return function() {
        return _this.showRuleThumbnailsTab();
      };
    })(this));
    radio('tabs.show.toproweditor').subscribe((function(_this) {
      return function() {
        return _this.showTopRowEditorTab();
      };
    })(this));
    radio('tabs.show.dashboard').subscribe((function(_this) {
      return function() {
        return _this.showDashboardTab();
      };
    })(this));
    $(this._idRuleThumbnailsTab).click(function(event) {
      radio('tabs.show.rulethumbnails').broadcast();
    });
    $(this._idTopRowEditorTab).click(function(event) {
      radio('tabs.show.toproweditor').broadcast();
    });
    return $(this._idDashboardTab).click(function(event) {
      radio('tabs.show.dashboard').broadcast();
    });
  };

  Tabs.prototype.activate = function(tabName) {
    var i, len, ref, tab;
    ref = this._tabs;
    for (i = 0, len = ref.length; i < len; i++) {
      tab = ref[i];
      $(this._tabIdPrefix + tab).removeClass(this._classActive);
    }
    return $(this._tabIdPrefix + tabName).addClass(this._classActive);
  };

  Tabs.prototype.showRuleThumbnailsTab = function() {
    this.activate('rulethumbnails');
    return radio('rulethumbnails.show').broadcast();
  };

  Tabs.prototype.showTopRowEditorTab = function() {
    this.activate('toproweditor');
    return radio('toproweditor.run').broadcast();
  };

  Tabs.prototype.showDashboardTab = function() {
    this.activate('dashboard');
    return radio('dashboard.run').broadcast();
  };

  return Tabs;

})();

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFicy5qcyIsInNvdXJjZXMiOlsiVGFicy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQTs7QUFlTTtFQU1XLGNBQUMsaUJBQUQ7SUFDVCxJQUFDLENBQUEsS0FBRCxHQUFTO0lBRVQsSUFBQyxDQUFBLFlBQUQsR0FBZ0I7SUFFaEIsSUFBQyxDQUFBLG9CQUFELEdBQXdCO0lBQ3hCLElBQUMsQ0FBQSxrQkFBRCxHQUFzQjtJQUN0QixJQUFDLENBQUEsZUFBRCxHQUFtQjtJQUNuQixJQUFDLENBQUEsWUFBRCxHQUFnQjtJQUNoQixJQUFDLENBQUEsS0FBRCxHQUFTLENBQ0wsZ0JBREssRUFFTCxjQUZLLEVBR0wsV0FISztFQVRBOztpQkFrQmIsS0FBQSxHQUFNLFNBQUE7SUFFRixJQUFDLENBQUEscUJBQUQsQ0FBQTtJQUdBLEtBQUEsQ0FBTSwwQkFBTixDQUFpQyxDQUFDLFNBQWxDLENBQTRDLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQTtlQUFJLEtBQUMsQ0FBQSxxQkFBRCxDQUFBO01BQUo7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQTVDO0lBQ0EsS0FBQSxDQUFNLHdCQUFOLENBQStCLENBQUMsU0FBaEMsQ0FBMEMsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFBO2VBQUksS0FBQyxDQUFBLG1CQUFELENBQUE7TUFBSjtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBMUM7SUFDQSxLQUFBLENBQU0scUJBQU4sQ0FBNEIsQ0FBQyxTQUE3QixDQUF1QyxDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUE7ZUFBSSxLQUFDLENBQUEsZ0JBQUQsQ0FBQTtNQUFKO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUF2QztJQUdBLENBQUEsQ0FBRSxJQUFDLENBQUEsb0JBQUgsQ0FBd0IsQ0FBQyxLQUF6QixDQUNJLFNBQUMsS0FBRDtNQUNJLEtBQUEsQ0FBTSwwQkFBTixDQUFpQyxDQUFDLFNBQWxDLENBQUE7SUFESixDQURKO0lBT0EsQ0FBQSxDQUFFLElBQUMsQ0FBQSxrQkFBSCxDQUFzQixDQUFDLEtBQXZCLENBQ0ksU0FBQyxLQUFEO01BQ0ksS0FBQSxDQUFNLHdCQUFOLENBQStCLENBQUMsU0FBaEMsQ0FBQTtJQURKLENBREo7V0FPQSxDQUFBLENBQUUsSUFBQyxDQUFBLGVBQUgsQ0FBbUIsQ0FBQyxLQUFwQixDQUNJLFNBQUMsS0FBRDtNQUNJLEtBQUEsQ0FBTSxxQkFBTixDQUE0QixDQUFDLFNBQTdCLENBQUE7SUFESixDQURKO0VBeEJFOztpQkFpQ04sUUFBQSxHQUFVLFNBQUMsT0FBRDtBQUNOLFFBQUE7QUFBQTtBQUFBLFNBQUEscUNBQUE7O01BQ0ksQ0FBQSxDQUFFLElBQUMsQ0FBQSxZQUFELEdBQWMsR0FBaEIsQ0FBb0IsQ0FBQyxXQUFyQixDQUFpQyxJQUFDLENBQUEsWUFBbEM7QUFESjtXQUdBLENBQUEsQ0FBRSxJQUFDLENBQUEsWUFBRCxHQUFjLE9BQWhCLENBQXdCLENBQUMsUUFBekIsQ0FBa0MsSUFBQyxDQUFBLFlBQW5DO0VBSk07O2lCQVNWLHFCQUFBLEdBQXNCLFNBQUE7SUFFbEIsSUFBQyxDQUFBLFFBQUQsQ0FBVSxnQkFBVjtXQUVBLEtBQUEsQ0FBTSxxQkFBTixDQUE0QixDQUFDLFNBQTdCLENBQUE7RUFKa0I7O2lCQVN0QixtQkFBQSxHQUFvQixTQUFBO0lBRWhCLElBQUMsQ0FBQSxRQUFELENBQVUsY0FBVjtXQUVBLEtBQUEsQ0FBTSxrQkFBTixDQUF5QixDQUFDLFNBQTFCLENBQUE7RUFKZ0I7O2lCQVVwQixnQkFBQSxHQUFpQixTQUFBO0lBRWIsSUFBQyxDQUFBLFFBQUQsQ0FBVSxXQUFWO1dBRUEsS0FBQSxDQUFNLGVBQU4sQ0FBc0IsQ0FBQyxTQUF2QixDQUFBO0VBSmEiLCJzb3VyY2VzQ29udGVudCI6WyIjIyNcblxuVGhlIHRhYmJlZCBpbnRlcmZhY2UgaGFuZGxlci5cblxuQGF1dGhvciBEZXN0aW4gTW91bHRvblxuQGdpdCBodHRwczovL2dpdGh1Yi5jb20vZGVzdGlubW91bHRvbi9jYWdlblxuQGxpY2Vuc2UgTUlUXG5cbkNvbXBvbmVudCBvZiBDZWxsdWxhciBBdXRvbWF0YSBHRU5lcmF0b3IgKENBR0VOKVxuXG5cbk1hbmFnZSB0aGUgdGFicyBmb3IgdGhlIHZhcmlvdXMgQ0FHRU4gZmVhdHVyZXMuXG5cbiMjI1xuXG5jbGFzcyBUYWJzXG4gICAgXG4gICAgI1xuICAgICMgU2V0dXAgdGhlIGxvY2FsIHNoYXJlZCB2YXJpYWJsZXNcbiAgICAjIEBjb25zdHJ1Y3RvclxuICAgICMgXG4gICAgY29uc3RydWN0b3I6IChWYXJpYWJsZXNJbnN0YW5jZSktPlxuICAgICAgICBAX1ZhcnMgPSBWYXJpYWJsZXNJbnN0YW5jZVxuICAgICAgICBcbiAgICAgICAgQF9jbGFzc0FjdGl2ZSA9IFwiYWN0aXZlXCJcblxuICAgICAgICBAX2lkUnVsZVRodW1ibmFpbHNUYWIgPSBcIiN0YWItcnVsZXRodW1ibmFpbHNcIlxuICAgICAgICBAX2lkVG9wUm93RWRpdG9yVGFiID0gXCIjdGFiLXRvcHJvd2VkaXRvclwiXG4gICAgICAgIEBfaWREYXNoYm9hcmRUYWIgPSBcIiN0YWItZGFzaGJvYXJkXCJcbiAgICAgICAgQF90YWJJZFByZWZpeCA9IFwiI3RhYi1cIlxuICAgICAgICBAX3RhYnMgPSBbXG4gICAgICAgICAgICBcInJ1bGV0aHVtYm5haWxzXCIsXG4gICAgICAgICAgICBcInRvcHJvd2VkaXRvclwiLFxuICAgICAgICAgICAgXCJkYXNoYm9hcmRcIlxuICAgICAgICAgICAgXVxuXG4gICAgI1xuICAgICMgU3RhcnQgdGhlIHRhYmJlZCBpbnRlcmZhY2VcbiAgICAjIFxuICAgIHN0YXJ0OigpLT5cbiAgICAgICAgIyBTaG93IHRoZSBydWxlIHRodW1ibmFpbHMgZmlyc3RcbiAgICAgICAgQHNob3dSdWxlVGh1bWJuYWlsc1RhYigpXG5cbiAgICAgICAgIyBDcmVhdGUgdGhlIHJhZGlvanMgc3Vic2NyaXB0aW9ucyBmb3IgdGhlIGxvY2FsIGZ1bmN0aW9uc1xuICAgICAgICByYWRpbygndGFicy5zaG93LnJ1bGV0aHVtYm5haWxzJykuc3Vic2NyaWJlKCgpPT5Ac2hvd1J1bGVUaHVtYm5haWxzVGFiKCkpXG4gICAgICAgIHJhZGlvKCd0YWJzLnNob3cudG9wcm93ZWRpdG9yJykuc3Vic2NyaWJlKCgpPT5Ac2hvd1RvcFJvd0VkaXRvclRhYigpKVxuICAgICAgICByYWRpbygndGFicy5zaG93LmRhc2hib2FyZCcpLnN1YnNjcmliZSgoKT0+QHNob3dEYXNoYm9hcmRUYWIoKSlcblxuICAgICAgICAjIFJ1bGUgVGh1bWJuYWlscyB0YWIgY2xpY2tlZCBldmVudFxuICAgICAgICAkKEBfaWRSdWxlVGh1bWJuYWlsc1RhYikuY2xpY2soXG4gICAgICAgICAgICAoZXZlbnQpLT5cbiAgICAgICAgICAgICAgICByYWRpbygndGFicy5zaG93LnJ1bGV0aHVtYm5haWxzJykuYnJvYWRjYXN0KClcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgKVxuXG4gICAgICAgICMgQ2xpY2sgdGhlIFRvcCBSb3cgRWRpdG9yIFRhYlxuICAgICAgICAkKEBfaWRUb3BSb3dFZGl0b3JUYWIpLmNsaWNrKFxuICAgICAgICAgICAgKGV2ZW50KS0+XG4gICAgICAgICAgICAgICAgcmFkaW8oJ3RhYnMuc2hvdy50b3Byb3dlZGl0b3InKS5icm9hZGNhc3QoKVxuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICApXG5cbiAgICAgICAgIyBDbGljayB0aGUgRGFzaGJvYXJkIHRhYlxuICAgICAgICAkKEBfaWREYXNoYm9hcmRUYWIpLmNsaWNrKFxuICAgICAgICAgICAgKGV2ZW50KS0+XG4gICAgICAgICAgICAgICAgcmFkaW8oJ3RhYnMuc2hvdy5kYXNoYm9hcmQnKS5icm9hZGNhc3QoKVxuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICApXG5cbiAgICAjXG4gICAgIyBBY3RpdmF0ZSBhIHRhYiB2aWEgc3RyaW5nIG5hbWVcbiAgICAjIFxuICAgIGFjdGl2YXRlOiAodGFiTmFtZSktPlxuICAgICAgICBmb3IgdGFiIGluIEBfdGFic1xuICAgICAgICAgICAgJChAX3RhYklkUHJlZml4K3RhYikucmVtb3ZlQ2xhc3MoQF9jbGFzc0FjdGl2ZSlcblxuICAgICAgICAkKEBfdGFiSWRQcmVmaXgrdGFiTmFtZSkuYWRkQ2xhc3MoQF9jbGFzc0FjdGl2ZSlcblxuICAgICNcbiAgICAjIFNob3cgdGhlIFJ1bGUgVGh1bWJuYWlscyB0YWJcbiAgICAjIFxuICAgIHNob3dSdWxlVGh1bWJuYWlsc1RhYjooKSAtPlxuICAgICAgICAjIEFjdGl2YXRlIHRoZSB0YWJcbiAgICAgICAgQGFjdGl2YXRlKCdydWxldGh1bWJuYWlscycpXG5cbiAgICAgICAgcmFkaW8oJ3J1bGV0aHVtYm5haWxzLnNob3cnKS5icm9hZGNhc3QoKVxuXG4gICAgI1xuICAgICMgU2hvdyB0aGUgVG9wIFJvdyBFZGl0b3IgdGFiXG4gICAgIyBcbiAgICBzaG93VG9wUm93RWRpdG9yVGFiOigpIC0+XG4gICAgICAgICMgQWN0aXZhdGUgdGhlIHRhYlxuICAgICAgICBAYWN0aXZhdGUoJ3RvcHJvd2VkaXRvcicpXG5cbiAgICAgICAgcmFkaW8oJ3RvcHJvd2VkaXRvci5ydW4nKS5icm9hZGNhc3QoKVxuICAgICAgICBcblxuICAgICNcbiAgICAjIFNob3cgdGhlIERhc2hib2FyZCB0YWJcbiAgICAjIFxuICAgIHNob3dEYXNoYm9hcmRUYWI6KCkgLT5cbiAgICAgICAgIyBBY3RpdmF0ZSB0aGUgdGFiXG4gICAgICAgIEBhY3RpdmF0ZSgnZGFzaGJvYXJkJylcblxuICAgICAgICByYWRpbygnZGFzaGJvYXJkLnJ1bicpLmJyb2FkY2FzdCgpXG5cbiJdfQ==


/*

The top/root row editor for CAGEN.

@author Destin Moulton
@git https://github.com/destinmoulton/cagen
@license MIT

Component of Cellular Automata GENerator (CAGEN)


The user can edit the top/root row, allowing them to "seed"
the generator to test configurations and create new variations
on the standard NKS version.
 */
var TopRowEditor,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

TopRowEditor = (function() {
  function TopRowEditor(VariablesInstance) {
    this._toggleEditorCell = bind(this._toggleEditorCell, this);
    this._moveSlider = bind(this._moveSlider, this);
    this._Vars = VariablesInstance;
    this._editorCellsElems = [];
    this._aRowBinary = [];
    this._noColumns = 151;
    this._colWidth = 5;
    this._rowHeight = 5;
    this._sliderLeft = 0;
    this._sliderCols = 26;
    this._sliderPxToMid = (this._sliderCols / 2) * this._colWidth;
    this._editorCellWidth = 29;
    this._totalWidth = this._colWidth * this._noColumns;
    this._generateInitialBinary();
    radio('toproweditor.run').subscribe((function(_this) {
      return function() {
        _this.run();
      };
    })(this));
  }

  TopRowEditor.prototype.run = function() {
    var cagenMainElem, dashboardHTML, isSliderInDragMode, sliderArrowLeftElem, sliderArrowRightElem, sliderContainerElem;
    dashboardHTML = DOM.elemById('TOPROWEDITOR', 'TEMPLATE_TOPROWEDITOR').innerHTML;
    cagenMainElem = DOM.elemById('CAGEN', 'MAIN_CONTAINER');
    cagenMainElem.innerHTML = Mustache.render(dashboardHTML, {});
    sliderContainerElem = DOM.elemById('TOPROWEDITOR', 'SLIDER_CONTAINER');
    sliderContainerElem.style.width = this._totalWidth + "px";
    this._sliderElem = DOM.elemById('TOPROWEDITOR', 'SLIDER');
    this._rowContainerElem = DOM.elemById('TOPROWEDITOR', 'ROW_CONTAINER');
    this._jEditorContainer = DOM.elemById('TOPROWEDITOR', 'EDITOR_CONTAINER');
    this._rowContainerElem.style.height = this._rowHeight + "px";
    this._rowContainerElem.style.width = this._totalWidth + "px";
    this._sliderElem.style.width = (this._colWidth * this._sliderCols) + "px";
    sliderArrowLeftElem = DOM.elemById('TOPROWEDITOR', 'SLIDER_ARROW_LEFT');
    sliderArrowRightElem = DOM.elemById('TOPROWEDITOR', 'SLIDER_ARROW_RIGHT');
    isSliderInDragMode = false;
    this._sliderElem.addEventListener('click', (function(_this) {
      return function() {
        if (isSliderInDragMode) {
          isSliderInDragMode = false;
          sliderArrowLeftElem.style.display = "none";
          return sliderArrowRightElem.style.display = "none";
        } else {
          isSliderInDragMode = true;
          sliderArrowLeftElem.style.display = "block";
          return sliderArrowRightElem.style.display = "block";
        }
      };
    })(this));
    this._sliderElem.addEventListener('mousemove', (function(_this) {
      return function(event) {
        if (isSliderInDragMode) {
          return _this._moveSlider(event);
        }
      };
    })(this));
    this._sliderInitialOffset = this._getOffsetPosition(this._sliderElem);
    this._buildRow();
    this._buildEditorCells();
    this._updateEditorCells(1);
    DOM.elemById('TOPROWEDITOR', 'BUTTON_GENERATE').addEventListener('click', (function(_this) {
      return function() {
        radio('tabs.show.dashboard').broadcast();
      };
    })(this));
    return DOM.elemById('TOPROWEDITOR', 'BUTTON_RESET').addEventListener('click', (function(_this) {
      return function(event) {
        return _this._resetRow(event);
      };
    })(this));
  };

  TopRowEditor.prototype._getOffsetPosition = function(elem) {
    var left, top;
    top = elem.getBoundingClientRect().top + window.pageYOffset;
    left = elem.getBoundingClientRect().left + window.pageXOffset;
    return {
      top: top,
      left: left
    };
  };

  TopRowEditor.prototype._resetRow = function(event) {
    this._generateInitialBinary();
    return this.run();
  };

  TopRowEditor.prototype._moveSlider = function(ev) {
    var adjustedLeft, closestEdgePx, fullWidth, leftCellNo, leftPos, rightPos, xMousePos;
    xMousePos = ev.clientX;
    closestEdgePx = xMousePos - (xMousePos % this._colWidth);
    leftPos = closestEdgePx - this._sliderPxToMid;
    rightPos = closestEdgePx + this._sliderPxToMid + this._colWidth;
    fullWidth = this._totalWidth + this._colWidth;
    adjustedLeft = leftPos + this._sliderInitialOffset.left;
    if (adjustedLeft >= this._sliderInitialOffset.left && rightPos <= fullWidth) {
      this._sliderElem.style.left = adjustedLeft + "px";
      leftCellNo = (leftPos / this._colWidth) + 1;
      return this._updateEditorCells(leftCellNo);
    }
  };

  TopRowEditor.prototype._updateEditorCells = function(beginCell) {
    var cell, cellPos, j, ref, results;
    results = [];
    for (cell = j = 1, ref = this._sliderCols; 1 <= ref ? j <= ref : j >= ref; cell = 1 <= ref ? ++j : --j) {
      cellPos = cell + beginCell - 1;
      this._editorCellsElems[cell].innerHTML = cellPos;
      this._editorCellsElems[cell].setAttribute('data-cellIndex', cellPos);
      if (this._aRowBinary[cellPos] === 1) {
        results.push(this._editorCellsElems[cell].classList.add(DOM.getClass('TOPROWEDITOR', 'EDITOR_CELL_ACTIVE')));
      } else {
        results.push(this._editorCellsElems[cell].classList.remove(DOM.getClass('TOPROWEDITOR', 'EDITOR_CELL_ACTIVE')));
      }
    }
    return results;
  };

  TopRowEditor.prototype._buildEditorCells = function() {
    var cell, cellHtml, cellTemplateHTML, cells, i, j, k, leftPos, ref, ref1, results, tmpId;
    cellTemplateHTML = DOM.elemById('TOPROWEDITOR', 'TEMPLATE_EDITOR_CELL').innerHTML;
    this._jEditorContainer.style.width = (this._sliderCols * this._editorCellWidth) + "px";
    cellHtml = "";
    for (cell = j = 1, ref = this._sliderCols; 1 <= ref ? j <= ref : j >= ref; cell = 1 <= ref ? ++j : --j) {
      tmpId = "editor-cell-" + cell;
      leftPos = (cell - 1) * this._editorCellWidth;
      cellHtml += Mustache.render(cellTemplateHTML, {
        id: tmpId,
        left: leftPos
      });
    }
    this._jEditorContainer.innerHTML = cellHtml;
    cells = document.getElementsByClassName(DOM.getClass('TOPROWEDITOR', 'EDITOR_CELL'));
    results = [];
    for (i = k = 0, ref1 = cells.length - 1; 0 <= ref1 ? k <= ref1 : k >= ref1; i = 0 <= ref1 ? ++k : --k) {
      this._editorCellsElems[i + 1] = cells[i];
      results.push(cells[i].addEventListener('click', this._toggleEditorCell));
    }
    return results;
  };

  TopRowEditor.prototype._toggleEditorCell = function(event) {
    var cellNo, editorCellElem, sliderCellElem, sliderColPrefix;
    editorCellElem = event.target;
    cellNo = editorCellElem.getAttribute('data-cellIndex');
    sliderColPrefix = DOM.getPrefix('TOPROWEDITOR', 'SLIDER_COL');
    sliderCellElem = document.getElementById(sliderColPrefix + cellNo);
    if (this._aRowBinary[cellNo] === 1) {
      this._aRowBinary[cellNo] = 0;
      editorCellElem.classList.remove(DOM.getClass('TOPROWEDITOR', 'EDITOR_CELL_ACTIVE'));
      sliderCellElem.classList.remove(DOM.getClass('TOPROWEDITOR', 'SLIDER_CELL_ACTIVE'));
    } else {
      this._aRowBinary[cellNo] = 1;
      editorCellElem.classList.add(DOM.getClass('TOPROWEDITOR', 'EDITOR_CELL_ACTIVE'));
      sliderCellElem.classList.add(DOM.getClass('TOPROWEDITOR', 'SLIDER_CELL_ACTIVE'));
    }
    return this._Vars.setTopRowBinary(this._aRowBinary);
  };

  TopRowEditor.prototype._generateInitialBinary = function() {
    var col, j, ref, seed_col;
    seed_col = Math.ceil(this._noColumns / 2);
    for (col = j = 1, ref = this._noColumns; 1 <= ref ? j <= ref : j >= ref; col = 1 <= ref ? ++j : --j) {
      if (col === seed_col) {
        this._aRowBinary[col] = 1;
      } else {
        this._aRowBinary[col] = 0;
      }
    }
    return this._Vars.setTopRowBinary(this._aRowBinary);
  };

  TopRowEditor.prototype._buildRow = function() {
    var activeClass, col, j, leftPos, ref, rowHtml, sliderColPrefix, smallcellTemplateHTML, tmpId;
    smallcellTemplateHTML = DOM.elemById('TOPROWEDITOR', 'TEMPLATE_SLIDER_CELL').innerHTML;
    sliderColPrefix = DOM.getPrefix('TOPROWEDITOR', 'SLIDER_COL');
    rowHtml = "";
    for (col = j = 1, ref = this._noColumns; 1 <= ref ? j <= ref : j >= ref; col = 1 <= ref ? ++j : --j) {
      activeClass = "";
      if (this._aRowBinary[col] === 1) {
        activeClass = DOM.getClass('TOPROWEDITOR', 'SLIDER_CELL_ACTIVE');
      }
      leftPos = (col - 1) * this._colWidth;
      tmpId = sliderColPrefix + col;
      rowHtml += Mustache.render(smallcellTemplateHTML, {
        id: tmpId,
        left: leftPos,
        activeClass: activeClass
      });
    }
    return this._rowContainerElem.innerHTML = rowHtml;
  };

  return TopRowEditor;

})();

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/*
Initialize the CAGEN sections and setup the tabs.

@author Destin Moulton
@git https://github.com/destinmoulton/cagen
@license MIT

Component of Cellular Automata Generator (CAGEN)

The jQuery onload function that initializes the various
CAGEN features and starts the tabbed interface.
 */
window.onload = function() {
  var tabs, vars;
  vars = new Variables();
  tabs = new Tabs(vars);
  new RuleThumbnails(vars);
  new TopRowEditor(vars);
  new Generator(vars);
  return tabs.start();
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFpbi5qcyIsInNvdXJjZXMiOlsiTWFpbi5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7QUFjQSxNQUFNLENBQUMsTUFBUCxHQUFnQixTQUFBO0FBQ1osTUFBQTtFQUFBLElBQUEsR0FBVyxJQUFBLFNBQUEsQ0FBQTtFQUdYLElBQUEsR0FBVyxJQUFBLElBQUEsQ0FBSyxJQUFMO0VBR1AsSUFBQSxjQUFBLENBQWUsSUFBZjtFQUdBLElBQUEsWUFBQSxDQUFhLElBQWI7RUFHQSxJQUFBLFNBQUEsQ0FBVSxJQUFWO1NBR0osSUFBSSxDQUFDLEtBQUwsQ0FBQTtBQWhCWSIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuSW5pdGlhbGl6ZSB0aGUgQ0FHRU4gc2VjdGlvbnMgYW5kIHNldHVwIHRoZSB0YWJzLlxuXG5AYXV0aG9yIERlc3RpbiBNb3VsdG9uXG5AZ2l0IGh0dHBzOi8vZ2l0aHViLmNvbS9kZXN0aW5tb3VsdG9uL2NhZ2VuXG5AbGljZW5zZSBNSVRcblxuQ29tcG9uZW50IG9mIENlbGx1bGFyIEF1dG9tYXRhIEdlbmVyYXRvciAoQ0FHRU4pXG5cblRoZSBqUXVlcnkgb25sb2FkIGZ1bmN0aW9uIHRoYXQgaW5pdGlhbGl6ZXMgdGhlIHZhcmlvdXNcbkNBR0VOIGZlYXR1cmVzIGFuZCBzdGFydHMgdGhlIHRhYmJlZCBpbnRlcmZhY2UuXG5cbiMjI1xuXG53aW5kb3cub25sb2FkID0gLT5cbiAgICB2YXJzID0gbmV3IFZhcmlhYmxlcygpXG5cbiAgICAjIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiB0aGUgVGFicyAodmlzdWFsIHNlY3Rpb25hbCBtYW5hZ2VtZW50KVxuICAgIHRhYnMgPSBuZXcgVGFicyh2YXJzKVxuXG4gICAgIyBDcmVhdGUgaW5zdGFuY2Ugb2YgdGhlIFJ1bGUgVGh1bWJuYWlscyBwcmV2aWV3L3NlbGVjdG9yXG4gICAgbmV3IFJ1bGVUaHVtYm5haWxzKHZhcnMpXG5cbiAgICAjIENyZWF0ZSBpbnN0YW5jZSBvZiB0aGUgVG9wIFJvdyBFZGl0b3JcbiAgICBuZXcgVG9wUm93RWRpdG9yKHZhcnMpXG5cbiAgICAjIENyZWF0ZSBpbnN0YW5jZSBvZiB0aGUgRGFzaGJvYXJkXG4gICAgbmV3IEdlbmVyYXRvcih2YXJzKVxuXG4gICAgIyBTdGFydCB0aGUgdGFiIGludGVyZmFjZVxuICAgIHRhYnMuc3RhcnQoKVxuXG4iXX0=
