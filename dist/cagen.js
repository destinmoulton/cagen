
/*

A pub/sub and variable exchange for CAGEN

@author Destin Moulton
@git https://github.com/destinmoulton/cagen
@license MIT

Subscribe and publish to a channel.
Set and get global variables.
 */
var Bus,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Bus = (function() {
  function Bus() {
    this.subscribe = bind(this.subscribe, this);
    this._channels = {};
    this._vault = {};
  }

  Bus.prototype.subscribe = function(channel, callback) {
    if (!this._channels.hasOwnProperty(channel)) {
      this._channels[channel] = [];
    }
    return this._channels[channel].push(callback);
  };

  Bus.prototype.broadcast = function(channel, payload) {
    var i, len, ref, results, subscriber;
    if (this._channels.hasOwnProperty(channel)) {
      ref = this._channels[channel];
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        subscriber = ref[i];
        results.push(subscriber(payload));
      }
      return results;
    }
  };

  Bus.prototype.set = function(name, variable) {
    return this._vault[name] = variable;
  };

  Bus.prototype.get = function(name) {
    if (!this._vault.hasOwnProperty(name)) {
      return console.log("Bus: Unable to find ${name} in vault.");
    } else {
      return this._vault[name];
    }
  };

  return Bus;

})();

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQnVzLmpzIiwic291cmNlcyI6WyJCdXMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7QUFBQSxJQUFBLEdBQUE7RUFBQTs7QUFhTTtFQUVVLGFBQUE7O0lBQ1IsSUFBQyxDQUFBLFNBQUQsR0FBYTtJQUNiLElBQUMsQ0FBQSxNQUFELEdBQVU7RUFGRjs7Z0JBSVosU0FBQSxHQUFXLFNBQUMsT0FBRCxFQUFVLFFBQVY7SUFDUCxJQUFHLENBQUksSUFBQyxDQUFBLFNBQVMsQ0FBQyxjQUFYLENBQTBCLE9BQTFCLENBQVA7TUFDSSxJQUFDLENBQUEsU0FBVSxDQUFBLE9BQUEsQ0FBWCxHQUFzQixHQUQxQjs7V0FHQSxJQUFDLENBQUEsU0FBVSxDQUFBLE9BQUEsQ0FBUSxDQUFDLElBQXBCLENBQXlCLFFBQXpCO0VBSk87O2dCQU1YLFNBQUEsR0FBVyxTQUFDLE9BQUQsRUFBVSxPQUFWO0FBQ1AsUUFBQTtJQUFBLElBQUcsSUFBQyxDQUFBLFNBQVMsQ0FBQyxjQUFYLENBQTBCLE9BQTFCLENBQUg7QUFDSTtBQUFBO1dBQUEscUNBQUE7O3FCQUNJLFVBQUEsQ0FBVyxPQUFYO0FBREo7cUJBREo7O0VBRE87O2dCQUtYLEdBQUEsR0FBSyxTQUFDLElBQUQsRUFBTyxRQUFQO1dBQ0QsSUFBQyxDQUFBLE1BQU8sQ0FBQSxJQUFBLENBQVIsR0FBZ0I7RUFEZjs7Z0JBR0wsR0FBQSxHQUFLLFNBQUMsSUFBRDtJQUNELElBQUcsQ0FBSSxJQUFDLENBQUEsTUFBTSxDQUFDLGNBQVIsQ0FBdUIsSUFBdkIsQ0FBUDthQUNJLE9BQU8sQ0FBQyxHQUFSLENBQVksdUNBQVosRUFESjtLQUFBLE1BQUE7QUFFSyxhQUFPLElBQUMsQ0FBQSxNQUFPLENBQUEsSUFBQSxFQUZwQjs7RUFEQyIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuXG5BIHB1Yi9zdWIgYW5kIHZhcmlhYmxlIGV4Y2hhbmdlIGZvciBDQUdFTlxuXG5AYXV0aG9yIERlc3RpbiBNb3VsdG9uXG5AZ2l0IGh0dHBzOi8vZ2l0aHViLmNvbS9kZXN0aW5tb3VsdG9uL2NhZ2VuXG5AbGljZW5zZSBNSVRcblxuU3Vic2NyaWJlIGFuZCBwdWJsaXNoIHRvIGEgY2hhbm5lbC5cblNldCBhbmQgZ2V0IGdsb2JhbCB2YXJpYWJsZXMuXG5cbiMjI1xuXG5jbGFzcyBCdXNcblxuICAgIGNvbnN0cnVjdG9yOigpLT5cbiAgICAgICAgQF9jaGFubmVscyA9IHt9XG4gICAgICAgIEBfdmF1bHQgPSB7fVxuXG4gICAgc3Vic2NyaWJlOiAoY2hhbm5lbCwgY2FsbGJhY2spPT5cbiAgICAgICAgaWYgbm90IEBfY2hhbm5lbHMuaGFzT3duUHJvcGVydHkoY2hhbm5lbClcbiAgICAgICAgICAgIEBfY2hhbm5lbHNbY2hhbm5lbF0gPSBbXVxuXG4gICAgICAgIEBfY2hhbm5lbHNbY2hhbm5lbF0ucHVzaChjYWxsYmFjaylcblxuICAgIGJyb2FkY2FzdDogKGNoYW5uZWwsIHBheWxvYWQpLT5cbiAgICAgICAgaWYgQF9jaGFubmVscy5oYXNPd25Qcm9wZXJ0eShjaGFubmVsKVxuICAgICAgICAgICAgZm9yIHN1YnNjcmliZXIgaW4gQF9jaGFubmVsc1tjaGFubmVsXVxuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIocGF5bG9hZClcblxuICAgIHNldDogKG5hbWUsIHZhcmlhYmxlKS0+XG4gICAgICAgIEBfdmF1bHRbbmFtZV0gPSB2YXJpYWJsZVxuXG4gICAgZ2V0OiAobmFtZSktPlxuICAgICAgICBpZiBub3QgQF92YXVsdC5oYXNPd25Qcm9wZXJ0eShuYW1lKVxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJCdXM6IFVuYWJsZSB0byBmaW5kICR7bmFtZX0gaW4gdmF1bHQuXCIpXG4gICAgICAgIGVsc2UgcmV0dXJuIEBfdmF1bHRbbmFtZV0iXX0=


/*

Manage shared variables for CAGEN

@author Destin Moulton
@git https://github.com/destinmoulton/cagen
@license MIT

Component of Cellular Automata Generator (CAGEN)

Manage variables for the cagen components.
 */
var Shared;

Shared = (function() {
  function Shared() {
    this._cellColorActiveBackground = "#000000";
    this._cellColorBorder = "#000000";
    this._currentRuleDecimal = 0;
    this._topRowBinaryArray = [];
    radio('shared.set.currentruledecimal').subscribe((function(_this) {
      return function(newDecimalValue) {
        return _this._currentRuleDecimal = newDecimalValue;
      };
    })(this));
    radio('shared.get.currentruledecimal').subscribe((function(_this) {
      return function(callback) {
        return callback(_this._currentRuleDecimal);
      };
    })(this));
    radio('shared.set.toprowbinary').subscribe((function(_this) {
      return function(data) {
        return _this.topRowBinaryArray = data;
      };
    })(this));
    radio('shared.get.toprowbinary').subscribe((function(_this) {
      return function(callback) {
        return callback(_this.topRowBinaryArray);
      };
    })(this));
    radio('shared.set.cellcolor.activebackground').subscribe((function(_this) {
      return function(hexColor) {
        return _this._cellColorActiveBackground = hexColor;
      };
    })(this));
    radio('shared.get.cellcolor.activebackground').subscribe((function(_this) {
      return function(callback) {
        return callback(_this._cellColorActiveBackground);
      };
    })(this));
    radio('shared.set.cellcolor.border').subscribe((function(_this) {
      return function(hexColor) {
        return _this._cellColorBorder = hexColor;
      };
    })(this));
    radio('shared.get.cellcolor.border').subscribe((function(_this) {
      return function(callback) {
        return callback(_this._cellColorBorder);
      };
    })(this));
  }

  return Shared;

})();

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2hhcmVkLmpzIiwic291cmNlcyI6WyJTaGFyZWQuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQTs7QUFjTTtFQUVXLGdCQUFBO0lBQ1QsSUFBQyxDQUFBLDBCQUFELEdBQThCO0lBQzlCLElBQUMsQ0FBQSxnQkFBRCxHQUFvQjtJQUNwQixJQUFDLENBQUEsbUJBQUQsR0FBdUI7SUFDdkIsSUFBQyxDQUFBLGtCQUFELEdBQXNCO0lBRXRCLEtBQUEsQ0FBTSwrQkFBTixDQUFzQyxDQUFDLFNBQXZDLENBQ0ksQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLGVBQUQ7ZUFDSSxLQUFDLENBQUEsbUJBQUQsR0FBdUI7TUFEM0I7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBREo7SUFLQSxLQUFBLENBQU0sK0JBQU4sQ0FBc0MsQ0FBQyxTQUF2QyxDQUNJLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxRQUFEO2VBQ0ksUUFBQSxDQUFTLEtBQUMsQ0FBQSxtQkFBVjtNQURKO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQURKO0lBS0EsS0FBQSxDQUFNLHlCQUFOLENBQWdDLENBQUMsU0FBakMsQ0FDSSxDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsSUFBRDtlQUNJLEtBQUMsQ0FBQSxpQkFBRCxHQUFxQjtNQUR6QjtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FESjtJQUtBLEtBQUEsQ0FBTSx5QkFBTixDQUFnQyxDQUFDLFNBQWpDLENBQ0ksQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLFFBQUQ7ZUFDSSxRQUFBLENBQVMsS0FBQyxDQUFBLGlCQUFWO01BREo7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBREo7SUFLQSxLQUFBLENBQU0sdUNBQU4sQ0FBOEMsQ0FBQyxTQUEvQyxDQUNJLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxRQUFEO2VBQ0ksS0FBQyxDQUFBLDBCQUFELEdBQThCO01BRGxDO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQURKO0lBS0EsS0FBQSxDQUFNLHVDQUFOLENBQThDLENBQUMsU0FBL0MsQ0FDSSxDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsUUFBRDtlQUNJLFFBQUEsQ0FBUyxLQUFDLENBQUEsMEJBQVY7TUFESjtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FESjtJQUtBLEtBQUEsQ0FBTSw2QkFBTixDQUFvQyxDQUFDLFNBQXJDLENBQ0ksQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLFFBQUQ7ZUFDSSxLQUFDLENBQUEsZ0JBQUQsR0FBb0I7TUFEeEI7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBREo7SUFLQSxLQUFBLENBQU0sNkJBQU4sQ0FBb0MsQ0FBQyxTQUFyQyxDQUNJLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxRQUFEO2VBQ0ksUUFBQSxDQUFTLEtBQUMsQ0FBQSxnQkFBVjtNQURKO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQURKO0VBekNTIiwic291cmNlc0NvbnRlbnQiOlsiIyMjXG5cbk1hbmFnZSBzaGFyZWQgdmFyaWFibGVzIGZvciBDQUdFTlxuXG5AYXV0aG9yIERlc3RpbiBNb3VsdG9uXG5AZ2l0IGh0dHBzOi8vZ2l0aHViLmNvbS9kZXN0aW5tb3VsdG9uL2NhZ2VuXG5AbGljZW5zZSBNSVRcblxuQ29tcG9uZW50IG9mIENlbGx1bGFyIEF1dG9tYXRhIEdlbmVyYXRvciAoQ0FHRU4pXG5cbk1hbmFnZSB2YXJpYWJsZXMgZm9yIHRoZSBjYWdlbiBjb21wb25lbnRzLlxuXG4jIyNcblxuY2xhc3MgU2hhcmVkXG5cbiAgICBjb25zdHJ1Y3RvcjogKCktPlxuICAgICAgICBAX2NlbGxDb2xvckFjdGl2ZUJhY2tncm91bmQgPSBcIiMwMDAwMDBcIlxuICAgICAgICBAX2NlbGxDb2xvckJvcmRlciA9IFwiIzAwMDAwMFwiXG4gICAgICAgIEBfY3VycmVudFJ1bGVEZWNpbWFsID0gMFxuICAgICAgICBAX3RvcFJvd0JpbmFyeUFycmF5ID0gW11cblxuICAgICAgICByYWRpbygnc2hhcmVkLnNldC5jdXJyZW50cnVsZWRlY2ltYWwnKS5zdWJzY3JpYmUoXG4gICAgICAgICAgICAobmV3RGVjaW1hbFZhbHVlKT0+XG4gICAgICAgICAgICAgICAgQF9jdXJyZW50UnVsZURlY2ltYWwgPSBuZXdEZWNpbWFsVmFsdWVcbiAgICAgICAgKVxuXG4gICAgICAgIHJhZGlvKCdzaGFyZWQuZ2V0LmN1cnJlbnRydWxlZGVjaW1hbCcpLnN1YnNjcmliZShcbiAgICAgICAgICAgIChjYWxsYmFjayk9PlxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKEBfY3VycmVudFJ1bGVEZWNpbWFsKVxuICAgICAgICApXG5cbiAgICAgICAgcmFkaW8oJ3NoYXJlZC5zZXQudG9wcm93YmluYXJ5Jykuc3Vic2NyaWJlKFxuICAgICAgICAgICAgKGRhdGEpPT5cbiAgICAgICAgICAgICAgICBAdG9wUm93QmluYXJ5QXJyYXkgPSBkYXRhXG4gICAgICAgIClcblxuICAgICAgICByYWRpbygnc2hhcmVkLmdldC50b3Byb3diaW5hcnknKS5zdWJzY3JpYmUoXG4gICAgICAgICAgICAoY2FsbGJhY2spPT5cbiAgICAgICAgICAgICAgICBjYWxsYmFjayhAdG9wUm93QmluYXJ5QXJyYXkpXG4gICAgICAgIClcblxuICAgICAgICByYWRpbygnc2hhcmVkLnNldC5jZWxsY29sb3IuYWN0aXZlYmFja2dyb3VuZCcpLnN1YnNjcmliZShcbiAgICAgICAgICAgIChoZXhDb2xvcik9PlxuICAgICAgICAgICAgICAgIEBfY2VsbENvbG9yQWN0aXZlQmFja2dyb3VuZCA9IGhleENvbG9yXG4gICAgICAgIClcblxuICAgICAgICByYWRpbygnc2hhcmVkLmdldC5jZWxsY29sb3IuYWN0aXZlYmFja2dyb3VuZCcpLnN1YnNjcmliZShcbiAgICAgICAgICAgIChjYWxsYmFjayk9PlxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKEBfY2VsbENvbG9yQWN0aXZlQmFja2dyb3VuZClcbiAgICAgICAgKVxuXG4gICAgICAgIHJhZGlvKCdzaGFyZWQuc2V0LmNlbGxjb2xvci5ib3JkZXInKS5zdWJzY3JpYmUoXG4gICAgICAgICAgICAoaGV4Q29sb3IpPT5cbiAgICAgICAgICAgICAgICBAX2NlbGxDb2xvckJvcmRlciA9IGhleENvbG9yXG4gICAgICAgIClcblxuICAgICAgICByYWRpbygnc2hhcmVkLmdldC5jZWxsY29sb3IuYm9yZGVyJykuc3Vic2NyaWJlKFxuICAgICAgICAgICAgKGNhbGxiYWNrKT0+XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soQF9jZWxsQ29sb3JCb3JkZXIpXG4gICAgICAgICkiXX0=


/*

The DOM configuration for the Cellular Automata GENerator (CAGEN).

@author Destin Moulton
@git https://github.com/destinmoulton/cagen
@license MIT

Component of Cellular Automata Generator (CAGEN)

Contains the settings for the DOM objects.

Holds ids and classes of relevant DOM objects.
 */
var DOM;

DOM = (function() {
  function DOM() {}

  DOM.ids = {
    'BOARD': {
      'CONTAINER': 'cagen-board',
      'MESSAGE_CONTAINER': 'cagen-generatemessage-container'
    },
    'CAGEN': {
      'MAIN_CONTAINER': 'cagen-container'
    },
    'GENERATOR': {
      'CONTENT_CONTAINER': 'cagen-generator-content',
      'RULE_PREVIEW_CONTAINER': 'cagen-rules-preview-container',
      'RULE_DROPDOWN': 'cagen-generator-select-input',
      'RULE_GENERATE_BUTTON': 'cagen-generator-generate-button',
      'COLORPICKER_BUTTON': 'cagen-generator-colorpicker-button',
      'COLORPICKER_CONTAINER': 'cagen-colorpicker',
      'COLORPICKER_CELL': 'cagen-colorpicker-cell',
      'COLORPICKER_BORDER': 'cagen-colorpicker-border',
      'TEMPLATE_BOARD': 'tmpl-cagen-generator-board',
      'TEMPLATE_COLORPICKER': 'tmpl-cagen-generator-colorpicker',
      'TEMPLATE_MAIN_CONTAINER': 'tmpl-cagen-generator',
      'TEMPLATE_RULE_PREVIEW_CELL': 'tmpl-cagen-generator-preview-cell'
    },
    'TABS': {
      'CONTAINER': 'cagen-tab-container',
      'TEMPLATE': 'tmpl-cagen-tabs'
    },
    'THUMBNAILS': {
      'TEMPLATE_THUMBNAILS': 'tmpl-cagen-thumbnails'
    },
    'TOPROWEDITOR': {
      'BUTTON_GENERATE': 'rowed-button-generate',
      'BUTTON_RESET': 'rowed-button-resetrow',
      'EDITOR_CONTAINER': 'rowed-editor-container',
      'ROW_CONTAINER': 'rowed-slider-row-container',
      'SLIDER_CONTAINER': 'rowed-slider-container',
      'SLIDER': 'rowed-slider',
      'SLIDER_ARROW_LEFT': 'rowed-slider-arrow-left',
      'SLIDER_ARROW_RIGHT': 'rowed-slider-arrow-right',
      'TEMPLATE_TOPROWEDITOR': 'tmpl-cagen-toproweditor',
      'TEMPLATE_SLIDER_CELL': 'tmpl-rowed-slider-cell',
      'TEMPLATE_EDITOR_CELL': 'tmpl-rowed-editor-cell'
    }
  };

  DOM.classes = {
    'BOARD': {
      'CELL_ACTIVE_CLASS': 'cagen-board-cell-active',
      'CELL_BASE_CLASS': 'cagen-board-cell'
    },
    'GENERATOR': {
      'RULE_PREVIEW_CELL_ACTIVE': 'cagen-generator-preview-cell-active'
    },
    'TABS': {
      'ACTIVE': 'active'
    },
    'THUMBNAILS': {
      'THUMB_BOX': 'cagen-rulethumb-box'
    },
    'TOPROWEDITOR': {
      'EDITOR_CELL': 'rowed-editor-cell',
      'EDITOR_CELL_ACTIVE': 'rowed-editor-cell-active',
      'SLIDER_CELL_ACTIVE': 'cagen-board-cell-active'
    }
  };

  DOM.prefixes = {
    'BOARD': {
      'CELL': 'sb_'
    },
    'GENERATOR': {
      'RULE_PREVIEW_CELL': 'cagen-generator-preview-',
      'RULE_PREVIEW_DIGIT': 'cagen-generator-preview-digit-'
    },
    'TABS': {
      'TAB_PREFIX': 'cagen-tab-'
    },
    'TOPROWEDITOR': {
      'SLIDER_COL': 'rowed-slider-col-'
    }
  };

  DOM.elemById = function(section, element) {
    return document.getElementById(this.getID(section, element));
  };

  DOM.elemByPrefix = function(section, prefix, suffix) {
    return document.getElementById(this.getPrefix(section, prefix) + suffix);
  };

  DOM.getClass = function(section, element) {
    return this.classes[section][element];
  };

  DOM.getID = function(section, element) {
    if (!this.ids.hasOwnProperty(section)) {
      console.log("DOM::getID() - Unable to find `" + section + "`");
      return void 0;
    }
    if (!this.ids[section].hasOwnProperty(element)) {
      console.log("DOM::getID() - Unable to find `" + element + "`");
      return void 0;
    }
    return this.ids[section][element];
  };

  DOM.getPrefix = function(section, prefix) {
    return this.prefixes[section][prefix];
  };

  return DOM;

})();

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/*
CAGEN: Cellular Automata GENerator

@author Destin Moulton
@git https://github.com/destinmoulton/cagen
@license MIT

Generate a cellular automata board based on a passed rule.
 */
var Board;

Board = (function() {
  function Board() {
    this._colorBorder = "#000000";
    this._colorCellActive = "#000000";
    this._boardNoCellsWide = 0;
    this._boardNoCellsHigh = 0;
    this._boardCellWidthPx = 5;
    this._boardCellHeightPx = 5;
    this._currentRow = 1;
    this._rootRowBinary = [];
    this._currentCells = [];
    this._RuleMatcher = new RuleMatcher();
  }

  Board.prototype.buildBoard = function(rootRowBinary, noCellsWide, noSectionsHigh) {
    this._boardElem = document.getElementById(DOM.getID('BOARD', 'CONTAINER'));
    this._messageElem = document.getElementById(DOM.getID('BOARD', 'MESSAGE_CONTAINER'));
    this._rootRowBinary = rootRowBinary;
    radio('shared.get.currentruledecimal').broadcast((function(_this) {
      return function(currentRuleDecimal) {
        return _this._RuleMatcher.setCurrentRule(currentRuleDecimal);
      };
    })(this));
    this._boardNoCellsWide = noCellsWide;
    this._boardNoCellsHigh = noSectionsHigh;
    this._boardElem.innerWidth = noCellsWide * this._boardCellWidthPx;
    this._boardElem.innerHeight = noSectionsHigh * this._boardCellHeightPx;
    this._boardElem.innerHtml = "";
    this._boardElem.style.display = "none";
    this._currentRow = 1;
    this._messageElem.style.display = "block";
    return setTimeout((function(_this) {
      return function() {
        _this._generateRows();
        _this._messageElem.style.display = "none";
        return _this._boardElem.style.display = "block";
      };
    })(this), 500);
  };

  Board.prototype._setupColorEvents = function() {
    radio('shared.set.cellcolor.activebackground').subscribe((function(_this) {
      return function(hexColor) {
        return _this._changeCellActiveBackroundColor(hexColor);
      };
    })(this));
    return radio('shared.set.cellcolor.border').subscribe((function(_this) {
      return function(hexColor) {
        return _this._changeCellBorderColor(hexColor);
      };
    })(this));
  };

  Board.prototype._generateRows = function() {
    var i, ref, results, row;
    this._buildTopRow();
    results = [];
    for (row = i = 2, ref = this._boardNoCellsHigh; 2 <= ref ? i <= ref : i >= ref; row = 2 <= ref ? ++i : --i) {
      this._currentRow = row;
      results.push(this._buildRow(row));
    }
    return results;
  };

  Board.prototype._buildRow = function(row) {
    var col, i, oneIndex, ref, twoIndex, zeroIndex;
    for (col = i = 1, ref = this._boardNoCellsWide; 1 <= ref ? i <= ref : i >= ref; col = 1 <= ref ? ++i : --i) {
      zeroIndex = this._currentCells[row - 1][col - 1];
      if (zeroIndex === void 0) {
        zeroIndex = this._currentCells[row - 1][this._boardNoCellsWide];
      }
      oneIndex = this._currentCells[row - 1][col];
      twoIndex = this._currentCells[row - 1][col + 1];
      if (twoIndex === void 0) {
        twoIndex = this._currentCells[row - 1][1];
      }
      if (this._RuleMatcher.match(zeroIndex, oneIndex, twoIndex) === 0) {
        this._getCellHtml(row, col, false);
      } else {
        this._getCellHtml(row, col, true);
      }
    }
    return this._currentRow++;
  };

  Board.prototype._buildTopRow = function() {
    var cell, col, i, ref;
    for (col = i = 1, ref = this._boardNoCellsWide; 1 <= ref ? i <= ref : i >= ref; col = 1 <= ref ? ++i : --i) {
      cell = this._rootRowBinary[col];
      if (cell === 1) {
        this._getCellHtml(this._currentRow, col, true);
      } else {
        this._getCellHtml(this._currentRow, col, false);
      }
    }
    return this._currentRow++;
  };

  Board.prototype._getCellHtml = function(row, col, active) {
    var tmpCell, tmpClass, tmpID, tmpLeftPx, tmpTopPx;
    if (!this._currentCells[row]) {
      this._currentCells[row] = [];
    }
    this._currentCells[row][col] = active ? 1 : 0;
    tmpID = DOM.getPrefix('BOARD', 'CELL') + this._currentRow + "_" + col;
    tmpLeftPx = (col - 1) * this._boardCellWidthPx;
    tmpTopPx = (row - 1) * this._boardCellHeightPx;
    tmpCell = document.createElement('div');
    tmpCell.setAttribute('id', tmpID);
    tmpCell.style.top = tmpTopPx + "px";
    tmpCell.style.left = tmpLeftPx + "px";
    tmpClass = DOM.getClass('BOARD', 'CELL_BASE_CLASS');
    if (active) {
      tmpCell.style.backgroundColor = this._colorCellActive;
      tmpClass += " " + (DOM.getClass('BOARD', 'CELL_ACTIVE_CLASS'));
    }
    tmpCell.setAttribute('class', "" + tmpClass);
    tmpCell.style.borderColor = this._colorBorder;
    return this._boardElem.appendChild(tmpCell);
  };

  Board.prototype._changeCellActiveBackroundColor = function(hexColor) {
    var cell, cellsElems, i, len, results;
    this._colorCellActive = hexColor;
    cellsElems = document.querySelectorAll('.' + DOM.getClass('BOARD', 'CELL_ACTIVE_CLASS'));
    results = [];
    for (i = 0, len = cellsElems.length; i < len; i++) {
      cell = cellsElems[i];
      results.push(cell.style.backgroundColor = this._colorCellActive);
    }
    return results;
  };

  Board.prototype._changeCellBorderColor = function(hexColor) {
    var cell, cellsElems, i, len, results;
    this._colorBorder = hexColor;
    cellsElems = document.querySelectorAll('.' + DOM.getClass('BOARD', 'CELL_BASE_CLASS'));
    results = [];
    for (i = 0, len = cellsElems.length; i < len; i++) {
      cell = cellsElems[i];
      results.push(cell.style.borderColor = this._colorBorder);
    }
    return results;
  };

  return Board;

})();

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/*

The Generator for the Cellular Automata GENerator (CAGEN).

@author Destin Moulton
@git https://github.com/destinmoulton/cagen
@license MIT

Component of Cellular Automata Generator (CAGEN)

Functionality for building the generator for
controlling the cellular automata generation.

- Display a preview of the rules.
- Display the generated board.
 */
var Generator;

Generator = (function() {
  function Generator(BUS) {
    this.BUS = BUS;
    this._currentRule = 0;
    this._previewBoxWidth = 40;
    this._noBoardColumns = 151;
    this._noBoardRows = 75;
    this._isColorPickerEnabled = false;
    this._ruleList = [];
    this.BUS.subscribe('generator.run', (function(_this) {
      return function() {
        _this.run();
      };
    })(this));
  }

  Generator.prototype.run = function() {
    var cagenMainElem, generatorTemplateHTML;
    generatorTemplateHTML = DOM.elemById('GENERATOR', 'TEMPLATE_MAIN_CONTAINER').innerHTML;
    cagenMainElem = DOM.elemById('CAGEN', 'MAIN_CONTAINER');
    cagenMainElem.innerHTML = Mustache.render(generatorTemplateHTML, {});
    this._Board = new Board();
    this._setupRuleDropdown();
    DOM.elemById('GENERATOR', 'COLORPICKER_BUTTON').addEventListener('click', (function(_this) {
      return function() {
        if (_this._isColorPickerEnabled) {
          return _this._disableColorPicker();
        } else {
          return _this._enableColorPicker();
        }
      };
    })(this));
    this._buildBoard();
    return true;
  };

  Generator.prototype._enableColorPicker = function() {
    var colorPickerElem, colorpickerTemplateHTML;
    colorpickerTemplateHTML = DOM.elemById('GENERATOR', 'TEMPLATE_COLORPICKER').innerHTML;
    colorPickerElem = DOM.elemById('GENERATOR', 'COLORPICKER_CONTAINER');
    colorPickerElem.innerHTML = Mustache.render(colorpickerTemplateHTML, {});
    this._isColorPickerEnabled = true;
    ColorPicker(DOM.elemById('GENERATOR', 'COLORPICKER_CELL'), (function(_this) {
      return function(hex) {
        return radio('shared.set.cellcolor.activebackground').broadcast(hex);
      };
    })(this));
    return ColorPicker(DOM.elemById('GENERATOR', 'COLORPICKER_BORDER'), (function(_this) {
      return function(hex) {
        return radio('shared.set.cellcolor.border').broadcast(hex);
      };
    })(this));
  };

  Generator.prototype._disableColorPicker = function() {
    this._isColorPickerEnabled = false;
    return DOM.elemById('GENERATOR', 'COLORPICKER_CONTAINER').innerHTML = "";
  };

  Generator.prototype._setupRuleDropdown = function() {
    var dropdownElem, i, optionsHTML, rule;
    dropdownElem = DOM.elemById('GENERATOR', 'RULE_DROPDOWN');
    optionsHTML = "";
    for (rule = i = 0; i <= 255; rule = ++i) {
      optionsHTML += "<option value='" + rule + "'>" + rule + "</option>";
    }
    dropdownElem.innerHTML = optionsHTML;
    radio('shared.get.currentruledecimal').broadcast(function(currentRule) {
      return dropdownElem.value = currentRule;
    });
    dropdownElem.addEventListener('change', (function(_this) {
      return function(event) {
        return radio('shared.set.currentruledecimal').broadcast(event.target.value);
      };
    })(this));
    return DOM.elemById('GENERATOR', 'RULE_GENERATE_BUTTON').addEventListener('click', (function(_this) {
      return function() {
        return _this._buildBoard();
      };
    })(this));
  };

  Generator.prototype._buildBoard = function() {
    var binary, cellBoardHtml;
    cellBoardHtml = DOM.elemById('GENERATOR', 'TEMPLATE_BOARD').innerHTML;
    DOM.elemById('GENERATOR', 'CONTENT_CONTAINER').innerHTML = Mustache.render(cellBoardHtml, {});
    this._rulesContainerElem = DOM.elemById('GENERATOR', 'RULE_PREVIEW_CONTAINER');
    binary = [];
    radio('shared.get.toprowbinary').broadcast(function(currentRule) {
      return binary = currentRule;
    });
    this._Board.buildBoard(binary, this._noBoardColumns, this._noBoardRows);
    this._buildRulePreview();
    return true;
  };

  Generator.prototype._buildRulePreview = function() {
    var activeClass, binary, currentRule, i, index, jTmpCell, jTmpDigit, left, leftBit, middleBit, previewCellHtml, rendered, results, rightBit, tmplOptions;
    currentRule = "";
    radio('rulematcher.get.rulebinarysting').broadcast((function(_this) {
      return function(binaryString) {
        return currentRule = binaryString;
      };
    })(this));
    previewCellHtml = DOM.elemById('GENERATOR', 'TEMPLATE_RULE_PREVIEW_CELL').innerHTML;
    activeClass = this._rulesContainerElem.innerHTML = "";
    results = [];
    for (index = i = 7; i >= 0; index = --i) {
      binary = index.toString(2);
      if (binary.length === 2) {
        binary = "0" + binary;
      } else if (binary.length === 1) {
        binary = "00" + binary;
      }
      leftBit = false;
      middleBit = false;
      rightBit = false;
      if (binary.charAt(0) === "1") {
        leftBit = true;
      }
      if (binary.charAt(1) === "1") {
        middleBit = true;
      }
      if (binary.charAt(2) === "1") {
        rightBit = true;
      }
      left = (7 - index) * this._previewBoxWidth;
      tmplOptions = {
        left: left,
        previewIndex: index,
        leftBitActive: leftBit,
        middleBitActive: middleBit,
        rightBitActive: rightBit
      };
      rendered = Mustache.render(previewCellHtml, tmplOptions);
      this._rulesContainerElem.innerHTML += rendered;
      jTmpCell = DOM.elemByPrefix('GENERATOR', 'RULE_PREVIEW_CELL', index);
      jTmpDigit = DOM.elemByPrefix('GENERATOR', 'RULE_PREVIEW_DIGIT', index);
      jTmpCell.classList.remove(DOM.getClass('GENERATOR', 'RULE_PREVIEW_CELL_ACTIVE'));
      jTmpDigit.innerHTML = "0";
      if (currentRule.substr(7 - index, 1) === "1") {
        jTmpCell.classList.add(DOM.getClass('GENERATOR', 'RULE_PREVIEW_CELL_ACTIVE'));
        results.push(jTmpDigit.innerHTML = "1");
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  return Generator;

})();

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/*
RuleMatcher.coffee

@author Destin Moulton
@git https://github.com/destinmoulton/cagen
@license MIT

Component of Cellular Automata Generator (CAGEN)

The rule is a binary string. Each 1 in the binary string
represents a rule to-be-followed in the next row of
generated blocks.

There are 255 rules of 8 block positions.

Rule 0 Example:
111 110 101 100 011 010 001 000
 0   0   0   0   0   0   0   0

Rule 20 Example:
111 110 101 100 011 010 001 000
 0   0   1   0   1   0   0   0

Rule 255 Example:
111 110 101 100 011 010 001 000
 1   1   1   1   1   1   1   1

The position of filled cells on the top row determines
the composition of the next row and so on.
 */
var RuleMatcher;

RuleMatcher = (function() {
  function RuleMatcher() {
    this._binaryRule = "";
    this._patterns = ['111', '110', '101', '100', '011', '010', '001', '000'];
    radio('rulematcher.get.rulebinarysting').subscribe((function(_this) {
      return function(callback) {
        return callback(_this._binaryRule);
      };
    })(this));
  }

  RuleMatcher.prototype.setCurrentRule = function(decimalRule) {
    return this._binaryRule = this._decToBinary(decimalRule);
  };

  RuleMatcher.prototype.match = function(zeroIndex, oneIndex, twoIndex) {
    var foundPatternIndex, patternToFind;
    patternToFind = "" + zeroIndex + oneIndex + twoIndex;
    foundPatternIndex = this._patterns.indexOf(patternToFind);
    return parseInt(this._binaryRule.substr(foundPatternIndex, 1));
  };

  RuleMatcher.prototype._decToBinary = function(decValue) {
    var binary, i, length, num, ref;
    binary = (parseInt(decValue)).toString(2);
    length = binary.length;
    if (length < 8) {
      for (num = i = ref = length; ref <= 7 ? i <= 7 : i >= 7; num = ref <= 7 ? ++i : --i) {
        binary = "0" + binary;
      }
    }
    return binary;
  };

  return RuleMatcher;

})();

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUnVsZU1hdGNoZXIuanMiLCJzb3VyY2VzIjpbIlJ1bGVNYXRjaGVyLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUE7O0FBZ0NNO0VBTVcscUJBQUE7SUFDVCxJQUFDLENBQUEsV0FBRCxHQUFlO0lBQ2YsSUFBQyxDQUFBLFNBQUQsR0FBYSxDQUNULEtBRFMsRUFFVCxLQUZTLEVBR1QsS0FIUyxFQUlULEtBSlMsRUFLVCxLQUxTLEVBTVQsS0FOUyxFQU9ULEtBUFMsRUFRVCxLQVJTO0lBV2IsS0FBQSxDQUFNLGlDQUFOLENBQXdDLENBQUMsU0FBekMsQ0FDSSxDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsUUFBRDtlQUNJLFFBQUEsQ0FBUyxLQUFDLENBQUEsV0FBVjtNQURKO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQURKO0VBYlM7O3dCQXFCYixjQUFBLEdBQWdCLFNBQUMsV0FBRDtXQUlaLElBQUMsQ0FBQSxXQUFELEdBQWUsSUFBQyxDQUFBLFlBQUQsQ0FBYyxXQUFkO0VBSkg7O3dCQVNoQixLQUFBLEdBQU8sU0FBQyxTQUFELEVBQVksUUFBWixFQUFzQixRQUF0QjtBQUVILFFBQUE7SUFBQSxhQUFBLEdBQWdCLEVBQUEsR0FBRyxTQUFILEdBQWUsUUFBZixHQUEwQjtJQUUxQyxpQkFBQSxHQUFvQixJQUFDLENBQUEsU0FBUyxDQUFDLE9BQVgsQ0FBbUIsYUFBbkI7QUFHcEIsV0FBTyxRQUFBLENBQVMsSUFBQyxDQUFBLFdBQVcsQ0FBQyxNQUFiLENBQW9CLGlCQUFwQixFQUFzQyxDQUF0QyxDQUFUO0VBUEo7O3dCQWNQLFlBQUEsR0FBYyxTQUFDLFFBQUQ7QUFFVixRQUFBO0lBQUEsTUFBQSxHQUFTLENBQUMsUUFBQSxDQUFTLFFBQVQsQ0FBRCxDQUFvQixDQUFDLFFBQXJCLENBQThCLENBQTlCO0lBQ1QsTUFBQSxHQUFTLE1BQU0sQ0FBQztJQUVoQixJQUFHLE1BQUEsR0FBUyxDQUFaO0FBRUksV0FBVyw4RUFBWDtRQUNJLE1BQUEsR0FBUyxHQUFBLEdBQUk7QUFEakIsT0FGSjs7QUFLQSxXQUFPO0VBVkciLCJzb3VyY2VzQ29udGVudCI6WyIjIyNcblJ1bGVNYXRjaGVyLmNvZmZlZVxuXG5AYXV0aG9yIERlc3RpbiBNb3VsdG9uXG5AZ2l0IGh0dHBzOi8vZ2l0aHViLmNvbS9kZXN0aW5tb3VsdG9uL2NhZ2VuXG5AbGljZW5zZSBNSVRcblxuQ29tcG9uZW50IG9mIENlbGx1bGFyIEF1dG9tYXRhIEdlbmVyYXRvciAoQ0FHRU4pXG5cblRoZSBydWxlIGlzIGEgYmluYXJ5IHN0cmluZy4gRWFjaCAxIGluIHRoZSBiaW5hcnkgc3RyaW5nXG5yZXByZXNlbnRzIGEgcnVsZSB0by1iZS1mb2xsb3dlZCBpbiB0aGUgbmV4dCByb3cgb2ZcbmdlbmVyYXRlZCBibG9ja3MuXG5cblRoZXJlIGFyZSAyNTUgcnVsZXMgb2YgOCBibG9jayBwb3NpdGlvbnMuXG5cblJ1bGUgMCBFeGFtcGxlOlxuMTExIDExMCAxMDEgMTAwIDAxMSAwMTAgMDAxIDAwMFxuIDAgICAwICAgMCAgIDAgICAwICAgMCAgIDAgICAwXG5cblJ1bGUgMjAgRXhhbXBsZTpcbjExMSAxMTAgMTAxIDEwMCAwMTEgMDEwIDAwMSAwMDBcbiAwICAgMCAgIDEgICAwICAgMSAgIDAgICAwICAgMFxuXG5SdWxlIDI1NSBFeGFtcGxlOlxuMTExIDExMCAxMDEgMTAwIDAxMSAwMTAgMDAxIDAwMFxuIDEgICAxICAgMSAgIDEgICAxICAgMSAgIDEgICAxXG5cblRoZSBwb3NpdGlvbiBvZiBmaWxsZWQgY2VsbHMgb24gdGhlIHRvcCByb3cgZGV0ZXJtaW5lc1xudGhlIGNvbXBvc2l0aW9uIG9mIHRoZSBuZXh0IHJvdyBhbmQgc28gb24uXG5cbiMjI1xuXG5jbGFzcyBSdWxlTWF0Y2hlclxuICAgIFxuICAgICNcbiAgICAjIFNldHVwIHRoZSBsb2NhbCB2YXJpYWJsZXNcbiAgICAjIEBjb25zdHJ1Y3RvclxuICAgICMgXG4gICAgY29uc3RydWN0b3I6ICgpLT5cbiAgICAgICAgQF9iaW5hcnlSdWxlID0gXCJcIlxuICAgICAgICBAX3BhdHRlcm5zID0gW1xuICAgICAgICAgICAgJzExMScsXG4gICAgICAgICAgICAnMTEwJyxcbiAgICAgICAgICAgICcxMDEnLFxuICAgICAgICAgICAgJzEwMCcsXG4gICAgICAgICAgICAnMDExJyxcbiAgICAgICAgICAgICcwMTAnLFxuICAgICAgICAgICAgJzAwMScsXG4gICAgICAgICAgICAnMDAwJ1xuICAgICAgICBdXG5cbiAgICAgICAgcmFkaW8oJ3J1bGVtYXRjaGVyLmdldC5ydWxlYmluYXJ5c3RpbmcnKS5zdWJzY3JpYmUoXG4gICAgICAgICAgICAoY2FsbGJhY2spPT5cbiAgICAgICAgICAgICAgICBjYWxsYmFjayhAX2JpbmFyeVJ1bGUpXG4gICAgICAgIClcblxuICAgICNcbiAgICAjIFNldCB0aGUgY3VycmVudCBydWxlIGZyb20gYSBkZWNpbWFsIHZhbHVlXG4gICAgIyBcbiAgICBzZXRDdXJyZW50UnVsZTogKGRlY2ltYWxSdWxlKS0+XG4gICAgICAgICMgVGhlIGJpbmFyeSBydWxlIGNvbnRhaW5zIHRoZSBzZXF1ZW5jZSBvZlxuICAgICAgICAjIDAncyAobm8gYmxvY2spIGFuZCAxJ3MgKGJsb2NrKSBmb3IgdGhlXG4gICAgICAgICMgbmV4dCByb3cuXG4gICAgICAgIEBfYmluYXJ5UnVsZSA9IEBfZGVjVG9CaW5hcnkoZGVjaW1hbFJ1bGUpXG5cbiAgICAjXG4gICAgIyBNYXRjaCBhIHBhdHRlcm4gZm9yIHRoZSB0aHJlZSBiaXQgcG9zaXRpb25zXG4gICAgIyBcbiAgICBtYXRjaDogKHplcm9JbmRleCwgb25lSW5kZXgsIHR3b0luZGV4KS0+XG4gICAgICAgICMgTWF0Y2ggdGhyZWUgY2VsbHMgd2l0aGluXG4gICAgICAgIHBhdHRlcm5Ub0ZpbmQgPSBcIiN7emVyb0luZGV4fSN7b25lSW5kZXh9I3t0d29JbmRleH1cIlxuXG4gICAgICAgIGZvdW5kUGF0dGVybkluZGV4ID0gQF9wYXR0ZXJucy5pbmRleE9mKHBhdHRlcm5Ub0ZpbmQpXG5cbiAgICAgICAgIyBSZXR1cm4gdGhlIGJpbmFyeSBydWxlJ3MgMCBvciAxIG1hcHBpbmdcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KEBfYmluYXJ5UnVsZS5zdWJzdHIoZm91bmRQYXR0ZXJuSW5kZXgsMSkpXG5cbiAgICAjXG4gICAgIyBDb252ZXJ0IGEgZGVjaW1hbCB2YWx1ZSB0byBpdHMgYmluYXJ5IHJlcHJlc2VudGF0aW9uXG4gICAgI1xuICAgICMgQHJldHVybiBzdHJpbmcgQmluYXJ5IHJ1bGVcbiAgICAjIFxuICAgIF9kZWNUb0JpbmFyeTogKGRlY1ZhbHVlKS0+XG4gICAgICAgICMgR2VuZXJhdGUgdGhlIGJpbmFyeSBzdHJpbmcgZnJvbSB0aGUgZGVjaW1hbFxuICAgICAgICBiaW5hcnkgPSAocGFyc2VJbnQoZGVjVmFsdWUpKS50b1N0cmluZygyKVxuICAgICAgICBsZW5ndGggPSBiaW5hcnkubGVuZ3RoXG5cbiAgICAgICAgaWYgbGVuZ3RoIDwgOFxuICAgICAgICAgICAgIyBQYWQgdGhlIGJpbmFyeSByZXByZXNlbmF0aW9uIHdpdGggbGVhZGluZyAwJ3NcbiAgICAgICAgICAgIGZvciBudW0gaW4gW2xlbmd0aC4uN11cbiAgICAgICAgICAgICAgICBiaW5hcnkgPSBcIjAje2JpbmFyeX1cIlxuICAgICAgICAgICAgICAgIFxuICAgICAgICByZXR1cm4gYmluYXJ5XG4iXX0=


/*

Generate the Rule Thumbnails for CAGEN and the event
handler for when a rule thumbnail is clicked.

@author Destin Moulton
@git https://github.com/destinmoulton/cagen
@license MIT

Component of Cellular Automata GENerator (CAGEN)


Each rule has a thumbnail. The user can click the thumbnail
to generate the Automata for that rule.
 */
var Thumbnails;

Thumbnails = (function() {
  function Thumbnails(BUS) {
    this.BUS = BUS;
    this.BUS.subscribe('thumbnails.run', (function(_this) {
      return function() {
        _this.run();
      };
    })(this));
  }

  Thumbnails.prototype.run = function() {
    var i, j, k, ref, rendered, results, results1, ruleList, thumbnailHTML, thumbsElems;
    ruleList = (function() {
      results = [];
      for (j = 0; j <= 255; j++){ results.push(j); }
      return results;
    }).apply(this);
    thumbnailHTML = DOM.elemById('THUMBNAILS', 'TEMPLATE_THUMBNAILS').innerHTML;
    rendered = Mustache.render(thumbnailHTML, {
      ruleList: ruleList
    });
    DOM.elemById('CAGEN', 'MAIN_CONTAINER').innerHTML = rendered;
    thumbsElems = document.querySelectorAll('.' + DOM.getClass('THUMBNAILS', 'THUMB_BOX'));
    results1 = [];
    for (i = k = 0, ref = thumbsElems.length - 1; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
      results1.push(thumbsElems[i].addEventListener('click', (function(_this) {
        return function(event) {
          return _this._ruleThumbClicked(event);
        };
      })(this)));
    }
    return results1;
  };

  Thumbnails.prototype._ruleThumbClicked = function(event) {
    var rule;
    rule = event.target.getAttribute('data-rule');
    radio('shared.set.currentruledecimal').broadcast(rule);
    return this.BUS.broadcast('tabs.show.generator');
  };

  return Thumbnails;

})();

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGh1bWJuYWlscy5qcyIsInNvdXJjZXMiOlsiVGh1bWJuYWlscy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFBOztBQWlCTTtFQUtXLG9CQUFDLEdBQUQ7SUFDVCxJQUFDLENBQUEsR0FBRCxHQUFPO0lBQ1AsSUFBQyxDQUFBLEdBQUcsQ0FBQyxTQUFMLENBQWUsZ0JBQWYsRUFDSSxDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUE7UUFDSSxLQUFDLENBQUEsR0FBRCxDQUFBO01BREo7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBREo7RUFGUzs7dUJBV2IsR0FBQSxHQUFLLFNBQUE7QUFFRCxRQUFBO0lBQUEsUUFBQSxHQUFXOzs7OztJQUdYLGFBQUEsR0FBZ0IsR0FBRyxDQUFDLFFBQUosQ0FBYSxZQUFiLEVBQTJCLHFCQUEzQixDQUFpRCxDQUFDO0lBQ2xFLFFBQUEsR0FBVyxRQUFRLENBQUMsTUFBVCxDQUFnQixhQUFoQixFQUErQjtNQUFDLFFBQUEsRUFBUyxRQUFWO0tBQS9CO0lBRVgsR0FBRyxDQUFDLFFBQUosQ0FBYSxPQUFiLEVBQXNCLGdCQUF0QixDQUF1QyxDQUFDLFNBQXhDLEdBQW9EO0lBRXBELFdBQUEsR0FBYyxRQUFRLENBQUMsZ0JBQVQsQ0FBMEIsR0FBQSxHQUFNLEdBQUcsQ0FBQyxRQUFKLENBQWEsWUFBYixFQUEyQixXQUEzQixDQUFoQztBQUVkO1NBQVMsaUdBQVQ7b0JBQ0ksV0FBWSxDQUFBLENBQUEsQ0FBRSxDQUFDLGdCQUFmLENBQWdDLE9BQWhDLEVBQXlDLENBQUEsU0FBQSxLQUFBO2VBQUEsU0FBQyxLQUFEO2lCQUFTLEtBQUMsQ0FBQSxpQkFBRCxDQUFtQixLQUFuQjtRQUFUO01BQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUF6QztBQURKOztFQVpDOzt1QkFtQkwsaUJBQUEsR0FBa0IsU0FBQyxLQUFEO0FBQ2QsUUFBQTtJQUFBLElBQUEsR0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLFlBQWIsQ0FBMEIsV0FBMUI7SUFHUCxLQUFBLENBQU0sK0JBQU4sQ0FBc0MsQ0FBQyxTQUF2QyxDQUFpRCxJQUFqRDtXQUdBLElBQUMsQ0FBQSxHQUFHLENBQUMsU0FBTCxDQUFlLHFCQUFmO0VBUGMiLCJzb3VyY2VzQ29udGVudCI6WyIjIyNcblxuR2VuZXJhdGUgdGhlIFJ1bGUgVGh1bWJuYWlscyBmb3IgQ0FHRU4gYW5kIHRoZSBldmVudFxuaGFuZGxlciBmb3Igd2hlbiBhIHJ1bGUgdGh1bWJuYWlsIGlzIGNsaWNrZWQuXG5cbkBhdXRob3IgRGVzdGluIE1vdWx0b25cbkBnaXQgaHR0cHM6Ly9naXRodWIuY29tL2Rlc3Rpbm1vdWx0b24vY2FnZW5cbkBsaWNlbnNlIE1JVFxuXG5Db21wb25lbnQgb2YgQ2VsbHVsYXIgQXV0b21hdGEgR0VOZXJhdG9yIChDQUdFTilcblxuXG5FYWNoIHJ1bGUgaGFzIGEgdGh1bWJuYWlsLiBUaGUgdXNlciBjYW4gY2xpY2sgdGhlIHRodW1ibmFpbFxudG8gZ2VuZXJhdGUgdGhlIEF1dG9tYXRhIGZvciB0aGF0IHJ1bGUuXG5cbiMjI1xuXG5jbGFzcyBUaHVtYm5haWxzXG5cbiAgICAjXG4gICAgIyBTZXR1cCB0aGUgbG9jYWwgdmFyaWFibGVzXG4gICAgIyBcbiAgICBjb25zdHJ1Y3RvcjogKEJVUyktPlxuICAgICAgICBAQlVTID0gQlVTXG4gICAgICAgIEBCVVMuc3Vic2NyaWJlKCd0aHVtYm5haWxzLnJ1bicsXG4gICAgICAgICAgICAoKT0+XG4gICAgICAgICAgICAgICAgQHJ1bigpXG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIClcblxuICAgICNcbiAgICAjIFNob3cgdGhlIHJ1bGUgdGh1bWJuYWlsc1xuICAgICMgXG4gICAgcnVuOiAoKS0+XG4gICAgICAgICMgU2V0dXAgdGhlIGxpc3Qgb2YgcnVsZXNcbiAgICAgICAgcnVsZUxpc3QgPSBbMC4uMjU1XVxuXG4gICAgICAgICMgQ2xlYXIgdGhlIGN1cnJlbnQgdGh1bWJuYWlscyBhbmQgcG9wdWxhdGUgaXQgdmlhIE11c3RhY2hlIHRlbXBsYXRlXG4gICAgICAgIHRodW1ibmFpbEhUTUwgPSBET00uZWxlbUJ5SWQoJ1RIVU1CTkFJTFMnLCAnVEVNUExBVEVfVEhVTUJOQUlMUycpLmlubmVySFRNTFxuICAgICAgICByZW5kZXJlZCA9IE11c3RhY2hlLnJlbmRlcih0aHVtYm5haWxIVE1MLCB7cnVsZUxpc3Q6cnVsZUxpc3R9KVxuXG4gICAgICAgIERPTS5lbGVtQnlJZCgnQ0FHRU4nLCAnTUFJTl9DT05UQUlORVInKS5pbm5lckhUTUwgPSByZW5kZXJlZFxuXG4gICAgICAgIHRodW1ic0VsZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLicgKyBET00uZ2V0Q2xhc3MoJ1RIVU1CTkFJTFMnLCAnVEhVTUJfQk9YJykpXG4gICAgICAgIFxuICAgICAgICBmb3IgaSBpbiBbMC4udGh1bWJzRWxlbXMubGVuZ3RoIC0gMV1cbiAgICAgICAgICAgIHRodW1ic0VsZW1zW2ldLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KT0+QF9ydWxlVGh1bWJDbGlja2VkKGV2ZW50KSlcblxuICAgICNcbiAgICAjIEV2ZW50IGhhbmRsZXIgZm9yIHdoZW4gYSBydWxlIHRodW1ibmFpbCBpcyBjbGlja2VkXG4gICAgIyBTZXRzIHRoZSBydWxlIGFuZCBzd2l0Y2hlcyB0byB0aGUgZ2VuZXJhdG9yXG4gICAgIyBcbiAgICBfcnVsZVRodW1iQ2xpY2tlZDooZXZlbnQpIC0+XG4gICAgICAgIHJ1bGUgPSBldmVudC50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXJ1bGUnKVxuXG4gICAgICAgICMgQ2hhbmdlIHRoZSBjdXJyZW50IHJ1bGVcbiAgICAgICAgcmFkaW8oJ3NoYXJlZC5zZXQuY3VycmVudHJ1bGVkZWNpbWFsJykuYnJvYWRjYXN0KHJ1bGUpXG5cbiAgICAgICAgIyBMb2FkIHRoZSBnZW5lcmF0b3JcbiAgICAgICAgQEJVUy5icm9hZGNhc3QoJ3RhYnMuc2hvdy5nZW5lcmF0b3InKVxuXG4iXX0=


/*

The tabbed interface handler.

@author Destin Moulton
@git https://github.com/destinmoulton/cagen
@license MIT

Component of Cellular Automata GENerator (CAGEN)


Manage the tabs for the various CAGEN features.
 */
var Tabs,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Tabs = (function() {
  function Tabs(BUS) {
    this._runTabModule = bind(this._runTabModule, this);
    this.BUS = BUS;
    this._tabsElems = [];
  }

  Tabs.prototype.start = function() {
    var i, len, ref, results, tab, tabContainerElem, tabsTemplateHTML;
    tabsTemplateHTML = DOM.elemById('TABS', 'TEMPLATE').innerHTML;
    tabContainerElem = DOM.elemById('TABS', 'CONTAINER');
    tabContainerElem.innerHTML = Mustache.render(tabsTemplateHTML, {});
    this._tabsElems = tabContainerElem.querySelectorAll('li');
    ref = this._tabsElems;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      tab = ref[i];
      results.push((function(_this) {
        return function(tab) {
          var moduleName;
          moduleName = tab.getAttribute("data-tab-module");
          if (tab.className === DOM.getClass('TABS', 'ACTIVE')) {
            _this._runTabModule(moduleName);
          }
          _this.BUS.subscribe('tabs.show.' + moduleName, function() {
            return _this._runTabModule(moduleName);
          });
          return tab.addEventListener('click', function(event) {
            _this.BUS.broadcast('tabs.show.' + moduleName);
          });
        };
      })(this)(tab));
    }
    return results;
  };

  Tabs.prototype._activateTab = function(tabName) {
    var activeClass, i, len, ref, tab;
    activeClass = DOM.getClass('TABS', 'ACTIVE');
    ref = this._tabsElems;
    for (i = 0, len = ref.length; i < len; i++) {
      tab = ref[i];
      tab.classList.remove(activeClass);
    }
    return DOM.elemByPrefix('TABS', 'TAB_PREFIX', tabName).classList.add(activeClass);
  };

  Tabs.prototype._runTabModule = function(tabName) {
    this._activateTab(tabName);
    return this.BUS.broadcast(tabName + '.run');
  };

  return Tabs;

})();

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFicy5qcyIsInNvdXJjZXMiOlsiVGFicy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQSxJQUFBO0VBQUE7O0FBZU07RUFNVyxjQUFDLEdBQUQ7O0lBQ1QsSUFBQyxDQUFBLEdBQUQsR0FBTztJQUNQLElBQUMsQ0FBQSxVQUFELEdBQWM7RUFGTDs7aUJBT2IsS0FBQSxHQUFNLFNBQUE7QUFDRixRQUFBO0lBQUEsZ0JBQUEsR0FBbUIsR0FBRyxDQUFDLFFBQUosQ0FBYSxNQUFiLEVBQXFCLFVBQXJCLENBQWdDLENBQUM7SUFFcEQsZ0JBQUEsR0FBbUIsR0FBRyxDQUFDLFFBQUosQ0FBYSxNQUFiLEVBQW9CLFdBQXBCO0lBQ25CLGdCQUFnQixDQUFDLFNBQWpCLEdBQTZCLFFBQVEsQ0FBQyxNQUFULENBQWdCLGdCQUFoQixFQUFrQyxFQUFsQztJQUM3QixJQUFDLENBQUEsVUFBRCxHQUFjLGdCQUFnQixDQUFDLGdCQUFqQixDQUFrQyxJQUFsQztBQUVkO0FBQUE7U0FBQSxxQ0FBQTs7bUJBQ00sQ0FBQSxTQUFBLEtBQUE7ZUFBQSxTQUFDLEdBQUQ7QUFDRSxjQUFBO1VBQUEsVUFBQSxHQUFhLEdBQUcsQ0FBQyxZQUFKLENBQWlCLGlCQUFqQjtVQUViLElBQUcsR0FBRyxDQUFDLFNBQUosS0FBaUIsR0FBRyxDQUFDLFFBQUosQ0FBYSxNQUFiLEVBQXFCLFFBQXJCLENBQXBCO1lBQ0ksS0FBQyxDQUFBLGFBQUQsQ0FBZSxVQUFmLEVBREo7O1VBR0EsS0FBQyxDQUFBLEdBQUcsQ0FBQyxTQUFMLENBQWUsWUFBQSxHQUFlLFVBQTlCLEVBQ0ksU0FBQTttQkFBSSxLQUFDLENBQUEsYUFBRCxDQUFlLFVBQWY7VUFBSixDQURKO2lCQUlBLEdBQUcsQ0FBQyxnQkFBSixDQUFxQixPQUFyQixFQUNJLFNBQUMsS0FBRDtZQUNJLEtBQUMsQ0FBQSxHQUFHLENBQUMsU0FBTCxDQUFlLFlBQUEsR0FBZSxVQUE5QjtVQURKLENBREo7UUFWRjtNQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBRixDQUFHLEdBQUg7QUFESjs7RUFQRTs7aUJBMEJOLFlBQUEsR0FBYyxTQUFDLE9BQUQ7QUFDVixRQUFBO0lBQUEsV0FBQSxHQUFjLEdBQUcsQ0FBQyxRQUFKLENBQWEsTUFBYixFQUFxQixRQUFyQjtBQUNkO0FBQUEsU0FBQSxxQ0FBQTs7TUFDSSxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQWQsQ0FBcUIsV0FBckI7QUFESjtXQUdBLEdBQUcsQ0FBQyxZQUFKLENBQWlCLE1BQWpCLEVBQXlCLFlBQXpCLEVBQXVDLE9BQXZDLENBQStDLENBQUMsU0FBUyxDQUFDLEdBQTFELENBQThELFdBQTlEO0VBTFU7O2lCQVdkLGFBQUEsR0FBYyxTQUFDLE9BQUQ7SUFFVixJQUFDLENBQUEsWUFBRCxDQUFjLE9BQWQ7V0FHQSxJQUFDLENBQUEsR0FBRyxDQUFDLFNBQUwsQ0FBZSxPQUFBLEdBQVUsTUFBekI7RUFMVSIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuXG5UaGUgdGFiYmVkIGludGVyZmFjZSBoYW5kbGVyLlxuXG5AYXV0aG9yIERlc3RpbiBNb3VsdG9uXG5AZ2l0IGh0dHBzOi8vZ2l0aHViLmNvbS9kZXN0aW5tb3VsdG9uL2NhZ2VuXG5AbGljZW5zZSBNSVRcblxuQ29tcG9uZW50IG9mIENlbGx1bGFyIEF1dG9tYXRhIEdFTmVyYXRvciAoQ0FHRU4pXG5cblxuTWFuYWdlIHRoZSB0YWJzIGZvciB0aGUgdmFyaW91cyBDQUdFTiBmZWF0dXJlcy5cblxuIyMjXG5cbmNsYXNzIFRhYnNcbiAgICBcbiAgICAjXG4gICAgIyBTZXR1cCB0aGUgbG9jYWwgc2hhcmVkIHZhcmlhYmxlc1xuICAgICMgQGNvbnN0cnVjdG9yXG4gICAgIyBcbiAgICBjb25zdHJ1Y3RvcjogKEJVUyktPlxuICAgICAgICBAQlVTID0gQlVTXG4gICAgICAgIEBfdGFic0VsZW1zID0gW11cblxuICAgICNcbiAgICAjIFN0YXJ0IHRoZSB0YWJiZWQgaW50ZXJmYWNlXG4gICAgIyBcbiAgICBzdGFydDooKS0+XG4gICAgICAgIHRhYnNUZW1wbGF0ZUhUTUwgPSBET00uZWxlbUJ5SWQoJ1RBQlMnLCAnVEVNUExBVEUnKS5pbm5lckhUTUxcblxuICAgICAgICB0YWJDb250YWluZXJFbGVtID0gRE9NLmVsZW1CeUlkKCdUQUJTJywnQ09OVEFJTkVSJylcbiAgICAgICAgdGFiQ29udGFpbmVyRWxlbS5pbm5lckhUTUwgPSBNdXN0YWNoZS5yZW5kZXIodGFic1RlbXBsYXRlSFRNTCwge30pXG4gICAgICAgIEBfdGFic0VsZW1zID0gdGFiQ29udGFpbmVyRWxlbS5xdWVyeVNlbGVjdG9yQWxsKCdsaScpXG5cbiAgICAgICAgZm9yIHRhYiBpbiBAX3RhYnNFbGVtc1xuICAgICAgICAgICAgZG8odGFiKSA9PlxuICAgICAgICAgICAgICAgIG1vZHVsZU5hbWUgPSB0YWIuZ2V0QXR0cmlidXRlKFwiZGF0YS10YWItbW9kdWxlXCIpXG5cbiAgICAgICAgICAgICAgICBpZiB0YWIuY2xhc3NOYW1lIGlzIERPTS5nZXRDbGFzcygnVEFCUycsICdBQ1RJVkUnKVxuICAgICAgICAgICAgICAgICAgICBAX3J1blRhYk1vZHVsZShtb2R1bGVOYW1lKVxuXG4gICAgICAgICAgICAgICAgQEJVUy5zdWJzY3JpYmUoJ3RhYnMuc2hvdy4nICsgbW9kdWxlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgKCk9PkBfcnVuVGFiTW9kdWxlKG1vZHVsZU5hbWUpXG4gICAgICAgICAgICAgICAgKVxuXG4gICAgICAgICAgICAgICAgdGFiLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxcbiAgICAgICAgICAgICAgICAgICAgKGV2ZW50KT0+XG4gICAgICAgICAgICAgICAgICAgICAgICBAQlVTLmJyb2FkY2FzdCgndGFicy5zaG93LicgKyBtb2R1bGVOYW1lKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgKVxuICAgICNcbiAgICAjIEFjdGl2YXRlIGEgdGFiIHZpYSBzdHJpbmcgbmFtZVxuICAgICMgXG4gICAgX2FjdGl2YXRlVGFiOiAodGFiTmFtZSktPlxuICAgICAgICBhY3RpdmVDbGFzcyA9IERPTS5nZXRDbGFzcygnVEFCUycsICdBQ1RJVkUnKVxuICAgICAgICBmb3IgdGFiIGluIEBfdGFic0VsZW1zXG4gICAgICAgICAgICB0YWIuY2xhc3NMaXN0LnJlbW92ZShhY3RpdmVDbGFzcylcblxuICAgICAgICBET00uZWxlbUJ5UHJlZml4KCdUQUJTJywgJ1RBQl9QUkVGSVgnLCB0YWJOYW1lKS5jbGFzc0xpc3QuYWRkKGFjdGl2ZUNsYXNzKVxuXG4gICAgI1xuICAgICMgUnVuIHRoZSBUYWJcbiAgICAjICAtIGllIGlmIEdlbmVyYXRvciBpcyBjbGlja2VkLCBydW4gdGhlIEdlbmVyYXRvclxuICAgICNcbiAgICBfcnVuVGFiTW9kdWxlOih0YWJOYW1lKT0+XG4gICAgICAgICMgQWN0aXZhdGUgdGhlIHRhYlxuICAgICAgICBAX2FjdGl2YXRlVGFiKHRhYk5hbWUpXG5cbiAgICAgICAgIyBSdW4gdGhlIHRhYlxuICAgICAgICBAQlVTLmJyb2FkY2FzdCh0YWJOYW1lICsgJy5ydW4nKVxuICAgICJdfQ==


/*

The top/root row editor for CAGEN.

@author Destin Moulton
@git https://github.com/destinmoulton/cagen
@license MIT

Component of Cellular Automata GENerator (CAGEN)


The user can edit the top/root row, allowing them to "seed"
the generator to test configurations and create new variations
on the standard NKS version.
 */
var TopRowEditor,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

TopRowEditor = (function() {
  function TopRowEditor(BUS) {
    this._toggleEditorCell = bind(this._toggleEditorCell, this);
    this._moveSlider = bind(this._moveSlider, this);
    this.BUS = BUS;
    this._editorCellsElems = [];
    this._aRowBinary = [];
    this._noColumns = 151;
    this._colWidth = 5;
    this._rowHeight = 5;
    this._sliderLeft = 0;
    this._sliderCols = 26;
    this._sliderPxToMid = (this._sliderCols / 2) * this._colWidth;
    this._editorCellWidth = 29;
    this._totalWidth = this._colWidth * this._noColumns;
    this._generateInitialBinary();
    this.BUS.subscribe('toproweditor.run', (function(_this) {
      return function() {
        _this.run();
      };
    })(this));
  }

  TopRowEditor.prototype.run = function() {
    this._setupContainerTemplate();
    this._sliderElem = DOM.elemById('TOPROWEDITOR', 'SLIDER');
    this._rowContainerElem = DOM.elemById('TOPROWEDITOR', 'ROW_CONTAINER');
    this._jEditorContainer = DOM.elemById('TOPROWEDITOR', 'EDITOR_CONTAINER');
    this._rowContainerElem.style.height = this._rowHeight + "px";
    this._rowContainerElem.style.width = this._totalWidth + "px";
    this._setupSlider();
    this._buildRow();
    this._buildEditorCells();
    this._updateEditorCells(1);
    return this._setupButtonEvents();
  };

  TopRowEditor.prototype._setupContainerTemplate = function() {
    var cagenMainElem, toproweditorHTML;
    toproweditorHTML = DOM.elemById('TOPROWEDITOR', 'TEMPLATE_TOPROWEDITOR').innerHTML;
    cagenMainElem = DOM.elemById('CAGEN', 'MAIN_CONTAINER');
    return cagenMainElem.innerHTML = Mustache.render(toproweditorHTML, {});
  };

  TopRowEditor.prototype._setupSlider = function() {
    var isSliderInDragMode, sliderArrowLeftElem, sliderArrowRightElem, sliderContainerElem;
    sliderContainerElem = DOM.elemById('TOPROWEDITOR', 'SLIDER_CONTAINER');
    sliderContainerElem.style.width = this._totalWidth + "px";
    this._sliderElem.style.width = (this._colWidth * this._sliderCols) + "px";
    sliderArrowLeftElem = DOM.elemById('TOPROWEDITOR', 'SLIDER_ARROW_LEFT');
    sliderArrowRightElem = DOM.elemById('TOPROWEDITOR', 'SLIDER_ARROW_RIGHT');
    isSliderInDragMode = false;
    this._sliderElem.addEventListener('click', (function(_this) {
      return function() {
        if (isSliderInDragMode) {
          isSliderInDragMode = false;
          sliderArrowLeftElem.style.display = "none";
          return sliderArrowRightElem.style.display = "none";
        } else {
          isSliderInDragMode = true;
          sliderArrowLeftElem.style.display = "block";
          return sliderArrowRightElem.style.display = "block";
        }
      };
    })(this));
    this._sliderElem.addEventListener('mousemove', (function(_this) {
      return function(event) {
        if (isSliderInDragMode) {
          return _this._moveSlider(event);
        }
      };
    })(this));
    return this._sliderInitialOffset = this._getOffsetPosition(this._sliderElem);
  };

  TopRowEditor.prototype._setupButtonEvents = function() {
    DOM.elemById('TOPROWEDITOR', 'BUTTON_GENERATE').addEventListener('click', (function(_this) {
      return function() {
        _this.BUS.broadcast('tabs.show.generator');
      };
    })(this));
    return DOM.elemById('TOPROWEDITOR', 'BUTTON_RESET').addEventListener('click', (function(_this) {
      return function(event) {
        return _this._resetRow(event);
      };
    })(this));
  };

  TopRowEditor.prototype._getOffsetPosition = function(elem) {
    var left, top;
    top = elem.getBoundingClientRect().top + window.pageYOffset;
    left = elem.getBoundingClientRect().left + window.pageXOffset;
    return {
      top: top,
      left: left
    };
  };

  TopRowEditor.prototype._resetRow = function(event) {
    this._generateInitialBinary();
    return this.run();
  };

  TopRowEditor.prototype._moveSlider = function(ev) {
    var adjustedLeft, closestEdgePx, fullWidth, leftCellNo, leftPos, rightPos, xMousePos;
    xMousePos = ev.clientX;
    closestEdgePx = xMousePos - (xMousePos % this._colWidth);
    leftPos = closestEdgePx - this._sliderPxToMid;
    rightPos = closestEdgePx + this._sliderPxToMid + this._colWidth;
    fullWidth = this._totalWidth + this._colWidth;
    adjustedLeft = leftPos + this._sliderInitialOffset.left;
    if (adjustedLeft >= this._sliderInitialOffset.left && rightPos <= fullWidth) {
      this._sliderElem.style.left = adjustedLeft + "px";
      leftCellNo = (leftPos / this._colWidth) + 1;
      return this._updateEditorCells(leftCellNo);
    }
  };

  TopRowEditor.prototype._updateEditorCells = function(beginCell) {
    var cell, cellPos, j, ref, results;
    results = [];
    for (cell = j = 1, ref = this._sliderCols; 1 <= ref ? j <= ref : j >= ref; cell = 1 <= ref ? ++j : --j) {
      cellPos = cell + beginCell - 1;
      this._editorCellsElems[cell].innerHTML = cellPos;
      this._editorCellsElems[cell].setAttribute('data-cellIndex', cellPos);
      if (this._aRowBinary[cellPos] === 1) {
        results.push(this._editorCellsElems[cell].classList.add(DOM.getClass('TOPROWEDITOR', 'EDITOR_CELL_ACTIVE')));
      } else {
        results.push(this._editorCellsElems[cell].classList.remove(DOM.getClass('TOPROWEDITOR', 'EDITOR_CELL_ACTIVE')));
      }
    }
    return results;
  };

  TopRowEditor.prototype._buildEditorCells = function() {
    var cell, cellHtml, cellTemplateHTML, cells, i, j, k, leftPos, ref, ref1, results, tmpId;
    cellTemplateHTML = DOM.elemById('TOPROWEDITOR', 'TEMPLATE_EDITOR_CELL').innerHTML;
    this._jEditorContainer.style.width = (this._sliderCols * this._editorCellWidth) + "px";
    cellHtml = "";
    for (cell = j = 1, ref = this._sliderCols; 1 <= ref ? j <= ref : j >= ref; cell = 1 <= ref ? ++j : --j) {
      tmpId = "editor-cell-" + cell;
      leftPos = (cell - 1) * this._editorCellWidth;
      cellHtml += Mustache.render(cellTemplateHTML, {
        id: tmpId,
        left: leftPos
      });
    }
    this._jEditorContainer.innerHTML = cellHtml;
    cells = document.getElementsByClassName(DOM.getClass('TOPROWEDITOR', 'EDITOR_CELL'));
    results = [];
    for (i = k = 0, ref1 = cells.length - 1; 0 <= ref1 ? k <= ref1 : k >= ref1; i = 0 <= ref1 ? ++k : --k) {
      this._editorCellsElems[i + 1] = cells[i];
      results.push(cells[i].addEventListener('click', this._toggleEditorCell));
    }
    return results;
  };

  TopRowEditor.prototype._toggleEditorCell = function(event) {
    var cellNo, editorCellElem, sliderCellElem, sliderColPrefix;
    editorCellElem = event.target;
    cellNo = editorCellElem.getAttribute('data-cellIndex');
    sliderColPrefix = DOM.getPrefix('TOPROWEDITOR', 'SLIDER_COL');
    sliderCellElem = document.getElementById(sliderColPrefix + cellNo);
    if (this._aRowBinary[cellNo] === 1) {
      this._aRowBinary[cellNo] = 0;
      editorCellElem.classList.remove(DOM.getClass('TOPROWEDITOR', 'EDITOR_CELL_ACTIVE'));
      sliderCellElem.classList.remove(DOM.getClass('TOPROWEDITOR', 'SLIDER_CELL_ACTIVE'));
    } else {
      this._aRowBinary[cellNo] = 1;
      editorCellElem.classList.add(DOM.getClass('TOPROWEDITOR', 'EDITOR_CELL_ACTIVE'));
      sliderCellElem.classList.add(DOM.getClass('TOPROWEDITOR', 'SLIDER_CELL_ACTIVE'));
    }
    return radio('shared.set.toprowbinary').broadcast(this._aRowBinary);
  };

  TopRowEditor.prototype._generateInitialBinary = function() {
    var col, j, ref, seed_col;
    seed_col = Math.ceil(this._noColumns / 2);
    for (col = j = 1, ref = this._noColumns; 1 <= ref ? j <= ref : j >= ref; col = 1 <= ref ? ++j : --j) {
      if (col === seed_col) {
        this._aRowBinary[col] = 1;
      } else {
        this._aRowBinary[col] = 0;
      }
    }
    return radio('shared.set.toprowbinary').broadcast(this._aRowBinary);
  };

  TopRowEditor.prototype._buildRow = function() {
    var activeClass, col, j, leftPos, ref, rowHtml, sliderColPrefix, smallcellTemplateHTML, tmpId;
    smallcellTemplateHTML = DOM.elemById('TOPROWEDITOR', 'TEMPLATE_SLIDER_CELL').innerHTML;
    sliderColPrefix = DOM.getPrefix('TOPROWEDITOR', 'SLIDER_COL');
    rowHtml = "";
    for (col = j = 1, ref = this._noColumns; 1 <= ref ? j <= ref : j >= ref; col = 1 <= ref ? ++j : --j) {
      activeClass = "";
      if (this._aRowBinary[col] === 1) {
        activeClass = DOM.getClass('TOPROWEDITOR', 'SLIDER_CELL_ACTIVE');
      }
      leftPos = (col - 1) * this._colWidth;
      tmpId = sliderColPrefix + col;
      rowHtml += Mustache.render(smallcellTemplateHTML, {
        id: tmpId,
        left: leftPos,
        activeClass: activeClass
      });
    }
    return this._rowContainerElem.innerHTML = rowHtml;
  };

  return TopRowEditor;

})();

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/*
Initialize the CAGEN sections and setup the tabs.

@author Destin Moulton
@git https://github.com/destinmoulton/cagen
@license MIT

Component of Cellular Automata Generator (CAGEN)

The jQuery onload function that initializes the various
CAGEN features and starts the tabbed interface.
 */
window.onload = function() {
  var BUS, tabs;
  BUS = new Bus();
  new Shared();
  tabs = new Tabs(BUS);
  new Thumbnails(BUS);
  new TopRowEditor(BUS);
  new Generator(BUS);
  return tabs.start();
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFpbi5qcyIsInNvdXJjZXMiOlsiTWFpbi5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7QUFjQSxNQUFNLENBQUMsTUFBUCxHQUFnQixTQUFBO0FBRVosTUFBQTtFQUFBLEdBQUEsR0FBVSxJQUFBLEdBQUEsQ0FBQTtFQUVOLElBQUEsTUFBQSxDQUFBO0VBR0osSUFBQSxHQUFXLElBQUEsSUFBQSxDQUFLLEdBQUw7RUFHUCxJQUFBLFVBQUEsQ0FBVyxHQUFYO0VBR0EsSUFBQSxZQUFBLENBQWEsR0FBYjtFQUdBLElBQUEsU0FBQSxDQUFVLEdBQVY7U0FHSixJQUFJLENBQUMsS0FBTCxDQUFBO0FBbkJZIiwic291cmNlc0NvbnRlbnQiOlsiIyMjXG5Jbml0aWFsaXplIHRoZSBDQUdFTiBzZWN0aW9ucyBhbmQgc2V0dXAgdGhlIHRhYnMuXG5cbkBhdXRob3IgRGVzdGluIE1vdWx0b25cbkBnaXQgaHR0cHM6Ly9naXRodWIuY29tL2Rlc3Rpbm1vdWx0b24vY2FnZW5cbkBsaWNlbnNlIE1JVFxuXG5Db21wb25lbnQgb2YgQ2VsbHVsYXIgQXV0b21hdGEgR2VuZXJhdG9yIChDQUdFTilcblxuVGhlIGpRdWVyeSBvbmxvYWQgZnVuY3Rpb24gdGhhdCBpbml0aWFsaXplcyB0aGUgdmFyaW91c1xuQ0FHRU4gZmVhdHVyZXMgYW5kIHN0YXJ0cyB0aGUgdGFiYmVkIGludGVyZmFjZS5cblxuIyMjXG5cbndpbmRvdy5vbmxvYWQgPSAtPlxuICAgICMgUFVCL1NVQiBhbmQgdmFyaWFibGUgc3RvcmUgZm9yIGludGVyLWNsYXNzIGNvbW11bmljYXRpb25cbiAgICBCVVMgPSBuZXcgQnVzKClcbiAgICAgICAgXG4gICAgbmV3IFNoYXJlZCgpXG5cbiAgICAjIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiB0aGUgVGFicyAodmlzdWFsIHNlY3Rpb25hbCBtYW5hZ2VtZW50KVxuICAgIHRhYnMgPSBuZXcgVGFicyhCVVMpXG5cbiAgICAjIENyZWF0ZSBpbnN0YW5jZSBvZiB0aGUgUnVsZSBUaHVtYm5haWxzIHByZXZpZXcvc2VsZWN0b3JcbiAgICBuZXcgVGh1bWJuYWlscyhCVVMpXG5cbiAgICAjIENyZWF0ZSBpbnN0YW5jZSBvZiB0aGUgVG9wIFJvdyBFZGl0b3JcbiAgICBuZXcgVG9wUm93RWRpdG9yKEJVUylcblxuICAgICMgQ3JlYXRlIGluc3RhbmNlIG9mIHRoZSBEYXNoYm9hcmRcbiAgICBuZXcgR2VuZXJhdG9yKEJVUylcblxuICAgICMgU3RhcnQgdGhlIHRhYiBpbnRlcmZhY2VcbiAgICB0YWJzLnN0YXJ0KClcblxuIl19
